{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/components/ToTestList/ToTestList.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"actions\": \"ToTestList-module__vY2V8W__actions\",\n  \"addButton\": \"ToTestList-module__vY2V8W__addButton\",\n  \"clearButton\": \"ToTestList-module__vY2V8W__clearButton\",\n  \"closeButton\": \"ToTestList-module__vY2V8W__closeButton\",\n  \"dark\": \"ToTestList-module__vY2V8W__dark\",\n  \"deleteButton\": \"ToTestList-module__vY2V8W__deleteButton\",\n  \"form\": \"ToTestList-module__vY2V8W__form\",\n  \"header\": \"ToTestList-module__vY2V8W__header\",\n  \"popup\": \"ToTestList-module__vY2V8W__popup\",\n  \"popup-show\": \"ToTestList-module__vY2V8W__popup-show\",\n  \"selectedRow\": \"ToTestList-module__vY2V8W__selectedRow\",\n  \"table\": \"ToTestList-module__vY2V8W__table\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/ToTestList/ToTestList.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./ToTestList.module.css\";\r\n\r\nconst ToTestList: React.FC<{ onClose: () => void }> = ({ onClose }) => {\r\n  const [rows, setRows] = useState<any[]>([]);\r\n  const [form, setForm] = useState({\r\n    test: \"\",\r\n    satellite: \"\",\r\n    loggedBy: \"\",\r\n  });\r\n\r\n  // Load data from localStorage only when the component is mounted\r\n  useEffect(() => {\r\n    const savedRows = localStorage.getItem(\"toTestListRows\");\r\n    if (savedRows) {\r\n      console.log(\"Loaded from localStorage:\", JSON.parse(savedRows));\r\n      setRows(JSON.parse(savedRows)); // Restore the list from localStorage\r\n    } else {\r\n      console.log(\"No saved data found in localStorage.\");\r\n    }\r\n  }, []); // Run only once when mounted\r\n\r\n  // Save data to localStorage whenever rows change\r\n  useEffect(() => {\r\n    if (rows.length > 0) {\r\n      console.log(\"Saving to localStorage:\", rows);\r\n      localStorage.setItem(\"toTestListRows\", JSON.stringify(rows));\r\n    } else {\r\n      console.log(\"Skipping save to localStorage because rows are empty.\");\r\n    }\r\n  }, [rows]);\r\n\r\n  const addItem = () => {\r\n    const newRow = {\r\n      sn: rows.length + 1,\r\n      test: form.test,\r\n      satellite: form.satellite,\r\n      dateTime: new Date().toLocaleString(),\r\n      loggedBy: form.loggedBy,\r\n    };\r\n    setRows([...rows, newRow]);\r\n    setForm({ test: \"\", satellite: \"\", loggedBy: \"\" });\r\n  };\r\n\r\n  const deleteItem = () => {\r\n    const selectedIndex = rows.findIndex((row) => row.selected);\r\n    if (selectedIndex !== -1) {\r\n      const updatedRows = rows.filter((_, index) => index !== selectedIndex);\r\n\r\n      if (updatedRows.length === 0) {\r\n        // If the list is empty, clear localStorage\r\n        localStorage.removeItem(\"toTestListRows\");\r\n      } else {\r\n        // Otherwise, update the rows and save to localStorage\r\n        localStorage.setItem(\"toTestListRows\", JSON.stringify(updatedRows));\r\n      }\r\n\r\n      // Update state with recalculated S/N\r\n      setRows(\r\n        updatedRows.map((row, index) => ({\r\n          ...row,\r\n          sn: index + 1, // Recalculate S/N\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const clearList = () => {\r\n    setRows([]);\r\n    localStorage.removeItem(\"toTestListRows\"); // Explicitly clear localStorage\r\n  };\r\n\r\n  const toggleRowSelection = (index: number) => {\r\n    const updatedRows = rows.map((row, i) => ({\r\n      ...row,\r\n      selected: i === index ? !row.selected : false,\r\n    }));\r\n    setRows(updatedRows);\r\n  };\r\n\r\n  // Determine if the page is in dark mode\r\n  const isDarkMode = document.documentElement.classList.contains(\"dark\");\r\n\r\n  return (\r\n    <div className={styles.popup}>\r\n      <div className={styles.header}>\r\n        <h2>Tests to Conduct</h2>\r\n        <button\r\n          onClick={onClose}\r\n          className={styles.closeButton}\r\n          style={{ color: isDarkMode ? \"white\" : \"black\" }}\r\n        >\r\n          âœ–\r\n        </button>\r\n      </div>\r\n      <table className={styles.table}>\r\n        <thead>\r\n          <tr>\r\n            <th>S/N</th>\r\n            <th>Test</th>\r\n            <th>Satellite</th>\r\n            <th>Date/Time Logged</th>\r\n            <th>Logged by</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, index) => (\r\n            <tr\r\n              key={index}\r\n              style={{\r\n                backgroundColor: row.selected\r\n                  ? isDarkMode\r\n                    ? \"#003366\" // Dark blue for dark mode\r\n                    : \"#d0ebff\" // Light blue for light mode\r\n                  : \"transparent\",\r\n              }}\r\n              className={row.selected ? styles.selectedRow : \"\"}\r\n              onClick={() => toggleRowSelection(index)}\r\n            >\r\n              <td>{row.sn}</td>\r\n              <td>{row.test}</td>\r\n              <td>{row.satellite}</td>\r\n              <td>{row.dateTime}</td>\r\n              <td>{row.loggedBy}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className={styles.form}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Test\"\r\n          value={form.test}\r\n          onChange={(e) => setForm({ ...form, test: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Satellite\"\r\n          value={form.satellite}\r\n          onChange={(e) => setForm({ ...form, satellite: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Logged by\"\r\n          value={form.loggedBy}\r\n          onChange={(e) => setForm({ ...form, loggedBy: e.target.value })}\r\n        />\r\n        <button onClick={addItem} className={styles.addButton}>\r\n          +\r\n        </button>\r\n      </div>\r\n      <div className={styles.actions}>\r\n        <button onClick={deleteItem} className={styles.deleteButton}>\r\n          Delete Item\r\n        </button>\r\n        <button onClick={clearList} className={styles.clearButton}>\r\n          Clear List\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToTestList;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;AAEA,MAAM,aAAgD,CAAC,EAAE,OAAO,EAAE;;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAC1C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAC/B,MAAM;QACN,WAAW;QACX,UAAU;IACZ;IAEA,iEAAiE;IACjE,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,MAAM,YAAY,aAAa,OAAO,CAAC;YACvC,IAAI,WAAW;gBACb,QAAQ,GAAG,CAAC,6BAA6B,KAAK,KAAK,CAAC;gBACpD,QAAQ,KAAK,KAAK,CAAC,aAAa,qCAAqC;YACvE,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF;+BAAG,EAAE,GAAG,6BAA6B;IAErC,iDAAiD;IACjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,IAAI,KAAK,MAAM,GAAG,GAAG;gBACnB,QAAQ,GAAG,CAAC,2BAA2B;gBACvC,aAAa,OAAO,CAAC,kBAAkB,KAAK,SAAS,CAAC;YACxD,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF;+BAAG;QAAC;KAAK;IAET,MAAM,UAAU;QACd,MAAM,SAAS;YACb,IAAI,KAAK,MAAM,GAAG;YAClB,MAAM,KAAK,IAAI;YACf,WAAW,KAAK,SAAS;YACzB,UAAU,IAAI,OAAO,cAAc;YACnC,UAAU,KAAK,QAAQ;QACzB;QACA,QAAQ;eAAI;YAAM;SAAO;QACzB,QAAQ;YAAE,MAAM;YAAI,WAAW;YAAI,UAAU;QAAG;IAClD;IAEA,MAAM,aAAa;QACjB,MAAM,gBAAgB,KAAK,SAAS,CAAC,CAAC,MAAQ,IAAI,QAAQ;QAC1D,IAAI,kBAAkB,CAAC,GAAG;YACxB,MAAM,cAAc,KAAK,MAAM,CAAC,CAAC,GAAG,QAAU,UAAU;YAExD,IAAI,YAAY,MAAM,KAAK,GAAG;gBAC5B,2CAA2C;gBAC3C,aAAa,UAAU,CAAC;YAC1B,OAAO;gBACL,sDAAsD;gBACtD,aAAa,OAAO,CAAC,kBAAkB,KAAK,SAAS,CAAC;YACxD;YAEA,qCAAqC;YACrC,QACE,YAAY,GAAG,CAAC,CAAC,KAAK,QAAU,CAAC;oBAC/B,GAAG,GAAG;oBACN,IAAI,QAAQ;gBACd,CAAC;QAEL;IACF;IAEA,MAAM,YAAY;QAChB,QAAQ,EAAE;QACV,aAAa,UAAU,CAAC,mBAAmB,gCAAgC;IAC7E;IAEA,MAAM,qBAAqB,CAAC;QAC1B,MAAM,cAAc,KAAK,GAAG,CAAC,CAAC,KAAK,IAAM,CAAC;gBACxC,GAAG,GAAG;gBACN,UAAU,MAAM,QAAQ,CAAC,IAAI,QAAQ,GAAG;YAC1C,CAAC;QACD,QAAQ;IACV;IAEA,wCAAwC;IACxC,MAAM,aAAa,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;IAE/D,qBACE,6LAAC;QAAI,WAAW,4JAAA,CAAA,UAAM,CAAC,KAAK;;0BAC1B,6LAAC;gBAAI,WAAW,4JAAA,CAAA,UAAM,CAAC,MAAM;;kCAC3B,6LAAC;kCAAG;;;;;;kCACJ,6LAAC;wBACC,SAAS;wBACT,WAAW,4JAAA,CAAA,UAAM,CAAC,WAAW;wBAC7B,OAAO;4BAAE,OAAO,aAAa,UAAU;wBAAQ;kCAChD;;;;;;;;;;;;0BAIH,6LAAC;gBAAM,WAAW,4JAAA,CAAA,UAAM,CAAC,KAAK;;kCAC5B,6LAAC;kCACC,cAAA,6LAAC;;8CACC,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;8CAAG;;;;;;8CACJ,6LAAC;8CAAG;;;;;;;;;;;;;;;;;kCAGR,6LAAC;kCACE,KAAK,GAAG,CAAC,CAAC,KAAK,sBACd,6LAAC;gCAEC,OAAO;oCACL,iBAAiB,IAAI,QAAQ,GACzB,aACE,UAAU,0BAA0B;uCACpC,UAAU,4BAA4B;uCACxC;gCACN;gCACA,WAAW,IAAI,QAAQ,GAAG,4JAAA,CAAA,UAAM,CAAC,WAAW,GAAG;gCAC/C,SAAS,IAAM,mBAAmB;;kDAElC,6LAAC;kDAAI,IAAI,EAAE;;;;;;kDACX,6LAAC;kDAAI,IAAI,IAAI;;;;;;kDACb,6LAAC;kDAAI,IAAI,SAAS;;;;;;kDAClB,6LAAC;kDAAI,IAAI,QAAQ;;;;;;kDACjB,6LAAC;kDAAI,IAAI,QAAQ;;;;;;;+BAfZ;;;;;;;;;;;;;;;;0BAoBb,6LAAC;gBAAI,WAAW,4JAAA,CAAA,UAAM,CAAC,IAAI;;kCACzB,6LAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,OAAO,KAAK,IAAI;wBAChB,UAAU,CAAC,IAAM,QAAQ;gCAAE,GAAG,IAAI;gCAAE,MAAM,EAAE,MAAM,CAAC,KAAK;4BAAC;;;;;;kCAE3D,6LAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,OAAO,KAAK,SAAS;wBACrB,UAAU,CAAC,IAAM,QAAQ;gCAAE,GAAG,IAAI;gCAAE,WAAW,EAAE,MAAM,CAAC,KAAK;4BAAC;;;;;;kCAEhE,6LAAC;wBACC,MAAK;wBACL,aAAY;wBACZ,OAAO,KAAK,QAAQ;wBACpB,UAAU,CAAC,IAAM,QAAQ;gCAAE,GAAG,IAAI;gCAAE,UAAU,EAAE,MAAM,CAAC,KAAK;4BAAC;;;;;;kCAE/D,6LAAC;wBAAO,SAAS;wBAAS,WAAW,4JAAA,CAAA,UAAM,CAAC,SAAS;kCAAE;;;;;;;;;;;;0BAIzD,6LAAC;gBAAI,WAAW,4JAAA,CAAA,UAAM,CAAC,OAAO;;kCAC5B,6LAAC;wBAAO,SAAS;wBAAY,WAAW,4JAAA,CAAA,UAAM,CAAC,YAAY;kCAAE;;;;;;kCAG7D,6LAAC;wBAAO,SAAS;wBAAW,WAAW,4JAAA,CAAA,UAAM,CAAC,WAAW;kCAAE;;;;;;;;;;;;;;;;;;AAMnE;GA9JM;KAAA;uCAgKS"}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/components/ServerWindow/ServerWindow.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"closeButton\": \"ServerWindow-module__wfqmlq__closeButton\",\n  \"connectButton\": \"ServerWindow-module__wfqmlq__connectButton\",\n  \"dark\": \"ServerWindow-module__wfqmlq__dark\",\n  \"form\": \"ServerWindow-module__wfqmlq__form\",\n  \"header\": \"ServerWindow-module__wfqmlq__header\",\n  \"input\": \"ServerWindow-module__wfqmlq__input\",\n  \"popup\": \"ServerWindow-module__wfqmlq__popup\",\n  \"popup-show\": \"ServerWindow-module__wfqmlq__popup-show\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/ServerWindow/ServerWindow.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from \"./ServerWindow.module.css\";\r\n\r\ninterface ServerWindowProps {\r\n  onClose: () => void;\r\n}\r\n\r\nconst ServerWindow: React.FC<ServerWindowProps> = ({ onClose }) => {\r\n  const [serverAddress, setServerAddress] = useState<string>(\"\");\r\n  const [serverId, setServerId] = useState<string>(\"\");\r\n  const [status, setStatus] = useState<string>(\"Disconnected\");\r\n  const [logs, setLogs] = useState<{ timestamp: string; message: string }[]>([]);\r\n\r\n  const logsEndRef = useRef<HTMLDivElement | null>(null);\r\n  const navigate = useNavigate();\r\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n\r\n  const appendLog = (message: string) => {\r\n    const timestamp = new Date().toLocaleString();\r\n    setLogs((prevLogs) => [...prevLogs, { timestamp, message }]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (logsEndRef.current) {\r\n      logsEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [logs]);\r\n\r\n  const handleConnect = async () => {\r\n    if (!serverAddress || !serverId) {\r\n      alert(\"Please provide both Server Address and Server ID.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setStatus(\"Connecting...\");\r\n      appendLog(\"Attempting to connect to MCC server...\");\r\n      console.log(\"Connecting to:\", `${backendUrl}/connect_mcc`); // Log the URL\r\n\r\n      const response = await fetch(`${backendUrl}/connect_mcc`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          server_address: serverAddress,\r\n          server_id: serverId,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Non-JSON response:\", errorText);\r\n        appendLog(`HTTP error! Status: ${response.status} - ${errorText}`);\r\n        setStatus(\"Connection Error\");\r\n        return;\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log(\"Backend response:\", result);\r\n\r\n      if (result.status === \"success\") {\r\n        setStatus(\"Connected\");\r\n        appendLog(result.message);\r\n        navigate(\"/main\");\r\n      } else {\r\n        setStatus(\"Failed to Connect\");\r\n        appendLog(result.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error connecting to MCC:\", error);\r\n      setStatus(\"Connection Error\");\r\n      appendLog(`Connection error: ${error}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.popup} style={{ width: \"500px\" }}>\r\n      <div className={styles.header}>\r\n        <h2>Server Connection</h2>\r\n        <button\r\n          onClick={onClose}\r\n          className={styles.closeButton}\r\n          style={{\r\n            color: \r\n              typeof document !== \"undefined\" &&\r\n              document.documentElement.classList.contains(\"dark\")\r\n                ? \"white\"\r\n                : \"black\",\r\n          }}\r\n        >\r\n          âœ–\r\n        </button>\r\n      </div>\r\n      <div className={styles.form}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Server Address\"\r\n          value={serverAddress}\r\n          onChange={(e) => setServerAddress(e.target.value)}\r\n          className={styles.input}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Server ID\"\r\n          value={serverId}\r\n          onChange={(e) => setServerId(e.target.value)}\r\n          className={styles.input}\r\n        />\r\n        <button onClick={handleConnect} className={styles.connectButton}>\r\n          Connect\r\n        </button>\r\n      </div>\r\n      <p>Status: {status}</p>\r\n      <div className={styles.logs}>\r\n        <h3>Logs</h3>\r\n        <div\r\n          className={styles.logWindow}\r\n          style={{\r\n            maxHeight: \"250px\",\r\n            overflowY: \"scroll\",\r\n            border: \"1px solid #ccc\",\r\n            padding: \"10px\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n        >\r\n          {logs.map((log, index) => (\r\n            <div key={index} style={{ display: \"flex\", alignItems: \"flex-start\" }}>\r\n              <span\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  minWidth: \"150px\",\r\n                  marginRight: \"8px\",\r\n                  textAlign: \"right\",\r\n                }}\r\n              >\r\n                [{log.timestamp}]\r\n              </span>\r\n              <span style={{ flex: 1 }}>{log.message}</span>\r\n            </div>\r\n          ))}\r\n          <div ref={logsEndRef}></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ServerWindow;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 655, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/components/WelcomeWindow/WelcomeWindow.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"buttonContainer\": \"WelcomeWindow-module__WdKywW__buttonContainer\",\n  \"buttonWithNotification\": \"WelcomeWindow-module__WdKywW__buttonWithNotification\",\n  \"dark\": \"WelcomeWindow-module__WdKywW__dark\",\n  \"dateTime\": \"WelcomeWindow-module__WdKywW__dateTime\",\n  \"logo\": \"WelcomeWindow-module__WdKywW__logo\",\n  \"notificationDot\": \"WelcomeWindow-module__WdKywW__notificationDot\",\n  \"welcomeButton\": \"WelcomeWindow-module__WdKywW__welcomeButton\",\n  \"welcomeWindow\": \"WelcomeWindow-module__WdKywW__welcomeWindow\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 665, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 671, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/WelcomeWindow/WelcomeWindow.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ToTestList from \"../ToTestList/ToTestList\"; // Import the ToTestList popup window React Component\r\nimport ServerWindow from \"../ServerWindow/ServerWindow\"; // Import Server Window Component\r\nimport styles from \"./WelcomeWindow.module.css\";\r\n\r\n// Use require if not using images.d.ts\r\n//const logo = require(\"../../assets/logo.jpg\");\r\n\r\nconst WelcomeWindow: React.FC = () => {\r\n  const [dateTime, setDateTime] = useState<string | null>(null);\r\n  const [showToTestList, setShowToTestList] = useState(false);\r\n  const [showServerWindow, setShowServerWindow] = useState(false);\r\n  const [hasTests, setHasTests] = useState(false); // Track if there are rows in the list\r\n\r\n  // Check if the page is in dark mode\r\n  const isDarkMode = document.documentElement.classList.contains(\"dark\");\r\n\r\n  // Function to format date and time as DD/MM/YYYY HH:MM:SS\r\n  const formatDateTime = (date: Date) => {\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const year = date.getFullYear();\r\n    const hours = String(date.getHours()).padStart(2, \"0\");\r\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n    const seconds = String(date.getSeconds()).padStart(2, \"0\");\r\n    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  // Update the date/time every second\r\n  useEffect(() => {\r\n    const updateDateTime = () => setDateTime(formatDateTime(new Date()));\r\n    updateDateTime();\r\n    const interval = setInterval(updateDateTime, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Check for rows in localStorage\r\n  useEffect(() => {\r\n    const savedRows = localStorage.getItem(\"toTestListRows\");\r\n    const hasRows = savedRows ? JSON.parse(savedRows).length > 0 : false;\r\n    // setHasTests is always passed a valid boolean (true or false).\r\n    // may receive null or an empty string due to the logic\r\n    // without true / false and just > 0\r\n    setHasTests(hasRows);\r\n  }, [showToTestList]);\r\n\r\n  const handleToTestListOpen = () => {\r\n    console.log(\"Opening ToTestList...\");\r\n    setShowToTestList(true);\r\n  };\r\n\r\n  const handleToTestListClose = () => {\r\n    console.log(\"ToTestList closed\");\r\n    setShowToTestList(false);\r\n  };\r\n\r\n  const handleServerWindowOpen = () => {\r\n    console.log(\"Opening ServerWindow...\");\r\n    setShowServerWindow(true);\r\n  };\r\n\r\n  const handleServerWindowClose = () => {\r\n    console.log(\"ServerWindow closed\");\r\n    setShowServerWindow(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={styles.welcomeWindow}\r\n      style={{\r\n        background: isDarkMode\r\n          ? \"linear-gradient(135deg, #000000, #1a1a1a)\"\r\n          : \"linear-gradient(135deg, #ffffff, #e6f7ff)\",\r\n      }}\r\n    >\r\n      <header className={styles.welcomeHeader}>\r\n        <img src=\"/assets/SaRCLogo.png\" alt=\"Satellite Research Centre Logo\" className={styles.logo} />\r\n        <h2>Satellite Research Centre</h2>\r\n        <h1>Satellite Automated Testing System</h1>\r\n        {dateTime && <p className={styles.dateTime}>{dateTime}</p>}\r\n      </header>\r\n      <div className={styles.buttonContainer}>\r\n        <div className={styles.buttonWithNotification}>\r\n          <button\r\n            className={styles.welcomeButton}\r\n            onClick={handleToTestListOpen}\r\n          >\r\n            Tests to Conduct\r\n          </button>\r\n          {hasTests && <span className={styles.notificationDot}></span>}\r\n        </div>\r\n        <button\r\n          className={styles.welcomeButton}\r\n          onClick={handleServerWindowOpen}\r\n        >\r\n          MCC\r\n        </button>\r\n      </div>\r\n      {showToTestList && <ToTestList onClose={handleToTestListClose} />}\r\n      {showServerWindow && <ServerWindow onClose={handleServerWindowClose} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WelcomeWindow;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 866, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 871, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/components/MainScreen/MainScreen.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"aboutButton\": \"MainScreen-module__4v2AYG__aboutButton\",\n  \"aboutSection\": \"MainScreen-module__4v2AYG__aboutSection\",\n  \"actionButtons\": \"MainScreen-module__4v2AYG__actionButtons\",\n  \"addProfileButton\": \"MainScreen-module__4v2AYG__addProfileButton\",\n  \"cancelButton\": \"MainScreen-module__4v2AYG__cancelButton\",\n  \"checkoutButton\": \"MainScreen-module__4v2AYG__checkoutButton\",\n  \"checkoutSection\": \"MainScreen-module__4v2AYG__checkoutSection\",\n  \"content\": \"MainScreen-module__4v2AYG__content\",\n  \"dark\": \"MainScreen-module__4v2AYG__dark\",\n  \"deleteButton\": \"MainScreen-module__4v2AYG__deleteButton\",\n  \"docx\": \"MainScreen-module__4v2AYG__docx\",\n  \"docx-wrapper\": \"MainScreen-module__4v2AYG__docx-wrapper\",\n  \"downloadButton\": \"MainScreen-module__4v2AYG__downloadButton\",\n  \"dropdownButton\": \"MainScreen-module__4v2AYG__dropdownButton\",\n  \"editButton\": \"MainScreen-module__4v2AYG__editButton\",\n  \"editButtons\": \"MainScreen-module__4v2AYG__editButtons\",\n  \"editableTextarea\": \"MainScreen-module__4v2AYG__editableTextarea\",\n  \"hidden\": \"MainScreen-module__4v2AYG__hidden\",\n  \"imageContainer\": \"MainScreen-module__4v2AYG__imageContainer\",\n  \"imageWrapper\": \"MainScreen-module__4v2AYG__imageWrapper\",\n  \"mainScreen\": \"MainScreen-module__4v2AYG__mainScreen\",\n  \"menu\": \"MainScreen-module__4v2AYG__menu\",\n  \"menuItem\": \"MainScreen-module__4v2AYG__menuItem\",\n  \"profileActions\": \"MainScreen-module__4v2AYG__profileActions\",\n  \"profileButtonGroup\": \"MainScreen-module__4v2AYG__profileButtonGroup\",\n  \"profileContainer\": \"MainScreen-module__4v2AYG__profileContainer\",\n  \"profileDropdown\": \"MainScreen-module__4v2AYG__profileDropdown\",\n  \"profileHeading\": \"MainScreen-module__4v2AYG__profileHeading\",\n  \"profilePage\": \"MainScreen-module__4v2AYG__profilePage\",\n  \"profileSidebarItem\": \"MainScreen-module__4v2AYG__profileSidebarItem\",\n  \"profileSubtext\": \"MainScreen-module__4v2AYG__profileSubtext\",\n  \"profilesButton\": \"MainScreen-module__4v2AYG__profilesButton\",\n  \"removeImageButton\": \"MainScreen-module__4v2AYG__removeImageButton\",\n  \"retractExpandSidebarButton\": \"MainScreen-module__4v2AYG__retractExpandSidebarButton\",\n  \"richTextEditor\": \"MainScreen-module__4v2AYG__richTextEditor\",\n  \"saveButton\": \"MainScreen-module__4v2AYG__saveButton\",\n  \"settingsButton\": \"MainScreen-module__4v2AYG__settingsButton\",\n  \"settingsContainer\": \"MainScreen-module__4v2AYG__settingsContainer\",\n  \"sidebar\": \"MainScreen-module__4v2AYG__sidebar\",\n  \"sidebarHeader\": \"MainScreen-module__4v2AYG__sidebarHeader\",\n  \"toggleButton\": \"MainScreen-module__4v2AYG__toggleButton\",\n  \"uploadButton\": \"MainScreen-module__4v2AYG__uploadButton\",\n  \"uploadContainer\": \"MainScreen-module__4v2AYG__uploadContainer\",\n  \"uploadNote\": \"MainScreen-module__4v2AYG__uploadNote\",\n  \"uploadedFileName\": \"MainScreen-module__4v2AYG__uploadedFileName\",\n  \"uploadedImage\": \"MainScreen-module__4v2AYG__uploadedImage\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 919, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 925, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/MainScreen/MainScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./MainScreen.module.css\";\r\nimport ToTestList from \"../ToTestList/ToTestList\";\r\nimport { FaCheck, FaTimes, FaWrench, FaBars, FaCog, FaPlus, FaEdit, FaTrash, FaInfoCircle } from \"react-icons/fa\";\r\nimport { FaDownload } from \"react-icons/fa\";\r\nimport mammoth from \"mammoth\"; // Import mammoth for `.docx` extraction, npm install mammoth\r\nimport { renderAsync } from \"docx-preview\"; // npm install docx-preview\r\nimport { Document, Packer, Paragraph } from \"docx\"; // npm install docx\r\nimport { EditorContent, useEditor } from \"@tiptap/react\";\r\nimport StarterKit from \"@tiptap/starter-kit\";\r\nimport { Profile } from 'types/types';\r\nimport Table from \"@tiptap/extension-table\";\r\nimport TableRow from \"@tiptap/extension-table-row\";\r\nimport TableCell from \"@tiptap/extension-table-cell\";\r\nimport TableHeader from \"@tiptap/extension-table-header\";\r\nimport BulletList from \"@tiptap/extension-bullet-list\";\r\nimport OrderedList from \"@tiptap/extension-ordered-list\";\r\nimport ListItem from \"@tiptap/extension-list-item\";\r\nimport TurndownService from \"turndown\";\r\nimport { DndContext, closestCenter } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport DraggableBox from \"../MainScreen/DraggableBox\"; // Import Draggable Box\r\n\r\n\r\nconst API_URL = process.env.REACT_APP_BACKEND_URL\r\n  ? `${process.env.REACT_APP_BACKEND_URL}/profiles`\r\n  : \"http://127.0.0.1:5000/profiles\"; // fall back\r\n\r\n// Ensure this is correct\r\n\r\n\r\nconst MainScreen: React.FC = () => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\r\n  const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false);\r\n  const [profiles, setProfiles] = useState<Profile[]>([]);\r\n  const [selectedProfile, setSelectedProfile] = useState<string | null>(null);\r\n  const [showToTestList, setShowToTestList] = useState(false);\r\n  const [showAbout, setShowAbout] = useState(false);\r\n  const [uploadedText, setUploadedText] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [tempDescription, setTempDescription] = useState(\"\");\r\n  const [uploadedImages, setUploadedImages] = useState<{ src: string; alt: string }[]>([]);\r\n  const [uploadedFileName, setUploadedFileName] = useState<string | null>(null);\r\n  const [profileData, setProfileData] = useState<{ \r\n    [key: string]: { \r\n      description: string; \r\n      images: { src: string; alt: string }[]; \r\n      uploadedFileName?: string; // âœ… Store filename per profile\r\n    } \r\n  }>({});\r\n  const [showCheckout, setShowCheckout] = useState(false);\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    fetchProfiles();\r\n  }, []);\r\n\r\n  const fetchProfiles = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}`);\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch profiles.\");\r\n      }\r\n  \r\n      const data = await response.json();\r\n  \r\n      let profileMap: {\r\n        [key: string]: { description: string; images: { src: string; alt: string }[], uploadedFileName?: string };\r\n      } = {};\r\n  \r\n      data.forEach((profile: Profile) => {\r\n        profileMap[profile.name] = {\r\n          description: profile.description || \"\",\r\n          images: profile.images && Array.isArray(profile.images)\r\n            ? profile.images.map(img => \r\n                typeof img === \"string\" \r\n                  ? { src: img, alt: \"Uploaded image\" } \r\n                  : img) \r\n            : [],\r\n          uploadedFileName: profile.uploadedFileName || \"\",\r\n        };\r\n      });\r\n  \r\n      setProfiles(data);\r\n      setProfileData(profileMap);\r\n    } catch (error) {\r\n      console.error(\"Error fetching profiles:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);\r\n  const toggleProfileDropdown = () => setIsProfileDropdownOpen(!isProfileDropdownOpen);\r\n  const toggleAbout = () => {\r\n    if (!selectedProfile) return;\r\n    setShowAbout(!showAbout);\r\n  };\r\n\r\n\r\n  const addProfile = async () => {\r\n    let profileName = prompt(\"Enter profile name:\");\r\n  \r\n    if (!profileName || profileName.trim() === \"\") {\r\n      alert(\"Profile name cannot be empty.\");\r\n      return;\r\n    }\r\n  \r\n    profileName = profileName.trim();\r\n  \r\n    if (profiles.some((profile) => profile.name.toLowerCase() === profileName.toLowerCase())) {\r\n      alert(\"Profile name already exists! Choose a different name.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(`${API_URL}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ name: profileName, description: \"\", images: [] }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorMessage = await response.json();\r\n        throw new Error(errorMessage.error || \"Failed to create profile.\");\r\n      }\r\n  \r\n      const newProfile = await response.json();\r\n      setProfiles([...profiles, newProfile]);\r\n  \r\n      // Initialize profile data\r\n      setProfileData((prev) => ({\r\n        ...prev,\r\n        [newProfile.name]: { description: \"\", images: [] },\r\n      }));\r\n    } catch (error: unknown) {\r\n      console.error(\"Error adding profile:\", error);\r\n      if (error instanceof Error) {\r\n        alert(error.message);\r\n      } else {\r\n        alert(\"An unexpected error occurred.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  const deleteProfile = async (profileName: string) => {\r\n    const confirmDelete = window.confirm(`Are you sure you want to delete the profile: ${profileName}?`);\r\n    if (!confirmDelete) {\r\n      return; // Cancel deletion if user clicks \"Cancel\"\r\n    }\r\n  \r\n    try {\r\n      await fetch(`${API_URL}/${profileName}`, { method: \"DELETE\" });\r\n      setProfiles(profiles.filter((profile) => profile.name !== profileName));\r\n      setSelectedProfile(null);\r\n    } catch (error) {\r\n      console.error(\"Error deleting profile:\", error);\r\n    }\r\n  };\r\n  \r\n  const convertImageToBase64 = async (imageUrl: string): Promise<string> => {\r\n    try {\r\n      const response = await fetch(imageUrl);\r\n      const blob = await response.blob();\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => resolve(reader.result as string);\r\n        reader.readAsDataURL(blob);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error converting image to Base64:\", error);\r\n      return \"\";\r\n    }\r\n  };\r\n  \r\n  let formattedHtml = \"\";\r\n\r\n  const turndownService = new TurndownService();\r\n  turndownService.addRule(\"list\", {\r\n    filter: [\"ul\", \"ol\"],\r\n    replacement: function (content: string, node: Node) {\r\n      return (node as HTMLElement).outerHTML; // âœ… Typecast `node` as `HTMLElement`\r\n    },\r\n  });\r\n  \r\n  \r\n/* Function to handle file uploads */\r\nconst handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  if (!selectedProfile) return;\r\n\r\n  const file = event.target.files?.[0];\r\n  if (!file) return;\r\n\r\n  const fileName = file.name;\r\n\r\n  // âœ… Store the file name (avoid unnecessary re-renders)\r\n  setProfileData((prevData) => ({\r\n    ...prevData,\r\n    [selectedProfile]: {\r\n      ...prevData[selectedProfile],\r\n      uploadedFileName: fileName,\r\n    },\r\n  }));\r\n\r\n  const reader = new FileReader();\r\n\r\n  if (file.type === \"text/plain\") {\r\n    reader.onload = (e) => {\r\n      if (e.target?.result) {\r\n        const uploadedText = e.target.result.toString().trim();\r\n        console.log(\"Extracted Text Content:\", uploadedText);\r\n        setUploadedText(uploadedText);\r\n        autoSaveToDatabase(uploadedText, uploadedImages);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  } else if (file.name.endsWith(\".docx\")) {\r\n    reader.onload = async (e) => {\r\n      if (e.target?.result instanceof ArrayBuffer) {\r\n        try {\r\n          let formattedHtml = \"\";\r\n\r\n          // âœ… Extract HTML using `mammoth.convertToHtml()`\r\n          const mammothResult = await mammoth.convertToHtml({ arrayBuffer: e.target.result });\r\n          let extractedHtml = mammothResult.value.trim();\r\n\r\n          console.log(\"Mammoth Extracted Content (With Lists):\", extractedHtml);\r\n\r\n          // âœ… Preserve bullet points & numbered lists properly\r\n          formattedHtml = extractedHtml\r\n            .replace(/<p>\\s*â€¢\\s*/g, \"<ul><li>\") // Fix unordered lists\r\n            .replace(/<p>\\s*\\d+\\.\\s*/g, \"<ol><li>\") // Fix ordered lists\r\n            .replace(/<\\/p>\\s*<p>/g, \"</li><li>\") // Ensure list items are correctly wrapped\r\n            .replace(/<\\/p>/g, \"</li></ul>\") // Close unordered lists properly\r\n            .replace(/<\\/ol><\\/li>/g, \"</ol>\") // Close ordered lists properly\r\n            .replace(/<\\/li><\\/ul>(?!<\\/li>)/g, \"</ul>\"); // Remove misaligned list endings\r\n\r\n          console.log(\"Final Processed HTML (Fixed Lists):\", formattedHtml);\r\n\r\n          // âœ… Process `docx-preview` but DO NOT append it to the UI\r\n          const docxContainer = document.createElement(\"div\");\r\n          await renderAsync(e.target.result, docxContainer);\r\n\r\n          // âœ… Extract only relevant content, ignoring `docx-preview` elements\r\n          const extractedBodyContent = docxContainer.querySelector(\"article\")?.innerHTML || \"\";\r\n\r\n          // âœ… Ensure we use the most structured version\r\n          formattedHtml = extractedBodyContent.includes(formattedHtml)\r\n            ? extractedBodyContent\r\n            : extractedBodyContent || formattedHtml;\r\n\r\n          // âœ… Remove `docx-preview` elements BEFORE storing content\r\n          const tempContainer = document.createElement(\"div\");\r\n          tempContainer.innerHTML = formattedHtml;\r\n          tempContainer.querySelectorAll(\"section.docx, .docx-wrapper\").forEach((el) => el.remove());\r\n          formattedHtml = tempContainer.innerHTML.trim();\r\n\r\n          // âœ… Ensure proper table & list styling\r\n          formattedHtml = formattedHtml\r\n            .replace(/<table/g, '<table style=\"border-collapse: collapse; width: 100%; border: 1px solid black;\"') \r\n            .replace(/<td/g, '<td style=\"padding: 8px; border: 1px solid black;\"') \r\n            .replace(/<ul/g, '<ul style=\"padding-left: 20px; list-style-type: disc; margin-top: 10px; margin-bottom: 10px;\"') \r\n            .replace(/<ol/g, '<ol style=\"padding-left: 20px; list-style-type: decimal; margin-top: 10px; margin-bottom: 10px;\"') \r\n            .replace(/<li/g, '<li style=\"margin-bottom: 5px;\"'); // âœ… Ensure list items have proper spacing\r\n\r\n          // âœ… Remove incorrect `<li>` wrapping on normal text\r\n          formattedHtml = formattedHtml.replace(/<li><strong>/g, \"<p><strong>\").replace(/<\\/strong><\\/li>/g, \"</strong></p>\");\r\n\r\n          // âœ… Extract images & convert to Base64\r\n          const extractedImages = await Promise.all(\r\n            Array.from(docxContainer.querySelectorAll(\"img\")).map(async (img) => {\r\n              const base64Image = await convertImageToBase64(img.src);\r\n              return { src: base64Image, alt: img.alt || \"Uploaded image\" };\r\n            })\r\n          );\r\n\r\n          // âœ… Store only cleaned & formatted content without `docx-preview`\r\n          setUploadedText(formattedHtml.trim());\r\n          setUploadedImages(extractedImages);\r\n          autoSaveToDatabase(formattedHtml.trim(), extractedImages);\r\n\r\n          // âœ… Remove `docx-preview` from the DOM after processing\r\n          document.querySelectorAll(\"section.docx, .docx-wrapper\").forEach((el) => el.remove());\r\n        } catch (error) {\r\n          console.error(\"Error processing .docx:\", error);\r\n        }\r\n      }\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  } else if (file.type.startsWith(\"image/\")) {\r\n    reader.onload = (e) => {\r\n      if (e.target?.result) {\r\n        const base64Image = e.target.result.toString();\r\n        const newImage = { src: base64Image, alt: \"Uploaded image\" };\r\n\r\n        setUploadedImages((prevImages) => [...prevImages, newImage]);\r\n        autoSaveToDatabase(uploadedText, [...uploadedImages, newImage]);\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  } else {\r\n    alert(\"Invalid file type. Please upload a .txt, .docx, or an image file.\");\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/* âœ… Function to Start Editing */\r\nconst startEditing = () => {\r\n  if (!selectedProfile) return;\r\n  \r\n  setTempDescription(profileData[selectedProfile]?.description || \"\");\r\n  setIsEditing(true);\r\n\r\n  if (editor) {\r\n      editor.commands.setContent(profileData[selectedProfile]?.description || \"\");\r\n  }\r\n};\r\n\r\n\r\n/* âœ… Function to Save Edited Description */\r\nconst saveEditedDescription = async () => {\r\n  if (!selectedProfile) return;\r\n\r\n  const formattedText = editor?.getHTML() || \"\";\r\n\r\n  try {\r\n    await fetch(`${API_URL}/${selectedProfile}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        description: formattedText,\r\n        images: uploadedImages, // âœ… Save updated images\r\n        uploadedFileName: profileData[selectedProfile]?.uploadedFileName || \"\",\r\n      }),\r\n    });\r\n\r\n    // âœ… Update profileData to reflect saved changes\r\n    setProfileData((prevData) => ({\r\n      ...prevData,\r\n      [selectedProfile]: {\r\n        description: formattedText,\r\n        images: uploadedImages, // âœ… Store updated images in state\r\n        uploadedFileName: profileData[selectedProfile]?.uploadedFileName || \"\",\r\n      },\r\n    }));\r\n\r\n    setIsEditing(false);\r\n  } catch (error) {\r\n    console.error(\"Error saving description:\", error);\r\n  }\r\n};\r\n\r\n\r\n\r\nconst removeImage = (index: number) => {\r\n  if (!selectedProfile || !isEditing) return; // âœ… Ensure we're in edit mode\r\n\r\n  setProfileData((prevData) => {\r\n    const updatedImages = (prevData[selectedProfile]?.images || []).filter((_, i) => i !== index);\r\n\r\n    return {\r\n      ...prevData,\r\n      [selectedProfile]: {\r\n        ...prevData[selectedProfile],\r\n        images: updatedImages,\r\n      },\r\n    };\r\n  });\r\n\r\n  // âœ… Temporarily update images during editing\r\n  setUploadedImages((prevImages) => prevImages.filter((_, i) => i !== index));\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* âœ… Sanitize Extracted HTML */\r\n/* âœ… Sanitize Extracted HTML */\r\nconst sanitizeHTML = (html: string): string => {\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(html, \"text/html\");\r\n\r\n  // âœ… Ensure lists (`<ul>`, `<ol>`, `<li>`) are preserved\r\n  doc.querySelectorAll(\"p:empty, div:empty\").forEach((node) => node.remove());\r\n  doc.querySelectorAll(\"br\").forEach((node) => node.remove());\r\n\r\n  // âœ… Log extracted HTML to verify if lists exist before rendering\r\n  console.log(\"Sanitized HTML Output:\", doc.body.innerHTML);\r\n\r\n  return doc.body.innerHTML;\r\n};\r\n\r\n\r\n/* Save to File */\r\nconst saveToFile = (format = \"txt\") => {\r\n  if (!uploadedText) {\r\n    alert(\"No content to save.\");\r\n    return;\r\n  }\r\n\r\n  if (!selectedProfile) {\r\n    alert(\"No profile selected.\");\r\n    return;\r\n  }\r\n\r\n  const sanitizedProfileName = selectedProfile.replace(/[^a-zA-Z0-9_-]/g, \"\");\r\n  const readableText = convertHtmlToPlainText(uploadedText); // âœ… Convert HTML to plain text\r\n\r\n  if (format === \"txt\") {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([readableText], { type: \"text/plain\" }); // âœ… Save as plain text\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = `${sanitizedProfileName}_Specifications.txt`;\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  } else if (format === \"docx\") {\r\n    const doc = new Document({\r\n      sections: [\r\n        {\r\n          properties: {},\r\n          children: readableText.split(\"\\n\").map(line => new Paragraph(line)), // âœ… Split into paragraphs\r\n        },\r\n      ],\r\n    });\r\n\r\n    Packer.toBlob(doc).then((blob) => {\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = `${sanitizedProfileName}_Specifications.docx`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    });\r\n  }\r\n};\r\n\r\nconst cancelEditing = () => {\r\n  setIsEditing(false);\r\n};\r\n\r\nconst autoSaveToDatabase = async (text: string, images: { src: string; alt: string }[]) => {\r\n  if (!selectedProfile) {\r\n    alert(\"No profile selected.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(`${API_URL}/${selectedProfile}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        description: text,\r\n        images: images.map(img => img.src), // âœ… Ensure only the src is saved\r\n        uploadedFileName: profileData[selectedProfile]?.uploadedFileName || \"\",\r\n      }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log(\"Profile updated automatically.\");\r\n    } else {\r\n      console.error(\"Error saving profile.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving profile:\", error);\r\n  }\r\n};\r\n\r\n\r\nconst convertHtmlToPlainText = (html: string): string => {\r\n  const doc = new DOMParser().parseFromString(html, \"text/html\");\r\n  return doc.body.textContent || \"\";\r\n};\r\n\r\nconst editor = useEditor({\r\n  extensions: [\r\n    StarterKit.configure({\r\n      bulletList: false, // âœ… Disable default list handling\r\n      orderedList: false,\r\n    }),\r\n    Table.configure({\r\n      resizable: true,\r\n    }),\r\n    TableRow,\r\n    TableCell,\r\n    TableHeader,\r\n    BulletList, // âœ… Enable bullet points\r\n    OrderedList, // âœ… Enable numbered lists\r\n    ListItem,    // âœ… Enable list items\r\n  ],\r\n  content: uploadedText, // Initialize with the uploaded content\r\n  onUpdate: ({ editor }) => setTempDescription(editor.getHTML()), // Update state with editor changes\r\n  editorProps: {\r\n    attributes: {\r\n      class: \"prose focus:outline-none\",\r\n    },\r\n  },\r\n  immediatelyRender: false, // Fix SSR Hydration Mismatch\r\n});\r\n\r\n\r\n// Reset editor content when uploadedText changes\r\nuseEffect(() => {\r\n  if (editor && uploadedText) {\r\n    editor.commands.setContent(uploadedText); // Dynamically update editor content\r\n  }\r\n}, [uploadedText, editor]);\r\n\r\nconst handleProfileSelect = (profileName: string) => {\r\n  if (!profileName) return; // Prevent errors\r\n\r\n  setSelectedProfile(profileName);\r\n  setShowAbout(false); // Close About Section when switching profiles\r\n\r\n  // Ensure images are correctly set and do not become undefined\r\n  const profile = profileData[profileName] || { description: \"\", images: [], uploadedFileName: \"\" };\r\n\r\n  setUploadedImages(profile.images.length ? profile.images : []); // âœ… Ensure images exist\r\n  setUploadedText(profile.description);\r\n};\r\n\r\nconst toggleCheckout = () => {\r\n  if (!selectedProfile) return;\r\n  setShowCheckout(!showCheckout);\r\n};\r\n\r\nconst toggleEditMode = () => {\r\n  setIsEditing(!isEditing);\r\n};\r\n\r\nreturn (\r\n  <div className={styles.mainScreen}>\r\n    {!isSidebarOpen && (\r\n      <button\r\n        className={styles.retractExpandSidebarButton}\r\n        onClick={toggleSidebar}\r\n      >\r\n        <FaBars />\r\n      </button>\r\n    )}\r\n\r\n    <div className={`${styles.sidebar} ${isSidebarOpen ? \"\" : styles.hidden}`}>\r\n      <div className={styles.sidebarHeader}>\r\n        <span>Menu</span>\r\n        <button className={styles.toggleButton} onClick={toggleSidebar}>\r\n          â˜°\r\n        </button>\r\n      </div>\r\n      <ul className={styles.menu}>\r\n        <li className={styles.menuItem} onClick={() => setSelectedProfile(null)}>\r\n          Home\r\n        </li>\r\n        <li className={styles.menuItem} onClick={() => setShowToTestList(true)}>\r\n          Tests to Conduct\r\n        </li>\r\n        <li className={styles.menuItem}>\r\n          <div className={styles.profileContainer}>\r\n            <button\r\n              className={styles.profilesButton}\r\n              onClick={toggleProfileDropdown}\r\n            >\r\n              Profiles\r\n            </button>\r\n            <div className={styles.profileButtonGroup}>\r\n              <button\r\n                className={styles.dropdownButton}\r\n                onClick={toggleProfileDropdown}\r\n              >\r\n                {isProfileDropdownOpen ? \"â–²\" : \"â–¼\"}\r\n              </button>\r\n              <button\r\n                className={styles.addProfileButton}\r\n                onClick={addProfile}\r\n              >\r\n                <FaPlus />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </li>\r\n        {isProfileDropdownOpen && (\r\n          <ul className={styles.profileDropdown}>\r\n            {profiles.map((profile) => (\r\n              <li\r\n                key={profile.id || profile.name} // âœ… Ensure unique key\r\n                className={styles.profileSidebarItem}\r\n                onClick={() => handleProfileSelect(profile.name)}\r\n              >\r\n                {profile.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </ul>\r\n      <div className={styles.settingsContainer}>\r\n        <button className={styles.settingsButton}>\r\n          <FaCog />\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    {showToTestList && <ToTestList onClose={() => setShowToTestList(false)} />}\r\n\r\n    <div className={styles.content}>\r\n      {selectedProfile ? (\r\n        <div className={styles.profilePage}>\r\n          <div className={styles.profileHeading}>\r\n            <h1>{selectedProfile}</h1>\r\n            <button\r\n              className={styles.deleteButton}\r\n              onClick={() => deleteProfile(selectedProfile)}\r\n            >\r\n              <FaTrash />\r\n            </button>\r\n          </div>\r\n\r\n          {/* âœ… About/Specifications Button Below Profile Name */}\r\n          <button className={styles.aboutButton} onClick={toggleAbout}>\r\n            <FaInfoCircle /> About/Specifications\r\n          </button>\r\n\r\n          {/* âœ… Show/Hide About Section */}\r\n          {showAbout && (\r\n            <div\r\n              className={`${styles.aboutSection} ${\r\n                document.documentElement.classList.contains(\"dark\")\r\n                  ? styles.darkMode\r\n                  : \"\"\r\n              }`}\r\n            >\r\n              {/* âœ… Editing Mode: Use Tiptap Rich Text Editor */}\r\n              {isEditing ? (\r\n                <>\r\n                  {/* âœ… Add Toolbar for Lists */}\r\n                  <div className=\"toolbar\">\r\n                    <button onClick={() => editor?.chain().focus().toggleBulletList().run()}>\r\n                      Bullet List\r\n                    </button>\r\n                    <button onClick={() => editor?.chain().focus().toggleOrderedList().run()}>\r\n                      Ordered List\r\n                    </button>\r\n                  </div>\r\n\r\n                  <EditorContent editor={editor} className={styles.richTextEditor} />\r\n\r\n                  {/* âœ… Show all images outside the editor */}\r\n                  {uploadedImages.length > 0 ? (\r\n                    <div className={styles.imageContainer}>\r\n                      {uploadedImages.map((image, index) => (\r\n                        <div key={index} className={styles.imageWrapper}>\r\n                          <img\r\n                            src={image.src}\r\n                            alt={image.alt}\r\n                            className={styles.uploadedImage}\r\n                          />\r\n                          {/* âœ… Remove button only renders in editing mode */}\r\n                          <button\r\n                            className={styles.removeImageButton}\r\n                            onClick={() => removeImage(index)}\r\n                          >\r\n                            âœ–\r\n                          </button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className={styles.imagePlaceholder}>No images uploaded</p>\r\n                  )}\r\n\r\n                  {/* âœ… File Upload Section (Only in Editing Mode) */}\r\n                  <div className={styles.uploadContainer}>\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\".txt, .docx\"\r\n                      onChange={handleFileUpload}\r\n                      className={styles.uploadInput}\r\n                    />\r\n                    {/* âœ… Show file name specific to the selected profile */}\r\n                    {selectedProfile &&\r\n                      profileData[selectedProfile]?.uploadedFileName && (\r\n                        <p>Uploaded: {profileData[selectedProfile].uploadedFileName}</p>\r\n                      )}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                /* âœ… Normal Mode: Display Formatted Content */\r\n                <>\r\n                  <div\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: sanitizeHTML(profileData[selectedProfile]?.description || \"<p>No description available.</p>\"),\r\n                      }}\r\n                  />\r\n                  {/* âœ… Show all images outside the editor */}\r\n                  {profileData[selectedProfile]?.images.length > 0 && (\r\n                    <div className={styles.imageContainer}>\r\n                      {profileData[selectedProfile].images.map((image, index) => (\r\n                        <div key={index} className={styles.imageWrapper}>\r\n                          <img \r\n                             src={image.src} \r\n                             alt={image.alt} \r\n                             className={styles.uploadedImage}\r\n                             onError={(e) => e.currentTarget.src = \"/fallback-image.png\"} // Provide a fallback image\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n\r\n                {/* âœ… Save, Edit, and Download Buttons */}\r\n                <div className={styles.actionButtons}>\r\n                  {!isEditing && (\r\n                    <>\r\n                      <button\r\n                        onClick={() => saveToFile(\"txt\")}\r\n                        className={styles.downloadButton}\r\n                      >\r\n                        <FaDownload /> Save as .TXT\r\n                      </button>\r\n                      <button\r\n                        onClick={() => saveToFile(\"docx\")}\r\n                        className={styles.downloadButton}\r\n                      >\r\n                        <FaDownload /> Save as .DOCX\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                  {isEditing ? (\r\n                    <>\r\n                      <button\r\n                        onClick={saveEditedDescription}\r\n                        className={styles.saveButton}\r\n                      >\r\n                        <FaCheck /> Save\r\n                      </button>\r\n                      <button\r\n                        onClick={cancelEditing}\r\n                        className={styles.cancelButton}\r\n                      >\r\n                        <FaTimes /> Cancel\r\n                      </button>\r\n                    </>\r\n                  ) : (\r\n                    <button className={styles.editButton} onClick={startEditing}>\r\n                      <FaEdit />\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n              {/* âœ… Test Type & Checkout Button Located Outside About Section */}\r\n              <h2 className={styles.testTypeHeader}>Test Type</h2>\r\n              <button className={styles.checkoutButton} onClick={toggleCheckout}>\r\n                <FaWrench /> Checkout\r\n              </button>\r\n              {showCheckout && (\r\n              <div className={styles.checkoutSection}>\r\n                <div className={styles.checkoutHeader} style={{ display: 'flex', alignItems: 'center' }}>\r\n                  <h3 style={{ marginRight: '10px' }}>Test Selection:</h3>\r\n                  <button className={styles.editButton} onClick={toggleEditMode}>\r\n                    <FaEdit />\r\n                  </button>\r\n                </div>\r\n                {isEditing ? (\r\n                  <div className={styles.editModeContainer}>\r\n                    <div className={styles.editModeList}>\r\n                      {/* Future Scrollable Drag-and-Drop List Goes Here */}\r\n                    </div>\r\n                    <div className={styles.editModeButtons} style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px', marginTop: '10px' }}>\r\n                      <button className={styles.saveButton} onClick={toggleEditMode}>\r\n                        <FaCheck /> Save\r\n                      </button>\r\n                      <button className={styles.cancelButton} onClick={toggleEditMode}>\r\n                        <FaTimes /> Cancel\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    {/* Dragged Items Will Appear Here */}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className={styles.profilePage}>\r\n            <h1 className={styles.profileHeading}>Satellite Automated Testing System</h1>\r\n            <p className={styles.profileSubtext}>Navigate using the side panel</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default MainScreen;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2071, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/app/page.tsx"],"sourcesContent":["/* implement routing using react-router-dom, \nyouâ€™ll need to transform your page.tsx into an entry point for routing. */\n\n/* npm install react-router-dom */\n\n\"use client\";\n\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport WelcomeWindow from \"../components/WelcomeWindow/WelcomeWindow\";\nimport MainScreen from \"../components/MainScreen/MainScreen\";\n\nexport default function Page() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<WelcomeWindow />} />\n        <Route path=\"/main\" element={<MainScreen />} />\n      </Routes>\n    </Router>\n  );\n}\n"],"names":[],"mappings":"AAAA;wEACwE,GAExE,gCAAgC;;;;AAMhC;AACA;AAFA;AAHA;;;;;AAOe,SAAS;IACtB,qBACE,6LAAC,+KAAA,CAAA,gBAAM;kBACL,cAAA,6LAAC,+KAAA,CAAA,SAAM;;8BACL,6LAAC,+KAAA,CAAA,QAAK;oBAAC,MAAK;oBAAI,uBAAS,6LAAC,uJAAA,CAAA,UAAa;;;;;;;;;;8BACvC,6LAAC,+KAAA,CAAA,QAAK;oBAAC,MAAK;oBAAQ,uBAAS,6LAAC,iJAAA,CAAA,UAAU;;;;;;;;;;;;;;;;;;;;;AAIhD;KATwB"}},
    {"offset": {"line": 2130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}