{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/utils/themeEvents.ts"],"sourcesContent":["// src/utils/themeEvents.ts\r\n// Custom event system for theme changes\r\n\r\n/**\r\n * Event types for theme changes\r\n */\r\nexport const THEME_EVENTS = {\r\n    THEME_CHANGED: 'theme-changed',\r\n    SETTINGS_UPDATED: 'theme-settings-updated'\r\n  };\r\n  \r\n  /**\r\n   * Dispatch a theme change event\r\n   * @param isDarkMode Whether dark mode is active\r\n   */\r\n  export function dispatchThemeChangedEvent(isDarkMode: boolean): void {\r\n    const event = new CustomEvent(THEME_EVENTS.THEME_CHANGED, {\r\n      detail: { isDarkMode }\r\n    });\r\n    \r\n    window.dispatchEvent(event);\r\n    console.log(`Theme changed event dispatched: isDarkMode=${isDarkMode}`);\r\n  }\r\n  \r\n  /**\r\n   * Dispatch an event when theme settings are updated\r\n   * @param settings The updated settings\r\n   */\r\n  export function dispatchSettingsUpdatedEvent(settings: any): void {\r\n    const event = new CustomEvent(THEME_EVENTS.SETTINGS_UPDATED, {\r\n      detail: { settings }\r\n    });\r\n    \r\n    window.dispatchEvent(event);\r\n    console.log('Theme settings updated event dispatched');\r\n  }\r\n  \r\n  /**\r\n   * Listen for theme change events\r\n   * @param callback Function to call when theme changes\r\n   * @returns A function to remove the listener\r\n   */\r\n  export function onThemeChanged(callback: (isDarkMode: boolean) => void): () => void {\r\n    const handler = (event: Event) => {\r\n      const customEvent = event as CustomEvent;\r\n      callback(customEvent.detail.isDarkMode);\r\n    };\r\n    \r\n    window.addEventListener(THEME_EVENTS.THEME_CHANGED, handler);\r\n    \r\n    // Return a cleanup function\r\n    return () => {\r\n      window.removeEventListener(THEME_EVENTS.THEME_CHANGED, handler);\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Listen for theme settings update events\r\n   * @param callback Function to call when settings are updated\r\n   * @returns A function to remove the listener\r\n   */\r\n  export function onSettingsUpdated(callback: (settings: any) => void): () => void {\r\n    const handler = (event: Event) => {\r\n      const customEvent = event as CustomEvent;\r\n      callback(customEvent.detail.settings);\r\n    };\r\n    \r\n    window.addEventListener(THEME_EVENTS.SETTINGS_UPDATED, handler);\r\n    \r\n    // Return a cleanup function\r\n    return () => {\r\n      window.removeEventListener(THEME_EVENTS.SETTINGS_UPDATED, handler);\r\n    };\r\n  }"],"names":[],"mappings":"AAAA,2BAA2B;AAC3B,wCAAwC;AAExC;;CAEC;;;;;;;AACM,MAAM,eAAe;IACxB,eAAe;IACf,kBAAkB;AACpB;AAMO,SAAS,0BAA0B,UAAmB;IAC3D,MAAM,QAAQ,IAAI,YAAY,aAAa,aAAa,EAAE;QACxD,QAAQ;YAAE;QAAW;IACvB;IAEA,OAAO,aAAa,CAAC;IACrB,QAAQ,GAAG,CAAC,CAAC,2CAA2C,EAAE,YAAY;AACxE;AAMO,SAAS,6BAA6B,QAAa;IACxD,MAAM,QAAQ,IAAI,YAAY,aAAa,gBAAgB,EAAE;QAC3D,QAAQ;YAAE;QAAS;IACrB;IAEA,OAAO,aAAa,CAAC;IACrB,QAAQ,GAAG,CAAC;AACd;AAOO,SAAS,eAAe,QAAuC;IACpE,MAAM,UAAU,CAAC;QACf,MAAM,cAAc;QACpB,SAAS,YAAY,MAAM,CAAC,UAAU;IACxC;IAEA,OAAO,gBAAgB,CAAC,aAAa,aAAa,EAAE;IAEpD,4BAA4B;IAC5B,OAAO;QACL,OAAO,mBAAmB,CAAC,aAAa,aAAa,EAAE;IACzD;AACF;AAOO,SAAS,kBAAkB,QAAiC;IACjE,MAAM,UAAU,CAAC;QACf,MAAM,cAAc;QACpB,SAAS,YAAY,MAAM,CAAC,QAAQ;IACtC;IAEA,OAAO,gBAAgB,CAAC,aAAa,gBAAgB,EAAE;IAEvD,4BAA4B;IAC5B,OAAO;QACL,OAAO,mBAAmB,CAAC,aAAa,gBAAgB,EAAE;IAC5D;AACF","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/utils/themeInitializer.js"],"sourcesContent":["// themeInitializer.js - with improved theme switching and event dispatching\r\n// script to initialize themes from the database\r\n\r\n// Import theme event functions\r\nimport { dispatchSettingsUpdatedEvent, dispatchThemeChangedEvent } from './themeEvents';\r\n\r\n// API URL from environment or default\r\nconst API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n\r\n// Cache for theme settings to avoid unnecessary fetches\r\nlet cachedSettings = null;\r\nlet lastFetchTime = 0;\r\nconst CACHE_TTL = 2000; // Cache time-to-live in milliseconds (2 seconds)\r\n\r\n/**\r\n * Initialize theme backgrounds from the database settings\r\n * This should be called when the application starts\r\n */\r\nexport async function initializeThemeBackgrounds() {\r\n  try {\r\n    // Fetch settings from the backend\r\n    const settings = await fetchThemeSettings();\r\n    console.log('Loaded theme settings:', settings);\r\n    \r\n    // Get current theme mode\r\n    const isDarkMode = document.documentElement.classList.contains('dark');\r\n    \r\n    // Apply background settings based on theme\r\n    applyBackgroundSettings(settings, isDarkMode);\r\n    \r\n    // Apply font settings if available\r\n    if (settings.font) {\r\n      applyFontSettings(settings.font);\r\n    }\r\n    \r\n    // Set up observer for theme changes to update background\r\n    observeThemeChanges(settings);\r\n    \r\n    // Dispatch event that settings were initialized\r\n    dispatchSettingsUpdatedEvent(settings);\r\n    \r\n  } catch (error) {\r\n    console.error('Error initializing theme backgrounds:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch theme settings from the server with caching\r\n */\r\nexport async function fetchThemeSettings(forceRefresh = false) {\r\n  const currentTime = Date.now();\r\n  \r\n  // Use cached settings if they exist and aren't expired, unless force refresh is requested\r\n  if (!forceRefresh && cachedSettings && (currentTime - lastFetchTime < CACHE_TTL)) {\r\n    console.log('Using cached theme settings');\r\n    return cachedSettings;\r\n  }\r\n  \r\n  try {\r\n    console.log('Fetching fresh theme settings from server');\r\n    const response = await fetch(`${API_URL}/settings`);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch theme settings: ${response.status}`);\r\n    }\r\n    \r\n    const settings = await response.json();\r\n    \r\n    // Update the cache\r\n    cachedSettings = settings;\r\n    lastFetchTime = currentTime;\r\n    \r\n    return settings;\r\n  } catch (error) {\r\n    console.error('Error fetching theme settings:', error);\r\n    \r\n    // If we have cached settings, use them as fallback\r\n    if (cachedSettings) {\r\n      console.warn('Using cached settings as fallback after fetch error');\r\n      return cachedSettings;\r\n    }\r\n    \r\n    // Otherwise, return default settings\r\n    return {\r\n      background: \"/assets/curve_background.png\",\r\n      background_light: \"/assets/lightcurve_background.png\",\r\n      backgroundColor: \"#000000\",\r\n      backgroundColorLight: \"#ffffff\",\r\n      font: \"Arial, sans-serif\"\r\n    };\r\n  }\r\n}\r\n\r\n// function to handle font application\r\nfunction applyFontSettings(fontFamily) {\r\n  if (!fontFamily) return;\r\n  \r\n  console.log(`Applying font family: ${fontFamily}`);\r\n  \r\n  // Set CSS custom property for font\r\n  document.documentElement.style.setProperty('--app-font-family', fontFamily);\r\n  \r\n  // Create or update the font style element\r\n  let fontStyle = document.getElementById('app-font-style');\r\n  if (!fontStyle) {\r\n    fontStyle = document.createElement('style');\r\n    fontStyle.id = 'app-font-style';\r\n    document.head.appendChild(fontStyle);\r\n  }\r\n  \r\n  // Apply the font to all relevant elements with higher specificity\r\n  fontStyle.textContent = `\r\n    html body, \r\n    html button, \r\n    html input, \r\n    html select, \r\n    html textarea,\r\n    html .popup, \r\n    html .welcomeWindow,\r\n    html .mainScreen,\r\n    html .sidebar,\r\n    html .sidebar *,\r\n    html .menu,\r\n    html .menu *,\r\n    html .menuItem,\r\n    html .profilesButton,\r\n    html .profileContainer,\r\n    html .profileSidebarItem,\r\n    html .profileButtonGroup,\r\n    html .settingsContainer,\r\n    html .content,\r\n    html .aboutSection,\r\n    html .checkoutSection,\r\n    html .settingsWindow,\r\n    html .topSection,\r\n    html .bottomSection,\r\n    html * {\r\n      font-family: ${fontFamily} !important;\r\n    }\r\n  `;\r\n}\r\n\r\n/**\r\n * Apply background settings based on current theme mode\r\n * @param {Object} settings - The settings object from the server\r\n * @param {boolean} isDarkMode - Whether dark mode is active\r\n */\r\nexport function applyBackgroundSettings(settings, isDarkMode) {\r\n  // Determine which background to use based on current theme\r\n  const backgroundPath = isDarkMode \r\n    ? settings.background || \"/assets/curve_background.png\"\r\n    : settings.background_light || \"/assets/lightcurve_background.png\";\r\n    \r\n  // Determine background color for solid color mode\r\n  const backgroundColor = isDarkMode\r\n    ? settings.backgroundColor || \"#000000\"\r\n    : settings.backgroundColorLight || \"#ffffff\";\r\n  \r\n  // Apply background to body\r\n  if (backgroundPath === \"none\") {\r\n    // Solid color mode\r\n    document.body.style.backgroundImage = \"none\";\r\n    document.body.style.backgroundColor = backgroundColor;\r\n    \r\n    // Also update CSS variables\r\n    if (isDarkMode) {\r\n      document.documentElement.style.setProperty('--page-bg-image', 'none');\r\n      document.documentElement.style.setProperty('--page-bg-color', backgroundColor);\r\n    } else {\r\n      document.documentElement.style.setProperty('--page-bg-image', 'none');\r\n      document.documentElement.style.setProperty('--page-bg-color', backgroundColor);\r\n    }\r\n  } else {\r\n    // Image background mode\r\n    document.body.style.backgroundImage = `url(${backgroundPath})`;\r\n    document.body.style.backgroundSize = \"cover\";\r\n    document.body.style.backgroundPosition = \"center\";\r\n    document.body.style.backgroundRepeat = \"no-repeat\";\r\n    \r\n    // Also update CSS variables\r\n    if (isDarkMode) {\r\n      document.documentElement.style.setProperty('--page-bg-image', `url(${backgroundPath})`);\r\n    } else {\r\n      document.documentElement.style.setProperty('--page-bg-image', `url(${backgroundPath})`);\r\n    }\r\n  }\r\n  \r\n  console.log(`Applied ${isDarkMode ? 'dark' : 'light'} mode background: ${backgroundPath === \"none\" ? backgroundColor : backgroundPath}`);\r\n}\r\n\r\n/**\r\n * Observe theme changes to update background accordingly\r\n * This will fetch fresh settings every time the theme changes\r\n */\r\nfunction observeThemeChanges() {\r\n  // Create observer to watch for theme class changes\r\n  const observer = new MutationObserver(async mutations => {\r\n    for (const mutation of mutations) {\r\n      if (mutation.attributeName === 'class') {\r\n        // Check if dark mode was toggled\r\n        const isDarkMode = document.documentElement.classList.contains('dark');\r\n        console.log(`Theme changed to ${isDarkMode ? 'dark' : 'light'} mode - fetching latest settings`);\r\n        \r\n        // Dispatch theme changed event\r\n        dispatchThemeChangedEvent(isDarkMode);\r\n        \r\n        // Fetch fresh settings from the server and apply them\r\n        try {\r\n          const settings = await fetchThemeSettings(true); // Force refresh when theme changes\r\n          applyBackgroundSettings(settings, isDarkMode);\r\n          \r\n          // Dispatch event that settings were updated\r\n          dispatchSettingsUpdatedEvent(settings);\r\n        } catch (error) {\r\n          console.error('Error applying theme change:', error);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Start observing theme changes\r\n  observer.observe(document.documentElement, {\r\n    attributes: true,\r\n    attributeFilter: ['class']\r\n  });\r\n}\r\n\r\n// Public method to immediately refresh and apply theme settings\r\nexport async function refreshThemeSettings() {\r\n  try {\r\n    // Force a refresh of settings from the server\r\n    const settings = await fetchThemeSettings(true);\r\n    \r\n    // Apply based on current theme\r\n    const isDarkMode = document.documentElement.classList.contains('dark');\r\n    applyBackgroundSettings(settings, isDarkMode);\r\n    \r\n    if (settings.font) {\r\n      applyFontSettings(settings.font);\r\n    }\r\n    \r\n    // Dispatch events about the update\r\n    dispatchSettingsUpdatedEvent(settings);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error refreshing theme settings:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Call this function when the DOM is ready\r\nif (typeof document !== 'undefined') {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeThemeBackgrounds);\r\n  } else {\r\n    initializeThemeBackgrounds();\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/app/layout.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./globals.css\";\nimport { initializeThemeBackgrounds, refreshThemeSettings } from \"@/utils/themeInitializer\";\n\n/* LIGHT DARK MODE SLIDER TOGGLER - START */\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\n\n// Define TypeScript types for font handling\ntype FontName = 'Roboto' | 'Open Sans' | 'Montserrat' | 'Source Code Pro';\n\ninterface FontUrls {\n  [key: string]: string; // Add index signature for string keys\n}\n\n/* memory of user specified light/dark mode */\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedMode = localStorage.getItem(\"darkMode\");\n    if (savedMode) setDarkMode(savedMode === \"true\");\n\n    // Apply dark/light mode classes to <html> on component mount\n    const htmlElement = document.documentElement;\n    if (savedMode === \"true\") {\n      htmlElement.classList.add(\"dark\");\n      htmlElement.classList.remove(\"light\");\n    } else {\n      htmlElement.classList.add(\"light\");\n      htmlElement.classList.remove(\"dark\");\n    }\n    \n    // Initialize theme backgrounds from database settings\n    initializeThemeBackgrounds();\n    \n    // Load and apply previously saved font from localStorage\n    const loadSavedFont = async () => {\n      // Try to get font setting from backend\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\"}/settings`);\n        if (response.ok) {\n          const settings = await response.json();\n          if (settings.font) {\n            // Apply the font immediately\n            applyFontToDocument(settings.font);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading font settings:\", error);\n      }\n    };\n    \n    loadSavedFont();\n  }, []);\n\n  // Helper function to apply font - with proper type annotation\n  const applyFontToDocument = (fontFamily: string): void => {\n    if (!fontFamily) return;\n    \n    // Set CSS variable\n    document.documentElement.style.setProperty('--app-font-family', fontFamily);\n    \n    // Create or update style element\n    let fontStyle = document.getElementById('app-font-style');\n    if (!fontStyle) {\n      fontStyle = document.createElement('style');\n      fontStyle.id = 'app-font-style';\n      document.head.appendChild(fontStyle);\n    }\n    \n    // Set comprehensive CSS rules\n    fontStyle.textContent = `\n      html body,\n      html button,\n      html input,\n      html select,\n      html textarea,\n      html a,\n      html p,\n      html h1, html h2, html h3, html h4, html h5, html h6,\n      html span, html div,\n      html .sidebar,\n      html .sidebar *,\n      html .menu,\n      html .menu *,\n      html .menuItem,\n      html .profilesButton,\n      html .profileContainer,\n      html .profileSidebarItem,\n      html .profileButtonGroup,\n      html .settingsContainer,\n      html .popup,\n      html .welcomeWindow,\n      html .mainScreen,\n      html .content,\n      html .aboutSection,\n      html .checkoutSection,\n      html .settingsWindow,\n      html .topSection,\n      html .bottomSection,\n      html * {\n        font-family: ${fontFamily} !important;\n      }\n    `;\n    \n    // Load font file if needed (for non-system fonts)\n    const loadFontFile = (fontName: string): void => {\n      const fontUrls: FontUrls = {\n        'Roboto': 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap',\n        'Open Sans': 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap',\n        'Montserrat': 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap',\n        'Source Code Pro': 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap'\n      };\n      \n      // Find the font name from the value\n      const fontMatch = Object.entries(fontUrls).find(([_, value]) => \n        fontFamily.includes(value.split(',')[0])\n      );\n      \n      if (fontMatch) {\n        const [matchedFontName] = fontMatch;\n        // Type guard to ensure matchedFontName is a valid key\n        if (matchedFontName in fontUrls) {\n          const url = fontUrls[matchedFontName as keyof typeof fontUrls];\n          const link = document.createElement('link');\n          link.href = url;\n          link.rel = 'stylesheet';\n          document.head.appendChild(link);\n        }\n      }\n    };\n    \n    // Only load external fonts, not system fonts\n    if (!fontFamily.includes('Arial') && !fontFamily.includes('sans-serif')) {\n      loadFontFile(fontFamily);\n    }\n  };\n\n  // Add to layout.tsx with proper typing\n  const loadFonts = (): void => {\n    // Define valid font names as a type to ensure type safety\n    type FontName = 'Roboto' | 'Open Sans' | 'Montserrat' | 'Source Code Pro';\n    \n    const fontUrls: Record<FontName, string> = {\n      'Roboto': 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap',\n      'Open Sans': 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap',\n      'Montserrat': 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap',\n      'Source Code Pro': 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap'\n    };\n    \n    // Add each font link to the document head\n    Object.entries(fontUrls).forEach(([name, url]) => {\n      // Check if link already exists to prevent duplicates\n      const existingLink = document.querySelector(`link[href=\"${url}\"]`);\n      if (!existingLink) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = url;\n        document.head.appendChild(link);\n        console.log(`Loaded font: ${name}`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    // Your existing code...\n    \n    // Load fonts\n    loadFonts();\n  }, []);\n\n  const toggleDarkMode = async () => {\n    setDarkMode((prevMode) => {\n      const newMode = !prevMode;\n      localStorage.setItem(\"darkMode\", newMode.toString());\n\n      // Update <html> class dynamically\n      const htmlElement = document.documentElement;\n      if (newMode) {\n        htmlElement.classList.add(\"dark\");\n        htmlElement.classList.remove(\"light\");\n      } else {\n        htmlElement.classList.add(\"light\");\n        htmlElement.classList.remove(\"dark\");\n      }\n\n      // Refresh theme settings to ensure we apply the latest backgrounds\n      setTimeout(async () => {\n        await refreshThemeSettings();\n      }, 50);\n\n      return newMode;\n    });\n  };\n\n  return (\n    <html lang=\"en\" className={darkMode ? \"dark\" : \"light\"}>\n      <body>\n        <div className=\"toggleContainer\">\n          <label className=\"switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={toggleDarkMode} />\n            <span className=\"slider\">\n              <FontAwesomeIcon icon={faMoon} className=\"icon moon\" />\n              <FontAwesomeIcon icon={faSun} className=\"icon sun\" />\n            </span>\n          </label>\n        </div>\n        {children}\n      </body>\n    </html>\n  );\n}\n\n/* LIGHT DARK MODE SLIDER TOGGLER - END */"],"names":[],"mappings":"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","debugId":null}}]
}