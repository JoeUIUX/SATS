{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/UHFTestPanel.tsx"],"sourcesContent":["// File: src/components/CheckoutTestProgress/components/UHFTestPanel.tsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n// Import the UHF-specific functions\r\nimport { runUHFCheckout } from '@/services/checkout/uhfCheckout';\r\nimport { generateUHFReport } from '@/services/reports/uhfReport';\r\n\r\n// Import test history components\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface UHFTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Test history item interface definition with is_simulated field\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    telemetry?: {\r\n      boardTemperature?: string;\r\n      paTemperature?: string;\r\n      lastRssi?: string;\r\n    };\r\n    testedOptions?: string[];\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean;\r\n}\r\n\r\nexport const UHFTestPanel: React.FC<UHFTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('telemetry.boardTemperature');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  \r\n  // Map options to capabilities\r\n  const mapOptionsToCapabilities = () => {\r\n    // Default both to false\r\n    let shouldEnableTransmitter = false;\r\n    let shouldEnableReceiver = false;\r\n    \r\n    // Check for specific options and map them to capabilities\r\n    if (options.includes('Telemetry')) {\r\n      // Telemetry typically involves receiving data, so enable receiver\r\n      shouldEnableReceiver = true;\r\n    }\r\n    \r\n    if (options.includes('Ground Pass')) {\r\n      // Ground Pass typically involves both transmitting commands and receiving telemetry\r\n      shouldEnableTransmitter = true;\r\n      shouldEnableReceiver = true;\r\n    }\r\n    \r\n    // Add other mappings based on your specific test options\r\n    // For example:\r\n    if (options.includes('Uplink Test')) {\r\n      shouldEnableTransmitter = true;\r\n    }\r\n    \r\n    if (options.includes('Downlink Test')) {\r\n      shouldEnableReceiver = true;\r\n    }\r\n    \r\n    return { shouldEnableTransmitter, shouldEnableReceiver };\r\n  };\r\n  \r\n  // Get the capabilities based on selected options\r\n  const { shouldEnableTransmitter, shouldEnableReceiver } = mapOptionsToCapabilities();\r\n  \r\n  // Use these for conditional rendering and UI display\r\n  const enableTransmitter = shouldEnableTransmitter;\r\n  const enableReceiver = shouldEnableReceiver;\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n  \r\n  // Available metrics for visualization\r\n  const metricOptions = [\r\n    { label: 'Board Temperature', value: 'telemetry.boardTemperature' },\r\n    { label: 'PA Temperature', value: 'telemetry.paTemperature' },\r\n    { label: 'Last RSSI', value: 'telemetry.lastRssi' },\r\n    { label: 'Last RF Error', value: 'telemetry.lastRferr' },\r\n    { label: 'TX Count', value: 'telemetry.txCount' }\r\n  ];\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setDetectedSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  // Add function to fetch test history\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component UHF`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=UHF`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have telemetry data to be a legitimate test\r\n            const hasTelemetryData = item.results.telemetry && \r\n              (item.results.telemetry.boardTemperature || \r\n               item.results.telemetry.paTemperature || \r\n               item.results.telemetry.lastRssi);\r\n            \r\n            return hasTelemetryData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `uhf_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Add function to save test result to history\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform our standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                    (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"UHF\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: `TX ${enableTransmitter ? 'Enabled' : 'Disabled'}, RX ${enableReceiver ? 'Enabled' : 'Disabled'}`,\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `uhf_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"UHF\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting UHF Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common UHF parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for different UHF parameters\r\n              if (param.startsWith(\"OBC2_Uhf_\")) {\r\n                if (param.includes(\"Temperature\")) {\r\n                  return `${param}=${20 + Math.floor(Math.random() * 15)}`; // Temperature between 20-35\r\n                } else if (param.includes(\"Count\")) {\r\n                  return `${param}=${Math.floor(Math.random() * 1000)}`; // Count between 0-999\r\n                } else if (param.includes(\"Bytes\")) {\r\n                  return `${param}=${Math.floor(Math.random() * 10000)}`; // Bytes between 0-9999\r\n                } else if (param.includes(\"Rssi\")) {\r\n                  return `${param}=${-70 - Math.floor(Math.random() * 30)}`; // RSSI between -70 and -100\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`; // Generic value 0-99\r\n                }\r\n              } else if (param.startsWith(\"UHF_\")) {\r\n                if (param.includes(\"freq\")) {\r\n                  return `${param}=437500000`; // UHF frequency 437.5 MHz\r\n                } else if (param.includes(\"baud\")) {\r\n                  return `${param}=9600`; // 9600 bps\r\n                } else if (param.includes(\"temp\")) {\r\n                  return `${param}=40`; // Max temp 40 degrees\r\n                } else if (param.includes(\"time\")) {\r\n                  return `${param}=60`; // Time values 60 seconds\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 10)}`; // Generic setting 0-9\r\n                }\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n        setDetectedSimulation(true);\r\n      }\r\n      \r\n      // Run the UHF checkout test with progress updates\r\n      const results = await runUHFCheckout(sock, \r\n        { testTransmitter: enableTransmitter, testReceiver: enableReceiver }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Save result to history - determine simulation status\r\n      await saveTestResult(results, 'completed', isForceSimulation || detectedSimulation);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running UHF checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history - any error means simulation was likely used\r\n      if (results) {\r\n        await saveTestResult(results, 'error', true);\r\n      }\r\n      \r\n      // Notify parent of error\r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateUHFReport(results);\r\n      alert(`UHF report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Clean up simulated test results from the database\r\n   */\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Limit test history to a certain number of records\r\n   */\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'UHF'  // Limit only UHF records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Clear all test history for this profile and component\r\n   */\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n  \r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for UHF?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=UHF`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`uhf_real_history_${profileId}`);\r\n        localStorage.removeItem(`uhf_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Delete a single test history item\r\n   */\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n  \r\n  // Add these functions for multi-select mode\r\n  /**\r\n   * Toggle multi-select mode\r\n   */\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Toggle selection of a single history item\r\n   */\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Select all visible history items\r\n   */\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n  \r\n  /**\r\n   * Deselect all history items\r\n   */\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n  \r\n  /**\r\n   * Delete all selected items\r\n   */\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n  \r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n  \r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n  \r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n// Optionally add automatic cleanup on component mount\r\nuseEffect(() => {\r\n  if (profileId) {\r\n    // Automatically limit history to 30 records when the component mounts\r\n    limitTestHistory(30);\r\n  }\r\n}, [profileId]); // Only run when profileId changes\r\n\r\n// Function to format table data for UHF parameters\r\nconst createParameterRow = (label: string, value: string) => {\r\n  return (\r\n    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{label}</td>\r\n      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{value}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div className={styles.testPanel}>\r\n    {error && (\r\n      <Alert variant=\"destructive\">\r\n        <p>{error}</p>\r\n      </Alert>\r\n    )}\r\n    \r\n    <div className={styles.tabsContainer} style={{\r\n      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n      padding: '8px',\r\n      borderRadius: '8px',\r\n      marginBottom: '16px',\r\n    }}>\r\n      <button\r\n        onClick={() => setShowHistory(false)}\r\n        className={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\n        style={{\r\n          padding: '8px 16px',\r\n          borderRadius: '6px',\r\n          backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n          color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n          border: 'none',\r\n          fontWeight: 500,\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Current Test\r\n      </button>\r\n      <button\r\n        onClick={() => setShowHistory(true)}\r\n        className={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\n        style={{\r\n          padding: '8px 16px',\r\n          borderRadius: '6px',\r\n          backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n          color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n          border: 'none',\r\n          fontWeight: 500,\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Test History\r\n      </button>\r\n    </div>\r\n    \r\n    {/* Current Test Panel */}\r\n    {!showHistory ? (\r\n      <>\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                <path d=\"M7.879 6.464a1 1 0 01-1.414 1.414 3 3 0 000 4.243 1 1 0 11-1.414 1.414 5 5 0 010-7.07 1 1 0 011.414 0zm4.242 0a1 1 0 011.414 0 5 5 0 010 7.072 1 1 0 01-1.414-1.414 3 3 0 000-4.244 1 1 0 010-1.414z\" />\r\n              </svg>\r\n              UHF Test Status\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            <div className={styles.progressContainer}>\r\n              <div className={styles.progressLabel}>\r\n                <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                  {currentStep || 'Waiting to start test...'}\r\n                </span>\r\n                <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                  {progress}%\r\n                </span>\r\n              </div>\r\n              <div \r\n                className={styles.progressBar}\r\n                style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n              >\r\n                <div \r\n                  className={styles.progressBarFill}\r\n                  style={{ \r\n                    width: `${progress}%`,\r\n                    background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Display the testing options */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n              <h4 style={{ \r\n                fontSize: '14px', \r\n                marginBottom: '10px',\r\n                color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n              }}>\r\n                Selected Test Options:\r\n              </h4>\r\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                {options.map((option, index) => (\r\n                  <div key={index} style={{ \r\n                    padding: '6px 10px', \r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    borderRadius: '4px',\r\n                    fontSize: '13px',\r\n                    color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '6px'\r\n                  }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                      <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    {option}\r\n                  </div>\r\n                ))}\r\n                {options.length === 0 && (\r\n                  <div style={{ \r\n                    color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                    fontStyle: 'italic',\r\n                    fontSize: '13px'\r\n                  }}>\r\n                    No specific options selected. Running with defaults.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Connection Status */}\r\n            <div \r\n              className={styles.parameterBox}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div className={styles.parameterLabel}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n                </svg>\r\n                Connection Mode\r\n              </div>\r\n              <span className={`${styles.statusBadge} ${\r\n                isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n              }`}>\r\n                {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n              </span>\r\n            </div>\r\n            \r\n            <div \r\n              className={styles.parameterBox}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                marginTop: '10px'\r\n              }}\r\n            >\r\n              <div className={styles.parameterLabel}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                UHF Testing\r\n              </div>\r\n              <span style={{ display: 'flex', gap: '8px' }}>\r\n                <span className={`${styles.parameterValue} ${\r\n                  enableTransmitter ? styles.colorCompleted : styles.colorWaiting\r\n                }`}>\r\n                  TX: {enableTransmitter ? 'ENABLED' : 'DISABLED'}\r\n                </span>\r\n                <span className={`${styles.parameterValue} ${\r\n                  enableReceiver ? styles.colorCompleted : styles.colorWaiting\r\n                }`}>\r\n                  RX: {enableReceiver ? 'ENABLED' : 'DISABLED'}\r\n                </span>\r\n              </span>\r\n            </div>\r\n            \r\n            {/* Run/Re-run Test Button */}\r\n            <button \r\n              onClick={startTest} \r\n              className={styles.button}\r\n              disabled={isRunning}\r\n              style={{ \r\n                backgroundColor: isRunning ? '#9ca3af' :\r\n                  hasRunTest ? '#4f46e5' : '#10b981',\r\n                color: 'white',\r\n                marginTop: '20px'\r\n              }}\r\n            >\r\n              {isRunning ? (\r\n                <>\r\n                  <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  Running Test...\r\n                </>\r\n              ) : hasRunTest ? (\r\n                <>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Re-run Test\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Run Test\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Test Results (only shown if we have results) */}\r\n        {results && (\r\n          <div className=\"space-y-4 mt-4\">\r\n            {/* UHF Telemetry Card */}\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                    : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                  color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path d=\"M13 7H7v6h6V7z\" />\r\n                    <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  UHF Telemetry\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n                    width: '100%',\r\n                    borderCollapse: 'collapse',\r\n                    fontSize: '14px'\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    {/* Display all telemetry parameters */}\r\n                    {createParameterRow(\"Board Temperature\", `${results.telemetry.boardTemperature} °C`)}\r\n                    {createParameterRow(\"PA Temperature\", `${results.telemetry.paTemperature} °C`)}\r\n                    {createParameterRow(\"Last RSSI\", results.telemetry.lastRssi)}\r\n                    {createParameterRow(\"Last RF Error\", results.telemetry.lastRferr)}\r\n                    {createParameterRow(\"TX Count (Current)\", `${results.telemetry.txCount} packets`)}\r\n                    {createParameterRow(\"RX Count (Current)\", `${results.telemetry.rxCount} packets`)}\r\n                    {createParameterRow(\"TX Bytes (Current)\", `${results.telemetry.txBytes} bytes`)}\r\n                    {createParameterRow(\"RX Bytes (Current)\", `${results.telemetry.rxBytes} bytes`)}\r\n                    {createParameterRow(\"Active Configuration\", results.telemetry.activeConf)}\r\n                    {createParameterRow(\"Boot Count\", results.telemetry.bootCount)}\r\n                    {createParameterRow(\"Boot Cause\", results.telemetry.bootCause)}\r\n                    {createParameterRow(\"Last Contact\", results.telemetry.lastContact)}\r\n                    {createParameterRow(\"Background RSSI\", results.telemetry.bgndRssi)}\r\n                    {createParameterRow(\"TX Duty\", results.telemetry.txDuty)}\r\n                    {createParameterRow(\"Total TX Count\", `${results.telemetry.totalTxCount} packets`)}\r\n                    {createParameterRow(\"Total RX Count\", `${results.telemetry.totalRxCount} packets`)}\r\n                    {createParameterRow(\"Total TX Bytes\", `${results.telemetry.totalTxBytes} bytes`)}\r\n                    {createParameterRow(\"Total RX Bytes\", `${results.telemetry.totalRxBytes} bytes`)}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            {/* UHF System Configuration Card */}\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #1f2937, #374151)\" \r\n                    : \"linear-gradient(to right, #f3f4f6, #e5e7eb)\",\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"#374151\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  UHF System Configuration\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n                    width: '100%',\r\n                    borderCollapse: 'collapse',\r\n                    fontSize: '14px'\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    {/* Display all system parameters */}\r\n                    {createParameterRow(\"RSSI Indicator Offset\", results.system.rssiOffset)}\r\n                    {createParameterRow(\"Maximum Temperature\", `${results.system.maxTemp} °C`)}\r\n                    {createParameterRow(\"Background RSSI EMA\", results.system.bgndrssiEma)}\r\n                    {createParameterRow(\"CSP Node\", results.system.cspNode)}\r\n                    {createParameterRow(\"I2C Enabled\", results.system.i2cEn)}\r\n                    {createParameterRow(\"CAN Enabled\", results.system.canEn)}\r\n                    {createParameterRow(\"Push-to-talk Enabled\", results.system.extpptEn)}\r\n                    {createParameterRow(\"LED Enabled\", results.system.ledEn)}\r\n                    {createParameterRow(\"KISS USART\", results.system.kissUsart)}\r\n                    {createParameterRow(\"GOSH USART\", results.system.goshUsart)}\r\n                    {createParameterRow(\"I2C Address\", results.system.i2cAddr)}\r\n                    {createParameterRow(\"I2C Speed\", `${results.system.i2cKhz} kHz`)}\r\n                    {createParameterRow(\"CAN Speed\", `${results.system.canKhz} kHz`)}\r\n                    {createParameterRow(\"Reboot Timer\", `${results.system.rebootIn} seconds`)}\r\n                    {createParameterRow(\"TX Inhibit\", `${results.system.txInhibit} seconds`)}\r\n                    {createParameterRow(\"Log Store\", results.system.logStore)}\r\n                    {createParameterRow(\"TX Power Level\", results.system.txPwr)}\r\n                    {createParameterRow(\"Max TX Time\", `${results.system.maxTxTime} seconds`)}\r\n                    {createParameterRow(\"Max Idle Time\", `${results.system.maxIdleTime} seconds`)}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            {/* UHF Receiver Configuration Card */}\r\n            {enableReceiver && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #1e3a8a, #2563eb)\" \r\n                      : \"linear-gradient(to right, #dbeafe, #bfdbfe)\",\r\n                    color: isDarkMode ? \"#bfdbfe\" : \"#2563eb\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    UHF Receiver Configuration\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n                      width: '100%',\r\n                      borderCollapse: 'collapse',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n                      {/* Display all receiver parameters exactly as in uhfCheckout.ts */}\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_freq</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.frequency} Hz</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_baud</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.baudrate} bps</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_modindex</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.modindex}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_guard</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.guard} ms</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_pllrang</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.pllrang}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_mode</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.mode}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_hmac</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.cspHmac}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_rs</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.cspRs}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_crc</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.cspCrc}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_rand</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.cspRand}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_hmac_key_0</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.hmacKeys[0]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_hmac_key_1</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.hmacKeys[1]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_hmac_key_2</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.hmacKeys[2]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_csp_hmac_key_3</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.hmacKeys[3]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_ax25_call_0</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.ax25Call[0]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_ax25_call_1</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.ax25Call[1]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_ax25_call_2</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.ax25Call[2]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_bw</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.bandwidth} Hz</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_rx_afcrange</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.receiver.afcrange} Hz</td></tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* UHF Transmitter Configuration Card */}\r\n            {enableTransmitter && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #7c2d12, #c2410c)\" \r\n                      : \"linear-gradient(to right, #ffedd5, #fed7aa)\",\r\n                    color: isDarkMode ? \"#fed7aa\" : \"#c2410c\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm2 4a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm-3 8a2 2 0 012-2h4a2 2 0 012 2v.5a.5.5 0 01-.5.5h-7a.5.5 0 01-.5-.5V14z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    UHF Transmitter Configuration\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n                      width: '100%',\r\n                      borderCollapse: 'collapse',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n                      {/* Display all transmitter parameters exactly as in uhfCheckout.ts */}\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_freq</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.frequency} Hz</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_baud</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.baudrate} bps</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_modindex</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.modindex}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_guard</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.guard} ms</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_pllrang</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.pllrang}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_mode</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.mode}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_hmac</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.cspHmac}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_rs</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.cspRs}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_crc</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.cspCrc}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_rand</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.cspRand}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_hmac_key_0</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.hmacKeys[0]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_hmac_key_1</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.hmacKeys[1]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_hmac_key_2</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.hmacKeys[2]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_csp_hmac_key_3</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.hmacKeys[3]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_ax25_call_0</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.ax25Call[0]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_ax25_call_1</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.ax25Call[1]}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_ax25_call_2</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.ax25Call[2]}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_preamb</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.preamb}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_preamblen</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.preamblen} bytes</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_preambflags</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.preambflags}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_intfrm</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.intfrm}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_intfrmlen</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.intfrmlen} bytes</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_intfrmflags</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.intfrmflags}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_rssibusy</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.rssibusy}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_kup_delay</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.kupDelay}</td></tr>\r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_pa_level</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.paLevel}</td></tr>\r\n                      <tr><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>UHF_tx_ber</td><td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.transmitter.ber}</td></tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n              {/* Generate Report Button */}\r\n              <div>\r\n                <button \r\n                  onClick={generateReport}\r\n                  className={styles.reportButton}\r\n                  style={{\r\n                    backgroundColor: \"#10b981\",\r\n                    color: \"white\"\r\n                  }}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Generate Report\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        /* Test History Panel */\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              background: isDarkMode \r\n                ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              UHF Test History\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            {historyLoading ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n              }}>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                <p>Loading test history...</p>\r\n              </div>\r\n            ) : testHistory.length === 0 ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                fontStyle: 'italic'\r\n              }}>\r\n                <p>No test history available for this profile.</p>\r\n                <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                  Run a test to start building your history.\r\n                </p>\r\n                \r\n                {!profileId && (\r\n                  <div style={{\r\n                    marginTop: '16px',\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                    borderRadius: '6px',\r\n                    color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Visualization Controls */}\r\n                <div style={{ marginBottom: '16px' }}>\r\n                  <label style={{ \r\n                    display: 'block',\r\n                    marginBottom: '8px',\r\n                    color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                    fontWeight: 500\r\n                  }}>\r\n                    Select Metric:\r\n                  </label>\r\n                  <select\r\n                    value={selectedMetric}\r\n                    onChange={(e) => setSelectedMetric(e.target.value)}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '8px 12px',\r\n                      borderRadius: '6px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    {metricOptions.map(option => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Use TestHistoryChart component */}\r\n                <div style={{\r\n                  height: '300px',\r\n                  marginBottom: '20px',\r\n                  backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                  padding: '16px',\r\n                  borderRadius: '8px'\r\n                }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    {metricOptions.find(m => m.value === selectedMetric)?.label} Trend\r\n                  </h4>\r\n                  \r\n                  <TestHistoryChart\r\n                    data={testHistory}\r\n                    metricPath={selectedMetric}\r\n                    metricLabel={metricOptions.find(m => m.value === selectedMetric)?.label || ''}\r\n                    isDarkMode={isDarkMode}\r\n                  />\r\n                </div>\r\n\r\n                {/* Multi-select controls */}\r\n                <div style={{ \r\n                  marginTop: '20px', \r\n                  marginBottom: '12px', \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <div>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      marginBottom: '6px'\r\n                    }}>\r\n                      Test History Records\r\n                    </h4>\r\n                  </div>\r\n                  \r\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    {/* Toggle button for multi-select mode */}\r\n                    <button\r\n                      onClick={toggleMultiSelectMode}\r\n                      style={{\r\n                        backgroundColor: isMultiSelectMode \r\n                          ? (isDarkMode ? '#4f46e5' : '#6366f1') \r\n                          : (isDarkMode ? '#1f2937' : '#f3f4f6'),\r\n                        color: isMultiSelectMode \r\n                          ? 'white' \r\n                          : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        padding: '6px 12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 500,\r\n                        cursor: 'pointer',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {isMultiSelectMode ? 'Exit Selection Mode' : 'Select Items'}\r\n                    </button>\r\n                    \r\n                    {/* Only show these controls when in multi-select mode */}\r\n                    {isMultiSelectMode && (\r\n                      <>\r\n                        <button\r\n                          onClick={selectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Select All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deselectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Deselect All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deleteSelectedItems}\r\n                          disabled={selectedItems.length === 0}\r\n                          style={{\r\n                            backgroundColor: selectedItems.length === 0 \r\n                              ? (isDarkMode ? '#6b7280' : '#9ca3af') \r\n                              : (isDarkMode ? '#dc2626' : '#ef4444'),\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 12px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: selectedItems.length === 0 ? 'not-allowed' : 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                          }}\r\n                        >\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                            <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          Delete Selected ({selectedItems.length})\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Information panel before the table */}\r\n                <div style={{ marginBottom: '20px', padding: '12px', borderRadius: '8px', backgroundColor: isDarkMode ? '#1e293b' : '#f0f9ff', border: '1px solid', borderColor: isDarkMode ? '#475569' : '#bfdbfe' }}>\r\n                  <h4 style={{ marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#1e40af', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n                    </svg>\r\n                    Test History Information\r\n                  </h4>\r\n                  <p style={{ fontSize: '14px', color: isDarkMode ? '#cbd5e1' : '#334155' }}>\r\n                    This chart shows only <strong>real test data</strong> from actual hardware tests. \r\n                    Simulated test results are not included in this history or visualization.\r\n                  </p>\r\n                  {testHistory.length === 0 && (\r\n                    <p style={{ marginTop: '10px', fontSize: '14px', color: isDarkMode ? '#fb923c' : '#c2410c', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                      </svg>\r\n                      No real test data is available yet. Run tests in real mode (not simulation) to collect actual data.\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Use TestHistoryTable component */}\r\n                <TestHistoryTable\r\n                  testHistory={testHistory}\r\n                  isDarkMode={isDarkMode}\r\n                  onViewDetails={(item) => setSelectedHistoryItem(item)}\r\n                />\r\n\r\n                {/* Additional UHF Metrics Summary */}\r\n                <div style={{ marginTop: '20px' }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Key Metrics Summary\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                    gap: '12px'\r\n                  }}>\r\n                    {/* Metric Card: Average Board Temperature */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average Board Temperature\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.boardTemperature'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} °C`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Average PA Temperature */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average PA Temperature\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.paTemperature'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} °C`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Average RSSI */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average RSSI\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.lastRssi'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(1)}`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Test Success Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Overall Success Rate\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          if (testHistory.length === 0) return 'N/A';\r\n                          \r\n                          const successes = testHistory.filter(item => item.status === 'completed').length;\r\n                          const successRate = (successes / testHistory.length) * 100;\r\n                          \r\n                          return `${successRate.toFixed(0)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n  \r\n                {/* Export History Button */}\r\n                <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'flex-end', gap: '10px', flexWrap: 'wrap' }}>\r\n                  {/* Clear All History Button */}\r\n                  <button \r\n                    onClick={clearAllTestHistory}\r\n                    style={{\r\n                      backgroundColor: '#dc2626',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clear All History\r\n                  </button>\r\n                  \r\n                  {/* Clean Up Simulated Data Button */}\r\n                  <button \r\n                    onClick={() => cleanupSimulatedData()}\r\n                    style={{\r\n                      backgroundColor: '#ef4444',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clean Up Simulated Data\r\n                  </button>\r\n                  \r\n                  {/* Limit History Button */}\r\n                  <button \r\n                    onClick={() => limitTestHistory(30)}\r\n                    style={{\r\n                      backgroundColor: '#3b82f6',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Limit History (30 Records)\r\n                  </button>\r\n                  \r\n                  <button \r\n                    onClick={() => {\r\n                      // Implement history export functionality\r\n                      const historyData = JSON.stringify(testHistory, null, 2);\r\n                      const blob = new Blob([historyData], { type: 'application/json' });\r\n                      const url = URL.createObjectURL(blob);\r\n                      const a = document.createElement('a');\r\n                      a.href = url;\r\n                      a.download = `uhf_test_history_${profileId || 'unknown'}.json`;\r\n                      document.body.appendChild(a);\r\n                      a.click();\r\n                      document.body.removeChild(a);\r\n                      URL.revokeObjectURL(url);\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: '#10b981',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Export Test History\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Status Messages for Cleanup and Limit Operations */}\r\n                {(cleanupMessage || limitMessage) && (\r\n                  <div style={{ \r\n                    marginTop: '12px',\r\n                    padding: '12px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    {cleanupMessage && (\r\n                      <div style={{ \r\n                        color: cleanupMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c'),\r\n                        marginBottom: limitMessage ? '8px' : '0'\r\n                      }}>\r\n                        {cleanupMessage}\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {limitMessage && (\r\n                      <div style={{ \r\n                        color: limitMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c')\r\n                      }}>\r\n                        {limitMessage}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Test Details Modal */}\r\n      {selectedHistoryItem && (\r\n        <TestDetailsModal\r\n          test={selectedHistoryItem}\r\n          onClose={() => setSelectedHistoryItem(null)}\r\n          isDarkMode={isDarkMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}