{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/utils/mccUtils.ts"],"sourcesContent":["// src/utils/mccUtils.ts\r\n// TypeScript implementation that supports both real and simulated modes\r\n\r\n// Define environment configuration\r\nconst MCC_CONFIG = {\r\n  // Use environment variables or a default\r\n  SIMULATION_MODE: process.env.REACT_APP_MCC_SIMULATION === 'true' \r\n                  || process.env.NODE_ENV === 'development',\r\n  LOG_LEVEL: process.env.REACT_APP_MCC_LOG_LEVEL || 'info',\r\n};\r\n\r\n// Socket interface to standardize both real and simulated connections\r\nexport interface IMccSocket {\r\n  send: (message: string) => Promise<void>;\r\n  receive: (maxBytes?: number, timeout?: number) => Promise<string>;\r\n  close: () => void;\r\n  isSimulated?: boolean; // Flag to identify if this is a simulated socket\r\n}\r\n\r\n// Logger for MCC operations\r\n// SHOWN IN BROWSER CONSOLE\r\nconst mccLogger = {\r\n  debug: (message: string, ...args: any[]) => {\r\n    if (MCC_CONFIG.LOG_LEVEL === 'debug') {\r\n      console.debug(`[MCC] ${message}`, ...args);\r\n    }\r\n  },\r\n  info: (message: string, ...args: any[]) => {\r\n    if (['debug', 'info'].includes(MCC_CONFIG.LOG_LEVEL)) {\r\n      console.info(`[MCC] ${message}`, ...args);\r\n    }\r\n  },\r\n  warn: (message: string, ...args: any[]) => {\r\n    console.warn(`[MCC] ${message}`, ...args);\r\n  },\r\n  error: (message: string, ...args: any[]) => {\r\n    console.error(`[MCC] ${message}`, ...args);\r\n  }\r\n};\r\n\r\n// Simulated MCC Socket implementation\r\nclass SimulatedMccSocket implements IMccSocket {\r\n  private readonly simulatedData: Map<string, string>;\r\n  private readonly delays: boolean;\r\n  public isSimulated: boolean = true;\r\n  \r\n  constructor(delays = true) {\r\n    this.simulatedData = new Map();\r\n    this.delays = delays;\r\n    \r\n    // Initialize with some default values\r\n    this.simulatedData.set(\"OBC1_FW_Ver_Major\", \"1\");\r\n    this.simulatedData.set(\"OBC1_FW_Ver_Minor\", \"2\");\r\n    this.simulatedData.set(\"OBC1_FW_Ver_Patch\", \"3\");\r\n    this.simulatedData.set(\"OBC1_3V3_D\", \"3300\");\r\n    this.simulatedData.set(\"OBC1_PS_3V3_OBC2_V\", \"3298\");\r\n    this.simulatedData.set(\"OBC1_PS_5V_OBC2_V\", \"5042\");\r\n    this.simulatedData.set(\"OBC1_PS_5V_OBC2_I\", \"120\");\r\n    this.simulatedData.set(\"OBC1_PS_3V3_OBC2_I\", \"80\");\r\n    this.simulatedData.set(\"OBC1_thruster_ch1_T\", \"24.5\");\r\n    this.simulatedData.set(\"OBC1_thruster_ch2_T\", \"25.2\");\r\n    this.simulatedData.set(\"OBC1_leocam_ch1_T\", \"22.1\");\r\n    this.simulatedData.set(\"OBC1_leocam_ch2_T\", \"23.0\");\r\n    this.simulatedData.set(\"OBC1_leocam_ch3_T\", \"22.7\");\r\n    this.simulatedData.set(\"OBC1_leocam_ch4_T\", \"23.5\");\r\n    this.simulatedData.set(\"OBC1_Q8_eMMC0_state\", \"1\");\r\n    this.simulatedData.set(\"OBC1_Q8_eMMC1_state\", \"0\");\r\n    this.simulatedData.set(\"OBC1_vcc_pspll\", \"0.85\");\r\n    this.simulatedData.set(\"OBC1_vcc_psbatt\", \"1.20\");\r\n    this.simulatedData.set(\"OBC1_vccint\", \"1.00\");\r\n    this.simulatedData.set(\"OBC1_vccbram\", \"1.00\");\r\n    this.simulatedData.set(\"OBC1_vccaux\", \"1.80\");\r\n    this.simulatedData.set(\"OBC1_ps_temp\", \"45.2\");\r\n    this.simulatedData.set(\"OBC1_remote_temp\", \"42.3\");\r\n    this.simulatedData.set(\"OBC1_pl_temp\", \"47.1\");\r\n    this.simulatedData.set(\"OBC1_Sys_uptime\", \"12345\");\r\n    this.simulatedData.set(\"OBC1_Sys_loads_1m\", \"0.25\");\r\n    this.simulatedData.set(\"OBC1_Sys_loads_5m\", \"0.30\");\r\n    this.simulatedData.set(\"OBC1_Sys_loads_15m\", \"0.28\");\r\n    this.simulatedData.set(\"OBC1_Sys_totalram\", \"1048576\");\r\n    this.simulatedData.set(\"OBC1_Sys_freeram\", \"524288\");\r\n    this.simulatedData.set(\"OBC1_Sys_sharedram\", \"65536\");\r\n    this.simulatedData.set(\"OBC1_Sys_bufferram\", \"32768\");\r\n    this.simulatedData.set(\"OBC1_Sys_totalswap\", \"2097152\");\r\n    this.simulatedData.set(\"OBC1_Sys_freeswap\", \"2097152\");\r\n    this.simulatedData.set(\"OBC1_Sys_procs\", \"68\");\r\n    this.simulatedData.set(\"OBC1_Sys_totalhigh\", \"0\");\r\n    this.simulatedData.set(\"OBC1_Sys_freehigh\", \"0\");\r\n    this.simulatedData.set(\"OBC1_Sys_mem_unit\", \"1\");\r\n    \r\n    mccLogger.info(`Initialized simulated MCC socket with ${this.simulatedData.size} parameters`);\r\n  }\r\n  \r\n  public async send(message: string): Promise<void> {\r\n    mccLogger.debug(`[SIM] Sending: ${message.trim()}`);\r\n    \r\n    // Parse the message to update simulated data if it's a set command\r\n    if (message.includes('.value=')) {\r\n      const [param, valueStr] = message.trim().split('.value=');\r\n      const value = valueStr.trim();\r\n      this.simulatedData.set(param, value);\r\n      mccLogger.debug(`[SIM] Set ${param} to ${value}`);\r\n    }\r\n    \r\n    // Add simulated delay if enabled\r\n    if (this.delays) {\r\n      await new Promise(resolve => setTimeout(resolve, 50 + Math.random() * 100));\r\n    }\r\n    \r\n    return Promise.resolve();\r\n  }\r\n  \r\n  public async receive(maxBytes = 4096, timeout = 5000): Promise<string> {\r\n    // This would contain the read logic for parameters that have been \r\n    // requested with param.log=true in a real implementation\r\n    \r\n    // In our simulation, just get the last parameters from the log=true messages\r\n    const loggedParams = Array.from(this.simulatedData.keys())\r\n      .filter(key => key.endsWith('.log') && this.simulatedData.get(key) === 'true');\r\n    \r\n    // Add simulated delay if enabled\r\n    if (this.delays) {\r\n      await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\r\n    }\r\n    \r\n    // For simulation, if log=true isn't set (because we don't track it),\r\n    // we'll just respond to the actual parameter name\r\n    // Extract parameter names from something like \"param.log=true\\n\"\r\n    const responses: string[] = [];\r\n    \r\n    // Extract all parameters from buffer that may have been sent with .log=true\r\n    const requestBuffer = this.recentRequests.join('\\n');\r\n    const paramMatches = Array.from(requestBuffer.matchAll(/([A-Za-z0-9_]+)\\.log=true/g));\r\n    \r\n    if (paramMatches.length > 0) {\r\n      for (const match of paramMatches) {\r\n        const param = match[1];\r\n        // Check if we have this parameter\r\n        if (this.simulatedData.has(param)) {\r\n          responses.push(`${param}=${this.simulatedData.get(param)}`);\r\n        } else {\r\n          // Generate a random value for simulation\r\n          const randomValue = (Math.random() * 100).toFixed(2);\r\n          responses.push(`${param}=${randomValue}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    mccLogger.debug(`[SIM] Received response: ${responses.join('\\n')}`);\r\n    return responses.join('\\n');\r\n  }\r\n  \r\n  public close(): void {\r\n    mccLogger.info('[SIM] Closed simulated MCC socket');\r\n  }\r\n  \r\n  // Track recent requests for simulation purposes\r\n  private recentRequests: string[] = [];\r\n  \r\n  // Helper method to simulate reading multiple parameters\r\npublic simulateRead(parameters: string[]): string[] {\r\n  // Add debugging output\r\n  console.log(`Simulating read for: ${parameters.join(', ')}`);\r\n  \r\n  return parameters.map(param => {\r\n    // Get value from the map, or generate a realistic one if not found\r\n    let value = this.simulatedData.get(param);\r\n    \r\n    if (!value) {\r\n      // Generate a realistic value based on parameter name\r\n      if (param.includes(\"FW_Ver\")) {\r\n        value = param.includes(\"Major\") ? \"1\" : \r\n               param.includes(\"Minor\") ? \"2\" : \"3\";\r\n      } else if (param.includes(\"3V3\") || param.includes(\"3v3\")) {\r\n        value = \"3300\";\r\n      } else if (param.includes(\"5V\") || param.includes(\"5v\")) {\r\n        value = \"5000\";\r\n      } else if (param.includes(\"temp\") || param.includes(\"Temp\") || param.includes(\"_T\")) {\r\n        value = (20 + Math.floor(Math.random() * 10)).toString();\r\n      } else if (param.includes(\"eMMC\") || param.includes(\"emmc\")) {\r\n        value = \"1\";\r\n      } else {\r\n        value = \"simulated\";\r\n      }\r\n      \r\n      // Store it for consistent future responses\r\n      this.simulatedData.set(param, value);\r\n    }\r\n    \r\n    console.log(`Simulated ${param}=${value}`);\r\n    return `${param}=${value}`;\r\n  });\r\n}\r\n}\r\n\r\n// Real MCC Socket implementation using WebSocket\r\nclass RealMccSocket implements IMccSocket {\r\n  private readonly socket: WebSocket;\r\n  private readonly callbacks: Map<string, (data: string) => void>;\r\n  private readonly timeouts: Map<string, NodeJS.Timeout>;\r\n  public isSimulated: boolean = false;\r\n  \r\n  constructor(socket: WebSocket) {\r\n    this.socket = socket;\r\n    this.callbacks = new Map();\r\n    this.timeouts = new Map();\r\n    \r\n    // Set up message handler\r\n    this.socket.onmessage = this.handleMessage.bind(this);\r\n    this.socket.onerror = this.handleError.bind(this);\r\n    this.socket.onclose = this.handleClose.bind(this);\r\n    \r\n    mccLogger.info('Initialized real MCC socket connection');\r\n  }\r\n  \r\n  private handleMessage(event: MessageEvent): void {\r\n    const data = event.data;\r\n    mccLogger.debug(`[REAL] Received: ${data}`);\r\n    \r\n    // Call any registered callbacks\r\n    for (const [id, callback] of this.callbacks) {\r\n      callback(data);\r\n      \r\n      // Remove the callback and its timeout\r\n      this.callbacks.delete(id);\r\n      const timeout = this.timeouts.get(id);\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        this.timeouts.delete(id);\r\n      }\r\n    }\r\n  }\r\n  \r\n  private handleError(event: Event): void {\r\n    mccLogger.error(`[REAL] WebSocket error: ${event}`);\r\n    \r\n    // Reject all pending callbacks with the error\r\n    for (const [id, callback] of this.callbacks) {\r\n      callback(`ERROR: WebSocket error occurred`);\r\n      this.callbacks.delete(id);\r\n      \r\n      const timeout = this.timeouts.get(id);\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        this.timeouts.delete(id);\r\n      }\r\n    }\r\n  }\r\n  \r\n  private handleClose(event: CloseEvent): void {\r\n    mccLogger.warn(`[REAL] WebSocket closed: ${event.code} ${event.reason}`);\r\n    \r\n    // Reject all pending callbacks\r\n    for (const [id, callback] of this.callbacks) {\r\n      callback(`ERROR: WebSocket closed: ${event.code} ${event.reason}`);\r\n      this.callbacks.delete(id);\r\n      \r\n      const timeout = this.timeouts.get(id);\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        this.timeouts.delete(id);\r\n      }\r\n    }\r\n  }\r\n  \r\n  public async send(message: string): Promise<void> {\r\n    mccLogger.debug(`[REAL] Sending: ${message.trim()}`);\r\n    \r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this.socket.readyState !== WebSocket.OPEN) {\r\n        mccLogger.error('[REAL] Socket not open');\r\n        reject(new Error('Socket not open'));\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        this.socket.send(message);\r\n        resolve();\r\n      } catch (error) {\r\n        mccLogger.error(`[REAL] Send error: ${error}`);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n  \r\n  public async receive(maxBytes = 4096, timeout = 5000): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      const id = `receive-${Date.now()}-${Math.random()}`;\r\n      \r\n      // Create a timeout handler\r\n      const timeoutId = setTimeout(() => {\r\n        this.callbacks.delete(id);\r\n        reject(new Error(`Receive timeout after ${timeout}ms`));\r\n      }, timeout);\r\n      \r\n      // Store the timeout and callback\r\n      this.timeouts.set(id, timeoutId);\r\n      this.callbacks.set(id, resolve);\r\n    });\r\n  }\r\n  \r\n  public close(): void {\r\n    mccLogger.info('[REAL] Closing MCC socket');\r\n    this.socket.close();\r\n    \r\n    // Clear all timeouts\r\n    for (const timeoutId of this.timeouts.values()) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    this.timeouts.clear();\r\n    this.callbacks.clear();\r\n  }\r\n}\r\n\r\n/**\r\n * Test WebSocket connectivity to verify the server is reachable\r\n * This function is specifically designed to verify connectivity before showing success in the UI\r\n */\r\nexport async function testWebSocketConnection(serverAddress: string): Promise<boolean> {\r\n  return new Promise((resolve) => {\r\n    try {\r\n      // Create a WebSocket connection just to test if it can connect\r\n      const socket = new WebSocket(`ws://${serverAddress}`);\r\n      \r\n      // Set a timeout to prevent hanging on connection attempts\r\n      const timeout = setTimeout(() => {\r\n        socket.close();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      socket.onopen = () => {\r\n        clearTimeout(timeout);\r\n        socket.close();\r\n        resolve(true);\r\n      };\r\n      \r\n      socket.onerror = () => {\r\n        clearTimeout(timeout);\r\n        socket.close();\r\n        resolve(false);\r\n      };\r\n    } catch (error) {\r\n      mccLogger.error(`Connection test error: ${error}`);\r\n      resolve(false);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Create an MCC socket connection based on configuration\r\n * \r\n * @param serverAddress Server address in format \"host:port\"\r\n * @param forceReal Whether to force using a real connection even if simulation mode is enabled\r\n * @param fallbackToSim Whether to fall back to a simulated connection if the real one fails\r\n * @returns A promise that resolves to an IMccSocket interface\r\n */\r\nexport async function createMccSocket(\r\n  serverAddress: string, \r\n  forceReal = false, \r\n  fallbackToSim = true\r\n): Promise<IMccSocket> {\r\n  // Check if we should use simulation mode\r\n  if (MCC_CONFIG.SIMULATION_MODE && !forceReal) {\r\n    mccLogger.info(`Creating simulated MCC socket (address: ${serverAddress})`);\r\n    return new SimulatedMccSocket();\r\n  }\r\n  \r\n  // Parse the original server address\r\n  const [host, portStr] = serverAddress.split(\":\");\r\n  const port = parseInt(portStr || \"9377\", 10);\r\n  \r\n  try {\r\n    // Connect to our proxy server instead of directly to the MCC server\r\n    const proxyUrl = \"ws://localhost:8080\"; // WebSocket proxy URL\r\n    mccLogger.info(`Connecting to MCC server at ${host}:${port} via proxy ${proxyUrl}`);\r\n    \r\n    const socket = new WebSocket(proxyUrl);\r\n    \r\n    // Wait for the WebSocket connection to open\r\n    await new Promise<void>((resolve, reject) => {\r\n      socket.onopen = () => {\r\n        mccLogger.info(`WebSocket connection to proxy established`);\r\n        \r\n        // Once connected to the proxy, request connection to the actual MCC server\r\n        const connectRequest = {\r\n          command: 'connect',\r\n          host: host,\r\n          port: port\r\n        };\r\n        \r\n        socket.send(JSON.stringify(connectRequest));\r\n        \r\n        // Set up handler for the connection response\r\n        const messageHandler = (event: MessageEvent) => {\r\n          try {\r\n            const response = JSON.parse(event.data);\r\n            \r\n            if (response.status === 'connected') {\r\n              mccLogger.info(`Successfully connected to MCC server via proxy`);\r\n              socket.removeEventListener('message', messageHandler);\r\n              resolve();\r\n            } else if (response.status === 'error') {\r\n              socket.removeEventListener('message', messageHandler);\r\n              reject(new Error(response.message || 'Failed to connect to MCC server'));\r\n            }\r\n          } catch (error) {\r\n            // Not a JSON response, might be regular MCC data\r\n            // Just ignore it for now\r\n          }\r\n        };\r\n        \r\n        socket.addEventListener('message', messageHandler);\r\n        \r\n        // Add a timeout for the MCC server connection\r\n        setTimeout(() => {\r\n          socket.removeEventListener('message', messageHandler);\r\n          reject(new Error('MCC connection timeout (10000ms)'));\r\n        }, 10000);\r\n      };\r\n      \r\n      socket.onerror = (err) => {\r\n        mccLogger.error(`WebSocket connection to proxy error: ${err}`);\r\n        reject(new Error(`WebSocket connection error to proxy`));\r\n      };\r\n      \r\n      // Add a timeout for the proxy connection\r\n      setTimeout(() => reject(new Error('Proxy connection timeout (5000ms)')), 5000);\r\n    });\r\n    \r\n    // At this point, we're connected to both the proxy and the MCC server\r\n    return new ProxyMccSocket(socket);\r\n  } catch (error) {\r\n    mccLogger.error(`Failed to connect to MCC server via proxy: ${error}`);\r\n    \r\n    // Fall back to simulation if configured to do so\r\n    if (fallbackToSim) {\r\n      mccLogger.warn(`Falling back to simulation mode due to connection error`);\r\n      return new SimulatedMccSocket();\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n\r\n// New class to handle communication through the proxy\r\nclass ProxyMccSocket implements IMccSocket {\r\n  private readonly socket: WebSocket;\r\n  private readonly callbacks: Map<string, (data: string) => void>;\r\n  private readonly timeouts: Map<string, NodeJS.Timeout>;\r\n  public isSimulated: boolean = false;\r\n  \r\n  constructor(socket: WebSocket) {\r\n    this.socket = socket;\r\n    this.callbacks = new Map();\r\n    this.timeouts = new Map();\r\n    \r\n    // Set up message handler\r\n    this.socket.onmessage = this.handleMessage.bind(this);\r\n    this.socket.onerror = this.handleError.bind(this);\r\n    this.socket.onclose = this.handleClose.bind(this);\r\n    \r\n    mccLogger.info('Initialized proxy MCC socket connection');\r\n  }\r\n  \r\n// In mccUtils.ts, in the ProxyMccSocket class handleMessage method\r\nprivate handleMessage(event: MessageEvent): void {\r\n  const data = event.data;\r\n  mccLogger.debug(`[PROXY] Received: ${data}`);\r\n  \r\n  // Try to parse as JSON first (might be a control message from the proxy)\r\n  try {\r\n    const jsonResponse = JSON.parse(data);\r\n    if (jsonResponse.status) {\r\n      // This is a control message, not MCC data\r\n      mccLogger.info(`Proxy message: ${jsonResponse.message}`);\r\n      return;\r\n    }\r\n  } catch (e) {\r\n    // Not JSON, treat as regular MCC data\r\n  }\r\n  \r\n  // Call all registered callbacks with the raw data\r\n  const handlersToRemove = [];\r\n  \r\n  for (const [id, callback] of this.callbacks) {\r\n    callback(data);\r\n    \r\n    // Add to removal list\r\n    handlersToRemove.push(id);\r\n    \r\n    // Clear the timeout\r\n    const timeout = this.timeouts.get(id);\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n      this.timeouts.delete(id);\r\n    }\r\n  }\r\n  \r\n  // Remove callbacks outside the loop to avoid modification during iteration\r\n  for (const id of handlersToRemove) {\r\n    this.callbacks.delete(id);\r\n  }\r\n}\r\n  \r\n  private handleError(event: Event): void {\r\n    mccLogger.error(`[PROXY] WebSocket error: ${event}`);\r\n    \r\n    // Reject all pending callbacks with the error\r\n    for (const [id, callback] of this.callbacks) {\r\n      callback(`ERROR: WebSocket error occurred`);\r\n      this.callbacks.delete(id);\r\n      \r\n      const timeout = this.timeouts.get(id);\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        this.timeouts.delete(id);\r\n      }\r\n    }\r\n  }\r\n  \r\n  private handleClose(event: CloseEvent): void {\r\n    mccLogger.warn(`[PROXY] WebSocket closed: ${event.code} ${event.reason}`);\r\n    \r\n    // Reject all pending callbacks\r\n    for (const [id, callback] of this.callbacks) {\r\n      callback(`ERROR: WebSocket closed: ${event.code} ${event.reason}`);\r\n      this.callbacks.delete(id);\r\n      \r\n      const timeout = this.timeouts.get(id);\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        this.timeouts.delete(id);\r\n      }\r\n    }\r\n  }\r\n  \r\n  public async send(message: string): Promise<void> {\r\n    mccLogger.debug(`[PROXY] Sending: ${message.trim()}`);\r\n    \r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this.socket.readyState !== WebSocket.OPEN) {\r\n        mccLogger.error('[PROXY] Socket not open');\r\n        reject(new Error('Socket not open'));\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        this.socket.send(message);\r\n        resolve();\r\n      } catch (error) {\r\n        mccLogger.error(`[PROXY] Send error: ${error}`);\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n  \r\n  public async receive(maxBytes = 4096, timeout = 20000): Promise<string> {\r\n    return new Promise<string>((resolve, reject) => {\r\n      const id = `receive-${Date.now()}-${Math.random()}`;\r\n      \r\n      // Create a timeout handler\r\n      const timeoutId = setTimeout(() => {\r\n        this.callbacks.delete(id);\r\n        reject(new Error(`Receive timeout after ${timeout}ms`));\r\n      }, timeout);\r\n      \r\n      // Store the timeout and callback\r\n      this.timeouts.set(id, timeoutId);\r\n      this.callbacks.set(id, resolve);\r\n    });\r\n  }\r\n  \r\n  public close(): void {\r\n    mccLogger.info('[PROXY] Closing MCC socket');\r\n    this.socket.close();\r\n    \r\n    // Clear all timeouts\r\n    for (const timeoutId of this.timeouts.values()) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    this.timeouts.clear();\r\n    this.callbacks.clear();\r\n  }\r\n}\r\n\r\n/**\r\n * Connect to the MCC server - a backwards-compatible wrapper for createMccSocket\r\n * \r\n * @param serverAddress Server address in format \"host:port\"\r\n * @param forceSim Flag to force simulation mode\r\n * @param throwErrors Whether to throw errors (if false, returns null on error)\r\n * @returns A promise that resolves to an IMccSocket interface or null if connection fails\r\n */\r\nexport async function connectToMcc(\r\n  serverAddress: string,\r\n  forceSim = false,\r\n  throwErrors = false\r\n): Promise<IMccSocket | null> {\r\n  try {\r\n    // If forceSim is true, use simulation mode\r\n    if (forceSim) {\r\n      setSimulationMode(true);\r\n      return new SimulatedMccSocket();\r\n    }\r\n    \r\n    return await createMccSocket(serverAddress, false, true);\r\n  } catch (error) {\r\n    mccLogger.error(`Connection error: ${error}`);\r\n    \r\n    if (throwErrors) {\r\n      throw error;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n* Send a command to set a parameter value over a socket connection\r\n* \r\n* @param sock The socket connection to the MCC server\r\n* @param parameter The parameter name to set\r\n* @param value The value to set\r\n* @returns A promise that resolves when the command is sent\r\n*/\r\nexport async function mccifSet(sock: any, parameter: string, value: any): Promise<void> {\r\n  // Format the message in the same way as the Python implementation\r\n  // Ensure clean formatting with no extra whitespace or tokens\r\n  const message = `${parameter}.value=${value}\\n`;\r\n  \r\n  // Add a log to identify what's happening\r\n  console.log(`📡 mccifSet: ${parameter}=${value}, using ${sock? (sock.isSimulated ? \"simulated\" : \"real\") : \"no\"} socket`);\r\n  \r\n  // Check if we're in development mode and sock might be missing\r\n  if (!sock) {\r\n    console.warn(`Using simulation fallback for ${parameter}=${value}`);\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  // If this is a real socket with send function, use it directly\r\n  if (sock && typeof sock.send === 'function') {\r\n    console.log(`Using ${sock.isSimulated ? \"simulated\" : \"real\"} socket to set ${parameter}=${value}`);\r\n    \r\n    try {\r\n      await sock.send(message);\r\n      \r\n      // Add a small delay after sending command to ensure processing\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      \r\n      return Promise.resolve();\r\n    } catch (error) {\r\n      console.error(`Error sending command ${parameter}=${value}:`, error);\r\n      return Promise.resolve(); // Continue despite error\r\n    }\r\n  }\r\n  \r\n  // For backward compatibility, handle the old simulation API\r\n  if (sock && typeof sock.simulateRead === 'function') {\r\n    console.log(`Using simulation mode to set ${parameter}=${value}`);\r\n    if (typeof sock.send === 'function') {\r\n      return sock.send(message);\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n  \r\n  // If no valid socket is available, log the error but don't throw\r\n  console.error(\"No valid socket connection available\");\r\n  return Promise.resolve(); // Don't reject, just continue\r\n}\r\n\r\n/**\r\n* Read parameter values over a socket connection\r\n* \r\n* @param sock The socket connection to the MCC server\r\n* @param parameters Array of parameter names to read\r\n* @returns A promise that resolves to an array of response strings\r\n*/\r\n// Around line 640-720 in mccUtils.ts, in the mccifRead function\r\nexport async function mccifRead(sock: any, parameters: string[]): Promise<string[]> {\r\n  // Log what's happening\r\n  console.log(`📡 mccifRead: ${parameters.length} parameters, using ${sock? (sock.isSimulated ? \"simulated\" : \"real\") : \"no\"} socket`);\r\n  \r\n  // If we have a socket with simulateRead function, use it directly\r\n  if (sock && typeof sock.simulateRead === 'function') {\r\n    console.log(`Using simulation to read ${parameters.length} parameters`);\r\n    return sock.simulateRead(parameters);\r\n  }\r\n    \r\n  // Check if we have a real socket with send/receive functions\r\n  if (sock && typeof sock.send === 'function') {\r\n    console.log(`📡 ${sock.isSimulated ? \"SIMULATED\" : \"REAL\"} READ: Reading ${parameters.length} parameters from server`);\r\n    try {\r\n      // Construct message to enable logging for each parameter\r\n      let message = \"\";\r\n      for (const param of parameters) {\r\n        message += `${param}.log=true\\n`;\r\n      }\r\n      \r\n      // Send the message\r\n      await sock.send(message);\r\n      \r\n      // Add a small delay to ensure the server has time to process\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      \r\n      // Receive the response - INCREASE CHUNK SIZE and REDUCE TIMEOUT maybe\r\n      // 4096 bytes and 20000ms\r\n      const response = await sock.receive(4096, 20000);\r\n      \r\n      if (!response || response.length === 0) {\r\n        throw new Error(\"Empty response from server\");\r\n      }\r\n      \r\n      // Process the response\r\n      console.log(`📡 Data received for ${parameters.length} parameters:`, response);\r\n      \r\n      // Check if the response is just a string 'simulated response'\r\n      if (response === 'simulated response') {\r\n        console.log('⚠️ Received \"simulated response\" from socket - falling back to simulated values');\r\n        return simulateParameterValues(parameters);\r\n      }\r\n      \r\n      // Split response into lines and handle partial responses\r\n      const lines = response.split('\\n');\r\n      \r\n      // If we don't get enough lines, try to use what we have\r\n      const result = lines.slice(0, Math.min(parameters.length, lines.length));\r\n      \r\n      // If we got fewer lines than expected, pad with simulated values\r\n      if (result.length < parameters.length) {\r\n        console.log(`⚠️ Received only ${result.length} of ${parameters.length} parameters - padding with simulations`);\r\n        \r\n        // Create a map of received parameters for lookup\r\n        const receivedParams = new Map();\r\n        for (const line of result) {\r\n          const parts = line.split('=');\r\n          if (parts.length >= 2) {\r\n            receivedParams.set(parts[0], line);\r\n          }\r\n        }\r\n        \r\n        // Build final result array with actual or simulated values\r\n        const finalResult = parameters.map(param => {\r\n          if (receivedParams.has(param)) {\r\n            return receivedParams.get(param);\r\n          } else {\r\n            return simulateParameter(param);\r\n          }\r\n        });\r\n        \r\n        return finalResult;\r\n      }\r\n      \r\n      // Disable logging before returning\r\n      message = \"\";\r\n      for (const param of parameters) {\r\n        message += `${param}.log=false\\n`;\r\n      }\r\n      await sock.send(message);\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.error(`MCC read error: ${error}`);\r\n      // Fall back to simulation if there's an error\r\n      console.warn(\"Falling back to simulation due to error\");\r\n      return simulateParameterValues(parameters);\r\n    }\r\n  }\r\n\r\n  // If we're in development mode without a real server or proper simulation, return hardcoded values\r\n  console.warn(\"No valid socket connection available, using fallback simulated values\");\r\n  return simulateParameterValues(parameters);\r\n}\r\n\r\n// Helper function to generate simulated values\r\nfunction simulateParameterValues(parameters: string[]): string[] {\r\n  return parameters.map(param => simulateParameter(param));\r\n}\r\n\r\nfunction simulateParameter(param: string): string {\r\n  // Generate appropriate simulated values based on parameter name\r\n  if (param.includes(\"FW_Ver\")) {\r\n    const version = param.includes(\"Major\") ? \"1\" : \r\n                   param.includes(\"Minor\") ? \"2\" : \"3\";\r\n    return `${param}=${version}`;\r\n  } else if (param.includes(\"3V3\") || param.includes(\"3v3\")) {\r\n    return `${param}=${3300 + Math.floor(Math.random() * 100)}`;\r\n  } else if (param.includes(\"5V\") || param.includes(\"5v\")) {\r\n    return `${param}=${5000 + Math.floor(Math.random() * 100)}`;\r\n  } else if (param.includes(\"temp\") || param.includes(\"Temp\") || param.includes(\"_T\")) {\r\n    return `${param}=${20 + Math.floor(Math.random() * 10)}`;\r\n  } else if (param.includes(\"eMMC\")) {\r\n    return `${param}=1`;\r\n  } else {\r\n    return `${param}=simulated`;\r\n  }\r\n}\r\n\r\n// Export a helper to check if we're in simulation mode\r\nexport function isSimulationMode(): boolean {\r\n  return MCC_CONFIG.SIMULATION_MODE;\r\n}\r\n\r\n// Export a helper to toggle simulation mode at runtime\r\n// In utils/mccUtils.ts, modify setSimulationMode\r\nexport function setSimulationMode(enabled: boolean): void {\r\n  const previous = MCC_CONFIG.SIMULATION_MODE;\r\n  MCC_CONFIG.SIMULATION_MODE = enabled;\r\n  \r\n  if (previous !== enabled) {\r\n    mccLogger.info(`Simulation mode changed from ${previous} to ${enabled}`);\r\n    \r\n    // Broadcast the change to help with debugging\r\n    window.dispatchEvent(new CustomEvent('mcc-simulation-changed', { \r\n      detail: { enabled }\r\n    }));\r\n  }\r\n}\r\n\r\nexport function debugSocketType(sock: any): string {\r\n  if (!sock) return \"No socket\";\r\n  if (sock.isSimulated === true) return \"Simulated socket\";\r\n  if (sock.isSimulated === false) return \"Real socket\";\r\n  if (typeof sock.simulateRead === 'function') return \"Legacy simulated socket\";\r\n  if (typeof sock.send === 'function' && typeof sock.receive === 'function') return \"Socket with send/receive\";\r\n  return \"Unknown socket type\";\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 690, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/app/page.tsx"],"sourcesContent":["// Fixed page.tsx - Key changes to avoid infinite rendering loop and keep ServerWindow open\n\n/* implement routing using react-router-dom, \nyou'll need to transform your page.tsx into an entry point for routing. */\n\n/* npm install react-router-dom */\n\n\"use client\";\n\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, useLocation } from \"react-router-dom\";\nimport MainScreen from \"../components/MainScreen/MainScreen\";\nimport ToTestList from \"../components/ToTestList/ToTestList\";\nimport ServerWindow from \"../components/ServerWindow/ServerWindow\";\nimport ThreeDModelWindow from \"../components/ModelWindow/ThreeDModelWindow\";\nimport WelcomeWindow from \"../components/WelcomeWindow/WelcomeWindow\";\nimport Taskbar from \"../components/Taskbar/Taskbar\"; // Import the Taskbar component\nimport { WindowName } from \"@/types/types\";\nimport SettingsWindow from \"../components/SettingsWindow/SettingsWindow\";\n\n// Global variable to track ToTestList state across routes and navigations\nlet isToTestListOpen = false;\n\n// Interface for minimized windows\ninterface MinimizedWindow {\n  id: string;\n  title: string;\n  status?: string;\n}\n\nexport default function Page() {\n  // Window visibility state - Use refs to avoid state race conditions\n  const windowVisibilityRef = useRef({\n    ToTestList: false,\n    ServerWindow: false,\n    ThreeDModelWindow: false,\n    SettingsWindow: false,\n  });\n  \n  // State for reactive UI updates\n  const [windowVisibility, setWindowVisibility] = useState({\n    ToTestList: false,\n    ServerWindow: false,\n    ThreeDModelWindow: false,\n    SettingsWindow: false\n  });\n\n  // New state for minimized windows - only for ServerWindow\n  // Store just the window info, not the restore function\n  const [minimizedWindows, setMinimizedWindows] = useState<MinimizedWindow[]>([]);\n\n  const [zIndexCounter, setZIndexCounter] = useState(10000); // Base z-index\n  const [windowZIndexes, setWindowZIndexes] = useState<{\n    ToTestList: number;\n    ServerWindow: number;\n    ThreeDModelWindow: number;\n    SettingsWindow: number;\n  }>({\n    ToTestList: 10002,\n    ServerWindow: 10001,\n    ThreeDModelWindow: 10000,\n    SettingsWindow: 10003, // Start as highest z-index\n  });\n  \n  const [threeDModelProfileId, setThreeDModelProfileId] = useState<number | null>(1);\n  const [isOnMainScreen, setIsOnMainScreen] = useState(false);\n  const [serverWindowKey, setServerWindowKey] = useState(Date.now()); // Key for ServerWindow\n  \n  // Monitor current route to track if we're on main screen\n  const RouteObserver = () => {\n    const location = useLocation();\n    \n    useEffect(() => {\n      const isMain = location.pathname === '/main';\n      setIsOnMainScreen(isMain);\n      \n      // When navigating to main screen, restore window visibility from global state\n      if (isMain) {\n        console.log(\"🧭 Navigated to main screen, checking window states\");\n        \n        // Check if ToTestList should be open based on global flag\n        if (isToTestListOpen && !windowVisibility.ToTestList) {\n          console.log(\"🔄 ToTestList should be visible - restoring state\");\n          setWindowVisibility(prev => ({ ...prev, ToTestList: true }));\n          \n          // Force the ref to match as well\n          windowVisibilityRef.current = {\n            ...windowVisibilityRef.current,\n            ToTestList: true\n          };\n        }\n      }\n    }, [location]);\n    \n    return null;\n  };\n\n  // Load window state from sessionStorage on initial mount\n  useEffect(() => {\n    // Load window visibility from sessionStorage on mount\n    const savedVisibility = sessionStorage.getItem('windowVisibility');\n    if (savedVisibility) {\n      try {\n        const parsed = JSON.parse(savedVisibility);\n        windowVisibilityRef.current = parsed;\n        setWindowVisibility(parsed);\n        \n        // Update global flag for ToTestList\n        isToTestListOpen = parsed.ToTestList;\n        \n        console.log(\"📂 Loaded window visibility state:\", parsed);\n      } catch (e) {\n        console.error(\"Error parsing saved window visibility:\", e);\n      }\n    }\n  }, []);\n\n  // Save window visibility to sessionStorage whenever it changes\n  useEffect(() => {\n    // Save visibility state to sessionStorage for persistence\n    sessionStorage.setItem('windowVisibility', JSON.stringify(windowVisibility));\n    console.log(\"💾 Saved window visibility state:\", windowVisibility);\n    \n    // Update global flag for ToTestList\n    isToTestListOpen = windowVisibility.ToTestList;\n  }, [windowVisibility]);\n\n  // Extra check to ensure ToTestList stays visible when it should be\n  useEffect(() => {\n    // If global flag is true but component is not visible, fix it\n    if (isToTestListOpen && !windowVisibility.ToTestList) {\n      console.log(\"🔄 Fixing ToTestList visibility mismatch\");\n      setWindowVisibility(prev => ({\n        ...prev,\n        ToTestList: true\n      }));\n    }\n  }, [windowVisibility.ToTestList, isOnMainScreen]);\n\n  // Dedicated function to restore a window from taskbar\n  const restoreWindowFromTaskbar = (windowId: WindowName) => {\n    console.log(`♻️ Restoring ${windowId} from taskbar with direct method`);\n    \n    // 1. Remove from minimized windows\n    setMinimizedWindows(prev => prev.filter(w => w.id !== windowId));\n    \n    // 2. Update sessionStorage directly\n    try {\n      const visibility = JSON.parse(sessionStorage.getItem('windowVisibility') || '{}');\n      visibility[windowId] = true;\n      sessionStorage.setItem('windowVisibility', JSON.stringify(visibility));\n    } catch (e) {\n      console.error(\"Error updating sessionStorage:\", e);\n    }\n    \n    // 3. Update windowVisibilityRef\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      [windowId]: true\n    };\n    \n    // 4. Force UI state update\n    setWindowVisibility(prev => ({ ...prev, [windowId]: true }));\n    \n    // 5. Force a remount of the window (for ServerWindow only)\n    if (windowId === \"ServerWindow\") {\n      console.log(\"🔄 Generating new ServerWindow key to force remount\");\n      setServerWindowKey(Date.now());\n    }\n    \n    // 6. Update z-index to bring to front\n    setWindowZIndexes(prev => {\n      const highestZIndex = Math.max(...Object.values(prev), 10000);\n      return { ...prev, [windowId]: highestZIndex + 1 };\n    });\n    \n    // 7. Increment z-index counter\n    setZIndexCounter(prev => prev + 1);\n  };\n\n  // Main function to bring a window to front\n  const bringWindowToFront = useCallback((windowName: WindowName) => {\n    console.log(`🎯 Bringing ${windowName} to front`);\n    \n    // Update both state and ref to prevent race conditions\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      [windowName]: true\n    };\n    \n    // Check if the window is minimized and restore it\n    const isMinimized = minimizedWindows.some(win => win.id === windowName);\n    \n    if (isMinimized) {\n      // Use the direct restore method instead of handling here\n      restoreWindowFromTaskbar(windowName);\n      return; // Exit early since restoreWindowFromTaskbar handles everything\n    }\n    \n    // Update visibility in state for UI rendering if not already visible\n    setWindowVisibility(prev => {\n      if (prev[windowName] === true && !isMinimized) {\n        return prev; // No change needed unless it was minimized\n      }\n      return { ...prev, [windowName]: true };\n    });\n    \n    // Prevent z-index increases if window is already on top\n    setWindowZIndexes((prevIndexes) => {\n      const highestZIndex = Math.max(...Object.values(prevIndexes), 10000);\n      \n      if (prevIndexes[windowName] >= highestZIndex && !isMinimized) {\n        console.log(`Window ${windowName} already at highest z-index (${prevIndexes[windowName]})`);\n        return prevIndexes; // Return unchanged to prevent loops\n      }\n      \n      // Only update if we're actually bringing something to the front\n      console.log(`Updating z-index for ${windowName} from ${prevIndexes[windowName]} to ${highestZIndex + 1}`);\n      // FIX: Use prevIndexes instead of prev\n      return { ...prevIndexes, [windowName]: highestZIndex + 1 };\n    });\n    \n    // Only increment counter when actually changing z-indexes\n    setZIndexCounter(prev => prev + 1);\n  }, [minimizedWindows]);\n\n  // Function to minimize a window - ONLY for ServerWindow\n  const minimizeServerWindow = useCallback((status: string) => {\n    console.log(`⬇️ Minimizing ServerWindow with status: ${status}`);\n    \n    // Add to minimized windows - just the window info, not the restore function\n    setMinimizedWindows(prev => {\n      // Check if already minimized\n      if (prev.some(win => win.id === \"ServerWindow\")) {\n        // Update the status of the existing window\n        return prev.map(win => \n          win.id === \"ServerWindow\" \n            ? { ...win, status }\n            : win\n        );\n      }\n      \n      // Add to minimized windows - ONLY STORE THE DATA, NOT THE FUNCTION\n      return [...prev, {\n        id: \"ServerWindow\",\n        title: \"Server Connection\",\n        status\n      }];\n    });\n    \n    // Hide the window\n    setWindowVisibility(prev => ({\n      ...prev,\n      ServerWindow: false\n    }));\n    \n    // Update ref\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ServerWindow: false\n    };\n    \n  }, []);\n\n// Enhanced openToTestList function with force render option\nconst openToTestList = useCallback((forceRender = false) => {\n  console.log(\"🔍 openToTestList called with forceRender:\", forceRender);\n  console.log(\"🔍 Current visibility state:\", windowVisibility.ToTestList);\n  console.log(\"🟢 Opening ToTestList window, force:\", forceRender);\n  \n  // If force render, skip the check for already being open\n  if (!forceRender && windowVisibility.ToTestList === true) {\n    console.log(\"ToTestList already open - just bringing to front\");\n    \n    // Check if the actual window exists in the DOM\n    const elementExists = !!document.querySelector('[data-window=\"ToTestList\"]');\n    if (!elementExists) {\n      console.log(\"⚠️ ToTestList state is true but window not in DOM - forcing render\");\n      // Continue execution to render the window\n    } else {\n      // Just bring to front and exit\n      bringWindowToFront(\"ToTestList\");\n      return;\n    }\n  }\n  \n  // Set global flag for cross-component communication\n  isToTestListOpen = true;\n  \n  // Update ref (for immediate access without waiting for re-render)\n  windowVisibilityRef.current = {\n    ...windowVisibilityRef.current,\n    ToTestList: true\n  };\n  \n  // Update state (to trigger re-render)\n  setWindowVisibility(prev => ({ ...prev, ToTestList: true }));\n  \n  // Update z-index to bring window to front\n  setWindowZIndexes((prevIndexes) => {\n    const highestZIndex = Math.max(...Object.values(prevIndexes), 10000);\n    return { ...prevIndexes, ToTestList: highestZIndex + 1 };\n  });\n  \n  setZIndexCounter(prev => prev + 1);\n  \n  // Save state to sessionStorage for persistence\n  const currentState = {\n    ...windowVisibilityRef.current,\n    ToTestList: true\n  };\n  \n  sessionStorage.setItem('windowVisibility', JSON.stringify(currentState));\n  console.log(\"Updated sessionStorage:\", currentState);\n  \n  // Verify if window was actually rendered\n  setTimeout(() => {\n    const elementExists = !!document.querySelector('[data-window=\"ToTestList\"]');\n    console.log(`Verification after opening: ToTestList in DOM: ${elementExists}`);\n    \n    // If it still doesn't exist, try one more time with a state reset\n    if (!elementExists) {\n      console.log(\"⚠️ ToTestList still not in DOM after opening - trying state reset\");\n      \n      // Force a clear state first\n      setWindowVisibility(prev => ({ ...prev, ToTestList: false }));\n      \n      // Then re-render after a short delay\n      setTimeout(() => {\n        setWindowVisibility(prev => ({ ...prev, ToTestList: true }));\n      }, 10);\n    }\n  }, 50);\n}, [bringWindowToFront, windowVisibility.ToTestList]);\n\n  const closeToTestList = useCallback(() => {\n    console.log(\"🔍 closeToTestList called\");\n    console.log(\"🔍 Current visibility state:\", windowVisibility.ToTestList);\n    console.log(\"🔴 Closing ToTestList window\");\n    \n    // Update global flag\n    isToTestListOpen = false;\n    \n    // Update ref immediately\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ToTestList: false\n    };\n    \n    // Update state for UI\n    setWindowVisibility(prev => ({ \n      ...prev, \n      ToTestList: false \n    }));\n    \n    // Update sessionStorage immediately\n    try {\n      const currentState = {\n        ...windowVisibilityRef.current,\n        ToTestList: false\n      };\n      \n      sessionStorage.setItem('windowVisibility', JSON.stringify(currentState));\n      console.log(\"Updated sessionStorage when closing:\", currentState);\n    } catch (e) {\n      console.error(\"Error updating sessionStorage:\", e);\n    }\n  }, []);\n\n  const openServerWindow = useCallback(() => {\n    console.log(\"🟢 Opening ServerWindow window\");\n    \n    // Check if window is minimized\n    const isMinimized = minimizedWindows.some(win => win.id === \"ServerWindow\");\n    if (isMinimized) {\n      // Use the direct restore method\n      restoreWindowFromTaskbar(\"ServerWindow\");\n      return;\n    }\n    \n    // Update ref first\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ServerWindow: true\n    };\n    \n    // Set visibility directly\n    setWindowVisibility(prev => ({ ...prev, ServerWindow: true }));\n    \n    // Update z-index\n    setWindowZIndexes((prevIndexes) => {\n      const highestZIndex = Math.max(...Object.values(prevIndexes), 10000);\n      return { ...prevIndexes, ServerWindow: highestZIndex + 1 };\n    });\n    \n    setZIndexCounter(prev => prev + 1);\n  }, [minimizedWindows]);\n\n  const closeServerWindow = useCallback(() => {\n    console.log(\"🔴 Closing ServerWindow\");\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ServerWindow: false\n    };\n    setWindowVisibility(prev => ({ ...prev, ServerWindow: false }));\n    \n    // Remove from minimized windows if it was minimized\n    setMinimizedWindows(prev => prev.filter(win => win.id !== \"ServerWindow\"));\n  }, []);\n\n  const openModelWindow = useCallback((profileId: number = 1) => {\n    console.log(`🛰️ Opening 3D Model window for profile ID: ${profileId}`);\n    \n    // Update profile ID once\n    setThreeDModelProfileId(profileId);\n    \n    // Update visibility\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ThreeDModelWindow: true\n    };\n    setWindowVisibility(prev => ({\n      ...prev,\n      ThreeDModelWindow: true\n    }));\n\n    // Update z-index\n    setWindowZIndexes(prev => {\n      const highestZIndex = Math.max(...Object.values(prev), 10000);\n      return { ...prev, ThreeDModelWindow: highestZIndex + 1 };\n    });\n\n    setZIndexCounter(prev => prev + 1);\n  }, []);\n\n  const closeModelWindow = useCallback(() => {\n    console.log(\"🔴 Closing ThreeDModelWindow...\");\n    \n    // Just update visibility\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      ThreeDModelWindow: false\n    };\n    setWindowVisibility(prev => ({ \n      ...prev, \n      ThreeDModelWindow: false \n    }));\n  }, []);\n\n  const openSettingsWindow = useCallback(() => {\n    console.log(\"🟢 Opening SettingsWindow\");\n    \n    // Update ref first\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      SettingsWindow: true\n    };\n    \n    // Set visibility directly\n    setWindowVisibility(prev => ({ ...prev, SettingsWindow: true }));\n    \n    // Update z-index\n    setWindowZIndexes((prevIndexes) => {\n      const highestZIndex = Math.max(...Object.values(prevIndexes), 10000);\n      return { ...prevIndexes, SettingsWindow: highestZIndex + 1 };\n    });\n    \n    setZIndexCounter(prev => prev + 1);\n  }, []);\n  \n  const closeSettingsWindow = useCallback(() => {\n    console.log(\"🔴 Closing SettingsWindow\");\n    windowVisibilityRef.current = {\n      ...windowVisibilityRef.current,\n      SettingsWindow: false\n    };\n    setWindowVisibility(prev => ({ ...prev, SettingsWindow: false }));\n  }, []);\n  \n\n  return (\n    <Router>\n      <RouteObserver />\n      \n      <Routes>\n        <Route path=\"/\" element={\n          <WelcomeWindow \n            openToTestList={openToTestList} \n            openServerWindow={openServerWindow}\n          />\n        } />\n        <Route path=\"/main\" element={\n          <MainScreen \n            showSettingsWindow={windowVisibility.SettingsWindow}\n            openSettingsWindow={openSettingsWindow}\n            closeSettingsWindow={closeSettingsWindow}\n            openToTestList={openToTestList}\n            closeToTestList={closeToTestList}\n            openServerWindow={openServerWindow}\n            openModelWindow={openModelWindow}\n            closeModelWindow={closeModelWindow}\n            showToTestList={windowVisibility.ToTestList}\n            showThreeDModelWindow={windowVisibility.ThreeDModelWindow}\n            threeDModelProfileId={threeDModelProfileId}\n            windowZIndexes={windowZIndexes}\n            bringWindowToFront={bringWindowToFront}\n            zIndexCounter={zIndexCounter}\n          />\n        } />\n      </Routes>\n\n      {/* Floating windows */}\n      <div className=\"window-container\">\n        {windowVisibility.ToTestList && (\n          <ToTestList\n            key={`ToTestList-${Date.now()}`} // Force new instance on every render\n            zIndex={windowZIndexes.ToTestList}\n            onMouseDown={() => bringWindowToFront(\"ToTestList\")}\n            onClose={closeToTestList}\n            bringWindowToFront={bringWindowToFront}\n            windowZIndexes={windowZIndexes}\n            zIndexCounter={zIndexCounter}\n          />\n        )}\n\n        {windowVisibility.ServerWindow && (\n          <ServerWindow\n            key={`ServerWindow-${serverWindowKey}`} // ✓ Use dynamic key for forced remount\n            zIndex={windowZIndexes.ServerWindow}\n            onMouseDown={() => bringWindowToFront(\"ServerWindow\")}\n            onClose={closeServerWindow}\n            onMinimize={minimizeServerWindow}\n            bringWindowToFront={bringWindowToFront}\n            windowZIndexes={windowZIndexes}\n            zIndexCounter={zIndexCounter}\n          />\n        )}\n\n        {windowVisibility.ThreeDModelWindow && (\n          <ThreeDModelWindow\n            key={`ThreeDModel-${threeDModelProfileId}`}\n            profileId={threeDModelProfileId}\n            zIndex={windowZIndexes.ThreeDModelWindow}\n            onMouseDown={() => bringWindowToFront(\"ThreeDModelWindow\")}\n            onClose={closeModelWindow}\n            showThreeDModelWindow={windowVisibility.ThreeDModelWindow}\n            windowZIndexes={windowZIndexes}\n            zIndexCounter={zIndexCounter}\n            bringWindowToFront={bringWindowToFront}\n          />\n        )}\n\n{windowVisibility.SettingsWindow && (\n  <SettingsWindow\n    zIndex={windowZIndexes.SettingsWindow}\n    onMouseDown={() => bringWindowToFront(\"SettingsWindow\")}\n    onClose={closeSettingsWindow}\n    bringWindowToFront={bringWindowToFront}\n    windowZIndexes={windowZIndexes}\n    zIndexCounter={zIndexCounter}\n  />\n)}\n      </div>\n\n      {/* Add Taskbar component - with direct restore handler */}\n      <Taskbar \n        minimizedWindows={minimizedWindows.map(window => ({\n          ...window,\n          onRestore: () => restoreWindowFromTaskbar(window.id as WindowName)\n        }))} \n      />\n    </Router>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}