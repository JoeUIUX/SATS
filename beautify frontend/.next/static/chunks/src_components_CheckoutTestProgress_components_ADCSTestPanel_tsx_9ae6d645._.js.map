{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/ADCSTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/ADCSTestPanel.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\n\r\n// Import the ADCS-specific functions\r\nimport { runADCSCheckout } from '@/services/checkout/adcsCheckout';\r\nimport { generateADCSReport } from '@/services/reports/adcsReport';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface ADCSTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n}\r\n\r\nexport const ADCSTestPanel: React.FC<ADCSTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Map all UI options to specific test functionalities\r\n  const enableVersion = options.includes('Version Check');\r\n  const enableGyroscope = options.includes('Gyroscope');\r\n  const enableMagnetometer = options.includes('Magnetometer');\r\n  const enableStarTracker = options.includes('Star Tracker');\r\n  const enableFOG = options.includes('FOG');\r\n  const enableFineSunSensor = options.includes('Fine Sun Sensor');\r\n  const enableCoarseSunSensor = options.includes('Coarse Sun Sensor');\r\n  const enableEarthSensor = options.includes('Earth Sensor');\r\n  const enableReactionWheels = options.includes('Reaction Wheel');\r\n  const enableMagneticTorquer = options.includes('Magnetic Torquer');\r\n  \r\n  // Group them into main functional categories for testing\r\n  const enableTelemetry = enableVersion || enableGyroscope || enableMagnetometer || \r\n                          enableStarTracker || enableFOG;\r\n  const enableSensors = enableFineSunSensor || enableCoarseSunSensor || enableEarthSensor;\r\n  const enableActuators = enableReactionWheels || enableMagneticTorquer;\r\n  \r\n// Replace the relevant section in ADCSTestPanel.tsx with this:\r\n\r\nconst calculateCounterChange = (before: string, after: string): string => {\r\n  // Convert strings to numbers, defaulting to 0 if conversion fails\r\n  const beforeNum = parseInt(before, 10) || 0;\r\n  const afterNum = parseInt(after, 10) || 0;\r\n  \r\n  // Return the difference as a string\r\n  return (afterNum - beforeNum).toString();\r\n};\r\n\r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting ADCS Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common ADCS parameters\r\n            return parameters.map(param => {\r\n              if (param.includes(\"ADCS_IF_V\") || param.includes(\"ADCD_RW_V\")) {\r\n                return `${param}=${28 + Math.random() * 2}`; // 28-30V\r\n              } else if (param.includes(\"ADCS-IF_I\") || param.includes(\"ADCD_RW_I\")) {\r\n                return `${param}=${0.1 + Math.random() * 0.2}`; // 0.1-0.3A\r\n              } else if (param.includes(\"OBC1_Adcs_Cmd_Count\")) {\r\n                return `${param}=${Math.floor(Math.random() * 5)}`;\r\n              } else if (param.includes(\"OBC1_Adcs_Ack_Count\")) {\r\n                return `${param}=${Math.floor(Math.random() * 5)}`;\r\n              } else if (param.includes(\"OBC1_Adcs_Timeout_Count\")) {\r\n                return `${param}=0`;\r\n              } else if (param.includes(\"OBC1_Adcs_Error_Count\")) {\r\n                return `${param}=0`;\r\n              } else if (param.includes(\"ADCS_TLM_Identifier\")) {\r\n                return `${param}=128`;\r\n              } else if (param.includes(\"ADCS_TLM_InterfaceVer\")) {\r\n                return `${param}=1`;\r\n              } else if (param.includes(\"ADCS_TLM_IdFwVerMajor\")) {\r\n                return `${param}=3`;\r\n              } else if (param.includes(\"ADCS_TLM_IdFwVerMinor\")) {\r\n                return `${param}=5`;\r\n              } else if (param.includes(\"ADCS_TLM_RuntimeSec\")) {\r\n                return `${param}=${Math.floor(Math.random() * 3600)}`; // 0-3600 seconds\r\n              } else if (param.includes(\"ADCS_TLM_RuntimeMiliSec\")) {\r\n                return `${param}=${Math.floor(Math.random() * 1000)}`; // 0-999 milliseconds\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n      }\r\n      \r\n      // Run the ADCS checkout test with progress updates\r\n      const results = await runADCSCheckout(sock, \r\n        { \r\n          testTelemetry: enableTelemetry, \r\n          testReactionWheels: enableReactionWheels,\r\n          testSensors: enableSensors,\r\n          testMagneticTorquer: enableMagneticTorquer\r\n        }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running ADCS checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateADCSReport(results);\r\n      alert(`ADCS report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  // Determine the status for a voltage check\r\n  const getVoltageStatus = (status: string) => {\r\n    if (!status) return \"\";\r\n    \r\n    switch(status) {\r\n      case \"PASS\":\r\n        return (\r\n          <span className={`${styles.statusBadge} ${styles.colorCompleted}`}>\r\n            PASS\r\n          </span>\r\n        );\r\n      case \"FAIL\":\r\n        return (\r\n          <span className={`${styles.statusBadge} ${styles.colorError}`}>\r\n            FAIL\r\n          </span>\r\n        );\r\n      default:\r\n        return (\r\n          <span className={`${styles.statusBadge} ${styles.colorWaiting}`}>\r\n            {status}\r\n          </span>\r\n        );\r\n    }\r\n  };\r\n\r\n  // Get appropriate color class for command status\r\n  const getCommandStatusClass = (status: string) => {\r\n    if (!status) return styles.colorWaiting;\r\n    \r\n    if (status === \"PASS\" || status === \"PASS_TIMEOUT\") {\r\n      return styles.colorCompleted;\r\n    } else if (status.startsWith(\"FAIL\") || status === \"ERROR\") {\r\n      return styles.colorError;\r\n    } else {\r\n      return styles.colorWaiting;\r\n    }\r\n  };\r\n\r\n  // Format command status for display\r\n  const formatCommandStatus = (status: string) => {\r\n    switch(status) {\r\n      case \"PASS\":\r\n        return \"PASS\";\r\n      case \"PASS_TIMEOUT\":\r\n        return \"PASS (with timeout)\";\r\n      case \"FAIL_NO_REPLY\":\r\n        return \"FAIL - No reply\";\r\n      case \"FAIL_CMD_NOT_SENT\":\r\n        return \"FAIL - Command not sent\";\r\n      case \"ERROR\":\r\n        return \"ERROR\";\r\n      default:\r\n        return status || \"Unknown\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            ADCS Test Status\r\n          </h3>\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <div className={styles.progressContainer}>\r\n            <div className={styles.progressLabel}>\r\n              <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                {currentStep || 'Waiting to start test...'}\r\n              </span>\r\n              <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                {progress}%\r\n              </span>\r\n            </div>\r\n            <div \r\n              className={styles.progressBar}\r\n              style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n            >\r\n              <div \r\n                className={styles.progressBarFill}\r\n                style={{ \r\n                  width: `${progress}%`,\r\n                  background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Display the testing options */}\r\n          <div style={{ marginBottom: '20px' }}>\r\n            <h4 style={{ \r\n              fontSize: '14px', \r\n              marginBottom: '10px',\r\n              color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n            }}>\r\n              Selected Test Options:\r\n            </h4>\r\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n              {options.map((option, index) => (\r\n                <div key={index} style={{ \r\n                  padding: '6px 10px', \r\n                  backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                  borderRadius: '4px',\r\n                  fontSize: '13px',\r\n                  color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '6px'\r\n                }}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  {option}\r\n                </div>\r\n              ))}\r\n              {options.length === 0 && (\r\n                <div style={{ \r\n                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                  fontStyle: 'italic',\r\n                  fontSize: '13px'\r\n                }}>\r\n                  No specific options selected. Running with defaults.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Connection Status */}\r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n              <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n              </svg>\r\n              Connection Mode\r\n            </div>\r\n            <span className={`${styles.statusBadge} ${\r\n              isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n            }`}>\r\n              {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              marginTop: '10px'\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              ADCS Testing\r\n            </div>\r\n            <span style={{ display: 'flex', gap: '8px' }}>\r\n              <span className={`${styles.parameterValue} ${\r\n                enableTelemetry ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Telemetry: {enableTelemetry ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n              <span className={`${styles.parameterValue} ${\r\n                enableSensors ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Sensors: {enableSensors ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n              <span className={`${styles.parameterValue} ${\r\n                enableActuators ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Actuators: {enableActuators ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Run/Re-run Test Button */}\r\n          <button \r\n            onClick={startTest} \r\n            className={styles.button}\r\n            disabled={isRunning}\r\n            style={{ \r\n              backgroundColor: isRunning ? '#9ca3af' :\r\n                hasRunTest ? '#4f46e5' : '#10b981',\r\n              color: 'white',\r\n              marginTop: '20px'\r\n            }}\r\n          >\r\n            {isRunning ? (\r\n              <>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                Running Test...\r\n              </>\r\n            ) : hasRunTest ? (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Re-run Test\r\n              </>\r\n            ) : (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Run Test\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {results && (\r\n        <div className=\"space-y-4 mt-4\">\r\n          {/* ADCS Voltage/Current Card */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                  : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                ADCS Power Status\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>ADCS Interface Voltage</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsIfVoltage.value} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      {getVoltageStatus(results.vi.adcsIfVoltage.status)}\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>ADCS Interface Current</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsIfCurrent.value} A</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}></td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Reaction Wheel Voltage</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsRwVoltage.value} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      {getVoltageStatus(results.vi.adcsRwVoltage.status)}\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Reaction Wheel Current</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsRwCurrent.value} A</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}></td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          {/* ADCS Command Status Card */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                  : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                ADCS Command Status\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div style={{ \r\n                padding: '16px', \r\n                borderRadius: '8px',\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                border: `1px solid ${isDarkMode ? \"#374151\" : \"#e5e7eb\"}`,\r\n                marginBottom: '16px'\r\n              }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                  <span style={{ fontWeight: 'bold', color: isDarkMode ? \"#d1d5db\" : \"#374151\" }}>\r\n                    Telemetry Command 128 Status:\r\n                  </span>\r\n                  <span className={`${styles.statusBadge} ${getCommandStatusClass(results.command.status)}`}>\r\n                    {formatCommandStatus(results.command.status)}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Command Counter Details */}\r\n              {results.commandResults && results.commandResults.length >= 8 && (\r\n                <div>\r\n                  <h4 style={{ \r\n                    fontSize: '14px', \r\n                    marginBottom: '10px',\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n                  }}>\r\n                    Command Counter Details:\r\n                  </h4>\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n                      marginBottom: '16px'\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Counter</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Before</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>After</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Change</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n<tr>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Command Count</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[0]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[4]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n    {calculateCounterChange(results.commandResults[0], results.commandResults[4])}\r\n  </td>\r\n</tr>\r\n\r\n<tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Acknowledge Count</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[1]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[5]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n    {calculateCounterChange(results.commandResults[1], results.commandResults[5])}\r\n  </td>\r\n</tr>\r\n\r\n<tr>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Timeout Count</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[2]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[6]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n    {calculateCounterChange(results.commandResults[2], results.commandResults[6])}\r\n  </td>\r\n</tr>\r\n\r\n<tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Error Count</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[3]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.commandResults[7]}</td>\r\n  <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n    {calculateCounterChange(results.commandResults[3], results.commandResults[7])}\r\n  </td>\r\n</tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              )}\r\n              \r\n              <div>\r\n                {/* Add a small component summary section */}\r\n                <div style={{ \r\n                  display: 'grid', \r\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))', \r\n                  gap: '12px',\r\n                  marginBottom: '16px'\r\n                }}>\r\n                  {/* Version Check Status */}\r\n                  <div style={{ \r\n                    padding: '10px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    textAlign: 'center',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    opacity: enableVersion ? 1 : 0.6\r\n                  }}>\r\n                    <div style={{ fontSize: '12px', marginBottom: '4px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                      Version\r\n                    </div>\r\n                    <div style={{ \r\n                      fontSize: '14px', \r\n                      fontWeight: 'bold',\r\n                      color: enableVersion ? (isDarkMode ? '#34d399' : '#10b981') : (isDarkMode ? '#9ca3af' : '#6b7280')\r\n                    }}>\r\n                      {enableVersion ? 'Enabled' : 'Disabled'}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Gyroscope Status */}\r\n                  <div style={{ \r\n                    padding: '10px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    textAlign: 'center',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    opacity: enableGyroscope ? 1 : 0.6\r\n                  }}>\r\n                    <div style={{ fontSize: '12px', marginBottom: '4px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                      Gyroscope\r\n                    </div>\r\n                    <div style={{ \r\n                      fontSize: '14px', \r\n                      fontWeight: 'bold',\r\n                      color: enableGyroscope ? (isDarkMode ? '#34d399' : '#10b981') : (isDarkMode ? '#9ca3af' : '#6b7280')\r\n                    }}>\r\n                      {enableGyroscope ? 'Enabled' : 'Disabled'}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* RW Status */}\r\n                  <div style={{ \r\n                    padding: '10px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    textAlign: 'center',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    opacity: enableReactionWheels ? 1 : 0.6\r\n                  }}>\r\n                    <div style={{ fontSize: '12px', marginBottom: '4px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                      RW\r\n                    </div>\r\n                    <div style={{ \r\n                      fontSize: '14px', \r\n                      fontWeight: 'bold',\r\n                      color: enableReactionWheels ? (isDarkMode ? '#34d399' : '#10b981') : (isDarkMode ? '#9ca3af' : '#6b7280')\r\n                    }}>\r\n                      {enableReactionWheels ? 'Enabled' : 'Disabled'}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Magnetometer Status */}\r\n                  <div style={{ \r\n                    padding: '10px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    textAlign: 'center',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    opacity: enableMagnetometer ? 1 : 0.6\r\n                  }}>\r\n                    <div style={{ fontSize: '12px', marginBottom: '4px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                      Magnetometer\r\n                    </div>\r\n                    <div style={{ \r\n                      fontSize: '14px', \r\n                      fontWeight: 'bold',\r\n                      color: enableMagnetometer ? (isDarkMode ? '#34d399' : '#10b981') : (isDarkMode ? '#9ca3af' : '#6b7280')\r\n                    }}>\r\n                      {enableMagnetometer ? 'Enabled' : 'Disabled'}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* ADCS Telemetry Card */}\r\n          {results.telemetry && (\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n                    : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                  color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path d=\"M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\r\n                  </svg>\r\n                  ADCS Telemetry\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Node Type Identifier</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.identifier}</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Program Type Identifier</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.identifier}</td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Interface Version</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.interfaceVersion}</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Firmware Version (Major)</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.fwVersionMajor}</td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Firmware Version (Minor)</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.fwVersionMinor}</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Runtime (seconds)</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.runtimeSec}</td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Runtime (milliseconds)</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.telemetry.runtimeMiliSec}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* ADCS Power Off Status Card */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #7f1d1d, #b91c1c)\" \r\n                  : \"linear-gradient(to right, #fee2e2, #fecaca)\",\r\n                color: isDarkMode ? \"#fecaca\" : \"#7f1d1d\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                ADCS Power Off Status\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>ADCS Interface Voltage</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsIfVoltageOff?.value || \"N/A\"} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      {getVoltageStatus(results.vi.adcsIfVoltageOff?.status)}\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Reaction Wheel Voltage</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.adcsRwVoltageOff?.value || \"N/A\"} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      {getVoltageStatus(results.vi.adcsRwVoltageOff?.status)}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Generate Report Button */}\r\n          <div>\r\n            <button \r\n              onClick={generateReport}\r\n              className={styles.reportButton}\r\n              style={{\r\n                backgroundColor: \"#10b981\",\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              Generate Report\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}