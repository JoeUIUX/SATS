{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n// Import the HEPS-specific functions\r\nimport { runHEPSCheckout } from '@/services/checkout/hepsCheckout';\r\nimport { generateHEPSReport } from '@/services/reports/hepsReport';\r\n\r\n// Import test history components - ensuring these are actually used\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\n// HEPS Parameter Display Component\r\nconst HEPSParameterDisplay: React.FC<{\r\n  parameters: string[];\r\n  results: any;\r\n  groupName: string;\r\n  isDarkMode: boolean;\r\n}> = ({ parameters, results, groupName, isDarkMode }) => {\r\n  return (\r\n    <div style={{ marginBottom: '20px' }}>\r\n      <h4 style={{ \r\n        fontSize: '16px', \r\n        fontWeight: 'bold',\r\n        marginBottom: '10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        {groupName} Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {parameters.map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>\r\n                {results?.rawParameters?.[param] || 'N/A'}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface HEPSTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Update your TestHistoryItem interface definition\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    system?: {\r\n      powerStatus?: string;\r\n      voltage?: string;\r\n      current?: string;\r\n      power?: string;\r\n      powerCycleCount?: string;\r\n      operatingTime?: string;\r\n    };\r\n    battery?: {\r\n      voltage1?: string;\r\n      voltage2?: string;\r\n      voltage3?: string;\r\n      current1?: string;\r\n      current2?: string;\r\n      current3?: string;\r\n      temperature1?: string;\r\n      temperature2?: string;\r\n      temperature3?: string;\r\n    };\r\n    solarArray?: {\r\n      voltage1?: string;\r\n      voltage2?: string;\r\n      voltage3?: string;\r\n      tempYNeg1?: string;\r\n      tempYNeg2?: string;\r\n      tempYNeg3?: string;\r\n      tempBodyMount?: string;\r\n      tempYPos1?: string;\r\n      tempYPos2?: string;\r\n      tempYPos3?: string;\r\n    };\r\n    hdrmStatus?: {\r\n      deploy1?: string;\r\n      deploy2?: string;\r\n    };\r\n    obn?: {\r\n      voltage1?: string;\r\n      current1?: string;\r\n      voltage2?: string;\r\n      current2?: string;\r\n      auxVoltage?: string;\r\n    };\r\n    bcr?: {\r\n      current1?: string;\r\n      current2?: string;\r\n      current3?: string;\r\n      temp1?: string;\r\n      temp2?: string;\r\n      temp3?: string;\r\n    };\r\n    pdmTemperature?: {\r\n      pdm1?: string;\r\n      pdm2?: string;\r\n    };\r\n    converters?: {\r\n      hdrm12v1_voltage?: string;\r\n      v5_1_voltage?: string;\r\n      v12_1_voltage?: string;\r\n      v15_voltage?: string;\r\n      hdrm12v2_voltage?: string;\r\n      v5_2_voltage?: string;\r\n      v12_2_voltage?: string;\r\n      hdrm12v1_temp?: string;\r\n      v5_1_temp?: string;\r\n      v12_1_temp?: string;\r\n      v15_temp?: string;\r\n      hdrm12v2_temp?: string;\r\n      v5_2_temp?: string;\r\n      v12_2_temp?: string;\r\n    };\r\n    loads?: {\r\n      obc1_voltage?: string;\r\n      obc1_current?: string;\r\n      obc2_voltage?: string;\r\n      obc2_current?: string;\r\n      sband_voltage?: string;\r\n      sband_current?: string;\r\n      uhf_voltage?: string;\r\n      uhf_current?: string;\r\n    };\r\n    canTest?: {\r\n      primaryResult?: string;\r\n      secondaryResult?: string;\r\n      primaryBefore?: string[];\r\n      primaryAfter?: string[];\r\n      secondaryBefore?: string[];\r\n      secondaryAfter?: string[];\r\n    };\r\n    heaters?: any[];\r\n    heaterTests?: any[];\r\n    currentTest?: any;\r\n    powerCycleTest?: any;\r\n    passFailStatus?: Record<string, string>;\r\n    testedOptions?: string[];\r\n    rawParameters?: Record<string, string[]>;\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean;\r\n}\r\n\r\n// Define all HEPS parameters from hepsCheckout.ts for reference display\r\nconst hepsParameters = {\r\n  canSetting: [\"OBC1_Intercomm_PriSec_Cfg\"],\r\n  canVar: [\r\n    \"OBC1_InterComm_Heps1_Pcm_Tx\", \"OBC1_InterComm_Heps1_Psm1_Tx\", \"OBC1_InterComm_Heps1_Psm2_Tx\",\r\n    \"OBC1_InterComm_Heps1_Pdm1_Tx\", \"OBC1_InterComm_Heps1_Pdm2_Tx\", \"OBC1_InterComm_Heps1_Pcm_Ack\",\r\n    \"OBC1_InterComm_Heps1_Psm1_Ack\", \"OBC1_InterComm_Heps1_Psm2_Ack\", \"OBC1_InterComm_Heps1_Pdm1_Ack\",\r\n    \"OBC1_InterComm_Heps1_Pdm2_Ack\", \"OBC1_InterComm_Heps1_Pcm_Timeout\", \"OBC1_InterComm_Heps1_Psm1_Timeout\", \r\n    \"OBC1_InterComm_Heps1_Psm2_Timeout\", \"OBC1_InterComm_Heps1_Pdm1_Timeout\", \"OBC1_InterComm_Heps1_Pdm2_Timeout\",\r\n    \"OBC1_InterComm_Heps1_Pcm_Error\", \"OBC1_InterComm_Heps1_Psm1_Error\", \"OBC1_InterComm_Heps1_Psm2_Error\", \r\n    \"OBC1_InterComm_Heps1_Pdm1_Error\", \"OBC1_InterComm_Heps1_Pdm2_Error\"\r\n  ],\r\n  batVi: [\r\n    \"HEPS1_PCM_BAT_V_1\", \"HEPS1_PCM_BAT_V_2\", \"HEPS1_PCM_BAT_V_3\", \r\n    \"HEPS1_PCM_BAT_I_CHAR_1\", \"HEPS1_PCM_BAT_I_CHAR_2\", \"HEPS1_PCM_BAT_I_CHAR_3\"\r\n  ],\r\n  batT: [\"HEPS1_PSM1_BAT_TEMP1\", \"HEPS1_PSM1_BAT_TEMP2\", \"HEPS1_PSM1_BAT_TEMP3\"],\r\n  saV: [\"HEPS1_PCM_SA_V_1\", \"HEPS1_PCM_SA_V_2\", \"HEPS1_PCM_SA_V_3\"],\r\n  saT1: [\"HEPS1_PSM1_SA1_Y-_TEMP\", \"HEPS1_PSM1_SA2_Y-_TEMP\"],\r\n  saT2: [\r\n    \"HEPS1_PSM2_SA3_Y-_TEMP\", \"HEPS1_PSM2_SA_BM_TEMP\", \"HEPS1_PSM2_SA1_Y+_TEMP\", \r\n    \"HEPS1_PSM2_SA2_Y+_TEMP\", \"HEPS1_PSM2_SA3_Y+_TEMP\"\r\n  ],\r\n  obnVi: [\"HEPS1_PCM_OBN1_V\", \"HEPS1_PCM_OBN1_I\", \"HEPS1_PCM_OBN2_V\", \"HEPS1_PCM_OBN2_I\", \"HEPS1_PCM_AUX12_V\"],\r\n  bcrIt: [\r\n    \"HEPS1_PCM_BCR1_I\", \"HEPS1_PCM_BCR2_I\", \"HEPS1_PCM_BCR3_I\", \r\n    \"HEPS1_PCM_BCR1_TEMP\", \"HEPS1_PCM_BCR2_TEMP\", \"HEPS1_PCM_BCR3_TEMP\"\r\n  ],\r\n  pcbT: [\"HEPS1_PDM1_PCB_TEMP\", \"HEPS1_PDM2_PCB_TEMP\"],\r\n  conv1V: [\"HEPS1_PSM1_HDRM_CON1_V\", \"HEPS1_PSM1_5V_CON1_V\", \"HEPS1_PSM1_12V_CON1_V\", \"HEPS1_PSM1_15V_CON_V\"],\r\n  conv2V: [\"HEPS1_PSM2_HDRM_CON2_V\", \"HEPS1_PSM2_5V_CON2_V\", \"HEPS1_PSM2_12V_CON2_V\"],\r\n  conv1T: [\r\n    \"HEPS1_PSM1_HDRM_CON1_TEMP\", \"HEPS1_PSM1_5V_CON1_TEMP\", \r\n    \"HEPS1_PSM1_12V_CON1_TEMP\", \"HEPS1_PSM1_15V_CON1_TEMP\"\r\n  ],\r\n  conv2T: [\"HEPS1_PSM2_HDRM_CON2_TEMP\", \"HEPS1_PSM2_5V_CON2_TEMP\", \"HEPS1_PSM2_12V_CON2_TEMP\"],\r\n  rlclVi: [\r\n    \"HEPS1_PDM2_OBC1_V\", \"HEPS1_PDM2_OBC1_I\", \"HEPS1_PDM1_OBC2_V\", \"HEPS1_PDM1_OBC2_I\",\r\n    \"HEPS1_PDM1_S-BAND_V\", \"HEPS1_PDM1_S-BAND_I\", \"HEPS1_PDM2_UHF_V\", \"HEPS1_PDM2_UHF_I\"\r\n  ],\r\n  lclVi: [\r\n    \"HEPS1_PDM2_ADCS_IF_V\", \"HEPS1_PDM2_ADCS-IF_I\", \"HEPS1_PDM2_ADCD_RW_V\", \"HEPS1_PDM2_ADCD_RW_I\",\r\n    \"HEPS1_PDM2_GPS_5V_V\", \"HEPS1_PDM2_GPS_5V_I\", \"HEPS1_PDM1_ECU1_V\", \"HEPS1_PDM1_ECU1_I\",\r\n    \"HEPS1_PDM1_THRU1_V\", \"HEPS1_PDM1_THRU1_I\", \"HEPS1_PDM2_ECU2_V\", \"HEPS1_PDM2_ECU2_I\",\r\n    \"HEPS1_PDM2_THRU2_V\", \"HEPS1_PDM2_THRU2_I\", \"HEPS1_PDM2_PCS_V\", \"HEPS1_PDM2_PCS_I\",\r\n    \"HEPS1_PDM1_OPT_CAM_V\", \"HEPS1_PDM1_OPT_CAM_I\", \"HEPS1_PDM1_X-BAND_V\", \"HEPS1_PDM1_X-BAND_I\",\r\n    \"HEPS1_PDM1_AOD1_V\", \"HEPS1_PDM1_AOD1_I\", \"HEPS1_PDM2_AOD2_V\", \"HEPS1_PDM2_AOD2_I\",\r\n    \"HEPS1_PDM1_CIP_V\", \"HEPS1_PDM1_CIP_I\"\r\n  ],\r\n  hdrmVi: [\r\n    \"HEPS1_PDM1_HDRM1_ARM_V\", \"HEPS1_PDM1_HDRM1_SW01_V\", \"HEPS1_PDM1_HDRM1_SW01_I\",\r\n    \"HEPS1_PDM1_HDRM1_SW02_V\", \"HEPS1_PDM1_HDRM1_SW03_V\", \"HEPS1_PDM1_HDRM1_SW02_I\",\r\n    \"HEPS1_PDM1_HDRM1_SW03_I\", \"HEPS1_PDM2_HDRM2_ARM_V\", \"HEPS1_PDM2_HDRM2_SW01_V\",\r\n    \"HEPS1_PDM2_HDRM2_SW01_I\", \"HEPS1_PDM2_HDRM2_SW02_V\", \"HEPS1_PDM2_HDRM2_SW03_V\",\r\n    \"HEPS1_PDM2_HDRM2_SW02_I\", \"HEPS1_PDM2_HDRM2_SW03_I\"\r\n  ],\r\n  heater1Vi: [\r\n    \"HEPS1_PSM1_HT1_LCL\", \"HEPS1_PSM1_BAT_HT1_V\", \"HEPS1_PSM1_BAT_HT1_I\", \r\n    \"HEPS1_PSM1_THRU_HT1_V\", \"HEPS1_PSM1_THRU_HT1_I\", \"HEPS1_PSM1_CAM_HT1_V\", \r\n    \"HEPS1_PSM1_CAM_HT1_I\"\r\n  ],\r\n  heater2Vi: [\r\n    \"HEPS1_PSM2_HT2_LCL\", \"HEPS1_PSM2_BAT_HT2_V\", \"HEPS1_PSM2_BAT_HT2_I\", \r\n    \"HEPS1_PSM2_THRU_HT2_V\", \"HEPS1_PSM2_THRU_HT2_I\", \"HEPS1_PSM2_CAM_HT2_V\", \r\n    \"HEPS1_PSM2_CAM_HT2_I\"\r\n  ]\r\n};\r\n\r\nexport const HEPSTestPanel: React.FC<HEPSTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('system.voltage');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  \r\n  // Add state variables for messages\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  \r\n// Add states for parameter display\r\nconst [showParameters, setShowParameters] = useState(false);\r\nconst [selectedParameterGroup, setSelectedParameterGroup] = useState<string>(\"canVar\");\r\n  \r\n  // Determine if test options are enabled\r\n  const enableHeaterTest = options.includes('Heater Test');\r\n  const enableCurrentTest = options.includes('Current Measurement');\r\n  const enablePowerCycle = options.includes('Power Cycle Test');\r\n  const enableCANTest = options.includes('CAN Test');\r\n  const enableBatteryTest = options.includes('Battery Test');\r\n  const enableConverterTest = options.includes('Converter Test');\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n  \r\n  // Available metrics for visualization - using exact parameter names from hepsCheckout.ts\r\n  const metricOptions = [\r\n    // System metrics\r\n    { label: 'System Voltage', value: 'system.voltage', paramName: 'OBC1_Intercomm_PriSec_Cfg' },\r\n    { label: 'System Current', value: 'system.current', paramName: 'OBC1_Intercomm_PriSec_Cfg' },\r\n    { label: 'System Power', value: 'system.power', paramName: 'OBC1_Intercomm_PriSec_Cfg' },\r\n    \r\n    // Battery metrics - exact parameter names from hepsCheckout.ts\r\n    { label: 'Battery 1 Voltage', value: 'battery.voltage1', paramName: 'HEPS1_PCM_BAT_V_1' },\r\n    { label: 'Battery 2 Voltage', value: 'battery.voltage2', paramName: 'HEPS1_PCM_BAT_V_2' },\r\n    { label: 'Battery 3 Voltage', value: 'battery.voltage3', paramName: 'HEPS1_PCM_BAT_V_3' },\r\n    { label: 'Battery 1 Current', value: 'battery.current1', paramName: 'HEPS1_PCM_BAT_I_CHAR_1' },\r\n    { label: 'Battery 2 Current', value: 'battery.current2', paramName: 'HEPS1_PCM_BAT_I_CHAR_2' },\r\n    { label: 'Battery 3 Current', value: 'battery.current3', paramName: 'HEPS1_PCM_BAT_I_CHAR_3' },\r\n    { label: 'Battery 1 Temperature', value: 'battery.temperature1', paramName: 'HEPS1_PSM1_BAT_TEMP1' },\r\n    { label: 'Battery 2 Temperature', value: 'battery.temperature2', paramName: 'HEPS1_PSM1_BAT_TEMP2' },\r\n    { label: 'Battery 3 Temperature', value: 'battery.temperature3', paramName: 'HEPS1_PSM1_BAT_TEMP3' },\r\n    \r\n    // Solar Array metrics - exact parameter names from hepsCheckout.ts\r\n    { label: 'Solar Array 1 Voltage', value: 'solarArray.voltage1', paramName: 'HEPS1_PCM_SA_V_1' },\r\n    { label: 'Solar Array 2 Voltage', value: 'solarArray.voltage2', paramName: 'HEPS1_PCM_SA_V_2' },\r\n    { label: 'Solar Array 3 Voltage', value: 'solarArray.voltage3', paramName: 'HEPS1_PCM_SA_V_3' },\r\n    { label: 'Solar Array Y- Temp 1', value: 'solarArray.tempYNeg1', paramName: 'HEPS1_PSM1_SA1_Y-_TEMP' },\r\n    { label: 'Solar Array Y- Temp 2', value: 'solarArray.tempYNeg2', paramName: 'HEPS1_PSM1_SA2_Y-_TEMP' },\r\n    { label: 'Solar Array Y- Temp 3', value: 'solarArray.tempYNeg3', paramName: 'HEPS1_PSM2_SA3_Y-_TEMP' },\r\n    { label: 'Solar Array Body Mount Temp', value: 'solarArray.tempBodyMount', paramName: 'HEPS1_PSM2_SA_BM_TEMP' },\r\n    { label: 'Solar Array Y+ Temp 1', value: 'solarArray.tempYPos1', paramName: 'HEPS1_PSM2_SA1_Y+_TEMP' },\r\n    { label: 'Solar Array Y+ Temp 2', value: 'solarArray.tempYPos2', paramName: 'HEPS1_PSM2_SA2_Y+_TEMP' },\r\n    { label: 'Solar Array Y+ Temp 3', value: 'solarArray.tempYPos3', paramName: 'HEPS1_PSM2_SA3_Y+_TEMP' },\r\n    \r\n    // OBN metrics - exact parameter names from hepsCheckout.ts\r\n    { label: 'OBN 1 Voltage', value: 'obn.voltage1', paramName: 'HEPS1_PCM_OBN1_V' },\r\n    { label: 'OBN 2 Voltage', value: 'obn.voltage2', paramName: 'HEPS1_PCM_OBN2_V' },\r\n    { label: 'OBN 1 Current', value: 'obn.current1', paramName: 'HEPS1_PCM_OBN1_I' },\r\n    { label: 'OBN 2 Current', value: 'obn.current2', paramName: 'HEPS1_PCM_OBN2_I' },\r\n    { label: 'OBN AUX Voltage', value: 'obn.auxVoltage', paramName: 'HEPS1_PCM_AUX12_V' },\r\n    \r\n    // BCR metrics - exact parameter names from hepsCheckout.ts\r\n    { label: 'BCR 1 Current', value: 'bcr.current1', paramName: 'HEPS1_PCM_BCR1_I' },\r\n    { label: 'BCR 2 Current', value: 'bcr.current2', paramName: 'HEPS1_PCM_BCR2_I' },\r\n    { label: 'BCR 3 Current', value: 'bcr.current3', paramName: 'HEPS1_PCM_BCR3_I' },\r\n    { label: 'BCR 1 Temperature', value: 'bcr.temp1', paramName: 'HEPS1_PCM_BCR1_TEMP' },\r\n    { label: 'BCR 2 Temperature', value: 'bcr.temp2', paramName: 'HEPS1_PCM_BCR2_TEMP' },\r\n    { label: 'BCR 3 Temperature', value: 'bcr.temp3', paramName: 'HEPS1_PCM_BCR3_TEMP' },\r\n    \r\n    // PDM Temperature - exact parameter names from hepsCheckout.ts\r\n    { label: 'PDM 1 Temperature', value: 'pdmTemperature.pdm1', paramName: 'HEPS1_PDM1_PCB_TEMP' },\r\n    { label: 'PDM 2 Temperature', value: 'pdmTemperature.pdm2', paramName: 'HEPS1_PDM2_PCB_TEMP' },\r\n    \r\n    // Converters - exact parameter names from hepsCheckout.ts\r\n    { label: 'HDRM 12V Converter 1 Voltage', value: 'converters.hdrm12v1_voltage', paramName: 'HEPS1_PSM1_HDRM_CON1_V' },\r\n    { label: '5V Converter 1 Voltage', value: 'converters.v5_1_voltage', paramName: 'HEPS1_PSM1_5V_CON1_V' },\r\n    { label: '12V Converter 1 Voltage', value: 'converters.v12_1_voltage', paramName: 'HEPS1_PSM1_12V_CON1_V' },\r\n    { label: '15V Converter Voltage', value: 'converters.v15_voltage', paramName: 'HEPS1_PSM1_15V_CON_V' },\r\n    { label: 'HDRM 12V Converter 2 Voltage', value: 'converters.hdrm12v2_voltage', paramName: 'HEPS1_PSM2_HDRM_CON2_V' },\r\n    { label: '5V Converter 2 Voltage', value: 'converters.v5_2_voltage', paramName: 'HEPS1_PSM2_5V_CON2_V' },\r\n    { label: '12V Converter 2 Voltage', value: 'converters.v12_2_voltage', paramName: 'HEPS1_PSM2_12V_CON2_V' },\r\n    \r\n    // Converter temperatures - exact parameter names from hepsCheckout.ts\r\n    { label: 'HDRM 12V Converter 1 Temp', value: 'converters.hdrm12v1_temp', paramName: 'HEPS1_PSM1_HDRM_CON1_TEMP' },\r\n    { label: '5V Converter 1 Temp', value: 'converters.v5_1_temp', paramName: 'HEPS1_PSM1_5V_CON1_TEMP' },\r\n    { label: '12V Converter 1 Temp', value: 'converters.v12_1_temp', paramName: 'HEPS1_PSM1_12V_CON1_TEMP' },\r\n    { label: '15V Converter Temp', value: 'converters.v15_temp', paramName: 'HEPS1_PSM1_15V_CON1_TEMP' },\r\n    { label: 'HDRM 12V Converter 2 Temp', value: 'converters.hdrm12v2_temp', paramName: 'HEPS1_PSM2_HDRM_CON2_TEMP' },\r\n    { label: '5V Converter 2 Temp', value: 'converters.v5_2_temp', paramName: 'HEPS1_PSM2_5V_CON2_TEMP' },\r\n    { label: '12V Converter 2 Temp', value: 'converters.v12_2_temp', paramName: 'HEPS1_PSM2_12V_CON2_TEMP' },\r\n    \r\n    // Loads - exact parameter names from hepsCheckout.ts\r\n    { label: 'OBC-1 Voltage', value: 'loads.obc1_voltage', paramName: 'HEPS1_PDM2_OBC1_V' },\r\n    { label: 'OBC-1 Current', value: 'loads.obc1_current', paramName: 'HEPS1_PDM2_OBC1_I' },\r\n    { label: 'OBC-2 Voltage', value: 'loads.obc2_voltage', paramName: 'HEPS1_PDM1_OBC2_V' },\r\n    { label: 'OBC-2 Current', value: 'loads.obc2_current', paramName: 'HEPS1_PDM1_OBC2_I' },\r\n    { label: 'S-Band Voltage', value: 'loads.sband_voltage', paramName: 'HEPS1_PDM1_S-BAND_V' },\r\n    { label: 'S-Band Current', value: 'loads.sband_current', paramName: 'HEPS1_PDM1_S-BAND_I' },\r\n    { label: 'UHF Voltage', value: 'loads.uhf_voltage', paramName: 'HEPS1_PDM2_UHF_V' },\r\n    { label: 'UHF Current', value: 'loads.uhf_current', paramName: 'HEPS1_PDM2_UHF_I' },\r\n    \r\n    // Heater metrics - with exact parameter names\r\n    { label: 'Heater 1 Status', value: 'heaters[0].status', paramName: 'HEPS1_PSM1_HT1_LCL' },\r\n    { label: 'Heater 1 Voltage', value: 'heaters[0].voltage', paramName: 'HEPS1_PSM1_BAT_HT1_V' },\r\n    { label: 'Heater 1 Current', value: 'heaters[0].current', paramName: 'HEPS1_PSM1_BAT_HT1_I' },\r\n    { label: 'Heater 2 Status', value: 'heaters[1].status', paramName: 'HEPS1_PSM2_HT2_LCL' },\r\n    { label: 'Heater 2 Voltage', value: 'heaters[1].voltage', paramName: 'HEPS1_PSM2_BAT_HT2_V' },\r\n    { label: 'Heater 2 Current', value: 'heaters[1].current', paramName: 'HEPS1_PSM2_BAT_HT2_I' }\r\n  ];\r\n\r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n// Continued from previous artifact\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  // Add function to fetch test history\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component HEPS`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=HEPS`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have system values to be a legitimate test\r\n            const hasSystemData = item.results.system && \r\n              (item.results.system.voltage || item.results.system.current || item.results.system.powerStatus);\r\n            \r\n            // Must have some component data - check for any primary component data\r\n            const hasComponentData = (\r\n              (item.results.battery && Object.values(item.results.battery).some(val => val)) || \r\n              (item.results.solarArray && Object.values(item.results.solarArray).some(val => val)) ||\r\n              (item.results.obn && Object.values(item.results.obn).some(val => val)) ||\r\n              (item.results.bcr && Object.values(item.results.bcr).some(val => val)) ||\r\n              (item.results.converters && Object.values(item.results.converters).some(val => val)) ||\r\n              (item.results.loads && Object.values(item.results.loads).some(val => val)) ||\r\n              (item.results.heaters && item.results.heaters.length > 0)\r\n            );\r\n            \r\n            // Consider it a real test if it has both system and component data\r\n            return hasSystemData && hasComponentData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `heps_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Add function to save test result to history\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform our standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                      (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Store raw parameter information for display\r\n      const rawParameters: Record<string, string[]> = {\r\n        canSetting: hepsParameters.canSetting,\r\n        canVar: hepsParameters.canVar,\r\n        batVi: hepsParameters.batVi,\r\n        batT: hepsParameters.batT,\r\n        saV: hepsParameters.saV,\r\n        saT1: hepsParameters.saT1,\r\n        saT2: hepsParameters.saT2,\r\n        obnVi: hepsParameters.obnVi,\r\n        bcrIt: hepsParameters.bcrIt,\r\n        pcbT: hepsParameters.pcbT,\r\n        conv1V: hepsParameters.conv1V,\r\n        conv2V: hepsParameters.conv2V,\r\n        conv1T: hepsParameters.conv1T,\r\n        conv2T: hepsParameters.conv2T,\r\n        rlclVi: hepsParameters.rlclVi,\r\n        lclVi: hepsParameters.lclVi,\r\n        hdrmVi: hepsParameters.hdrmVi,\r\n        heater1Vi: hepsParameters.heater1Vi,\r\n        heater2Vi: hepsParameters.heater2Vi\r\n      };\r\n      \r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        rawParameters: testResults.rawParameters || {}, // Ensure raw parameters are preserved\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"HEPS\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: `Test options: ${options.join(', ')}`,\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `heps_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"HEPS\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    // Handle array index notation in the path (e.g. heaters[0].temperature)\r\n    const arrayIndexMatch = path.match(/^([^\\[]+)\\[(\\d+)\\]\\.(.+)$/);\r\n    if (arrayIndexMatch) {\r\n      const [, arrayName, indexStr, propName] = arrayIndexMatch;\r\n      const index = parseInt(indexStr);\r\n      \r\n      if (results[arrayName] && Array.isArray(results[arrayName]) && results[arrayName].length > index) {\r\n        const arrayItem = results[arrayName][index];\r\n        if (arrayItem && typeof arrayItem === 'object' && propName in arrayItem) {\r\n          const value = arrayItem[propName];\r\n          const numValue = parseFloat(value);\r\n          return isNaN(numValue) ? null : numValue;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    \r\n    // Handle regular dot notation (e.g. system.voltage)\r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting HEPS Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object for HEPS\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common HEPS parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for different HEPS parameters\r\n              if (param.includes(\"HEPS\") || param.includes(\"Heps\")) {\r\n                if (param.includes(\"Status\") || param.includes(\"state\")) {\r\n                  return `${param}=${Math.round(Math.random())}`;  // 0 or 1\r\n                } else if (param.includes(\"Temp\") || param.includes(\"temp\") || param.includes(\"_T\")) {\r\n                  return `${param}=${20 + Math.floor(Math.random() * 30)}`;  // 20-50°C\r\n                } else if (param.includes(\"Current\") || param.includes(\"_I\") || param.includes(\"_I_\")) {\r\n                  return `${param}=${500 + Math.floor(Math.random() * 500)}`;  // 500-1000mA\r\n                } else if (param.includes(\"Voltage\") || param.includes(\"_V\") || param.includes(\"_V_\")) {\r\n                  if (param.includes(\"BAT\")) {\r\n                    return `${param}=${12 + Math.random() * 2}`;  // 12-14V for batteries\r\n                  } else if (param.includes(\"5V\")) {\r\n                    return `${param}=${5 + (Math.random() * 0.2 - 0.1)}`;  // 4.9-5.1V\r\n                  } else if (param.includes(\"12V\") || param.includes(\"HDRM\")) {\r\n                    return `${param}=${12 + (Math.random() * 0.4 - 0.2)}`;  // 11.8-12.2V\r\n                  } else if (param.includes(\"15V\")) {\r\n                    return `${param}=${15 + (Math.random() * 0.5 - 0.25)}`;  // 14.75-15.25V\r\n                  } else if (param.includes(\"3V3\")) {\r\n                    return `${param}=${3.3 + (Math.random() * 0.1 - 0.05)}`;  // 3.25-3.35V\r\n                  } else {\r\n                    return `${param}=${28 + Math.random() * 2}`;  // 28-30V\r\n                  }\r\n                } else if (param.includes(\"Power\")) {\r\n                  return `${param}=${15 + Math.floor(Math.random() * 10)}`;  // 15-25W\r\n                } else if (param.includes(\"Count\")) {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // 0-99\r\n                } else if (param.includes(\"Test\")) {\r\n                  if (param.includes(\"Done\")) {\r\n                    return `${param}=1`;  // Test completed\r\n                  } else if (param.includes(\"Result\")) {\r\n                    return `${param}=PASS`;  // Test result\r\n                  } else {\r\n                    return `${param}=1`;  // Other test flags\r\n                  }\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // Generic value\r\n                }\r\n              } else if (param.includes(\"OBC1_InterComm\")) { \r\n                // CAN communication variables\r\n                return `${param}=${Math.floor(Math.random() * 1000)}`;\r\n              } else if (param.includes(\"OBC1_Intercomm_PriSec_Cfg\")) {\r\n                return `${param}=0`;  // CAN configuration\r\n              } else if (param.includes(\"OBC1_Ch_\")) {\r\n                return `${param}=1`;  // Channel setting\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n        setDetectedSimulation(true);\r\n      }\r\n      \r\n      // Run the HEPS checkout test\r\n      const testResults = await runHEPSCheckout(sock, \r\n        { \r\n          testHeaters: enableHeaterTest, \r\n          testCurrent: enableCurrentTest, \r\n          testPowerCycle: enablePowerCycle \r\n        }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      testResults.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(testResults);\r\n      \r\n// Save result to history - detect if simulation was used\r\nconst wasSimulated = isForceSimulation || (sock && sock.isSimulated);\r\nawait saveTestResult(testResults, 'completed', wasSimulated);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(testResults);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running test:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history\r\n      if (results) {\r\n        await saveTestResult(results, 'error', true);\r\n      }\r\n      \r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateHEPSReport(results);\r\n      alert(`HEPS report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clean up simulated test results from the database\r\n   */\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit test history to a certain number of records\r\n   * @param limit Number of records to keep (default: 30)\r\n   */\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'HEPS'  // Limit only HEPS records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear all test history for this profile and component\r\n   */\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n\r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for HEPS?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=HEPS`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`heps_real_history_${profileId}`);\r\n        localStorage.removeItem(`heps_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete a single test history item\r\n   */\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Add these functions for multi-select mode\r\n  /**\r\n   * Toggle multi-select mode\r\n   */\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Toggle selection of a single history item\r\n   */\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Select all visible history items\r\n   */\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n\r\n  /**\r\n   * Deselect all history items\r\n   */\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  /**\r\n   * Delete all selected items\r\n   */\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Modify the useEffect for socket detection to watch for simulation indicators\r\n  useEffect(() => {\r\n    // Check if we have real socket info saved\r\n    const socketInfo = localStorage.getItem('mccSocketInfo');\r\n    let shouldUseSimulation = true; // Default to simulation\r\n\r\n    if (socketInfo) {\r\n      try {\r\n        const parsed = JSON.parse(socketInfo);\r\n        if (parsed && parsed.isReal) {\r\n          console.log(\"📡 Using real socket based on stored configuration\");\r\n          shouldUseSimulation = false;\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing socket info:\", e);\r\n      }\r\n    }\r\n\r\n    // Check the actual socket type more thoroughly\r\n    let isActuallySimulated = true;\r\n    \r\n    if (sock) {\r\n      // Direct simulation flag check\r\n      if (typeof sock.isSimulated === 'boolean') {\r\n        isActuallySimulated = sock.isSimulated;\r\n      } \r\n      // Check if it's using the simulation fallback\r\n      else if (typeof sock.simulateRead === 'function') {\r\n        isActuallySimulated = true;\r\n      }\r\n      // Check if it's a real socket with a receive method but no simulation methods\r\n      else if (typeof sock.send === 'function' && typeof sock.receive === 'function' && typeof sock.simulateRead === 'undefined') {\r\n        // Additional check to see if it's been correctly initialized\r\n        if (sock.readyState === undefined || sock.readyState === 1) { // 1 = OPEN for WebSocket\r\n          isActuallySimulated = false;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Set both states\r\n    setIsForceSimulation(shouldUseSimulation);\r\n    setDetectedSimulation(isActuallySimulated);\r\n    \r\n    console.log(`🔧 Socket analysis: Config says simulation=${shouldUseSimulation}, actual detection=${isActuallySimulated}`);\r\n    \r\n// Set global simulation mode based on the most accurate information\r\n  setSimulationMode(isActuallySimulated);\r\n}, [sock]);\r\n\r\n// Optionally add automatic cleanup on component mount\r\nuseEffect(() => {\r\n  if (profileId) {\r\n    // Automatically limit history to 30 records when the component mounts\r\n    limitTestHistory(30);\r\n  }\r\n}, [profileId]); // Only run when profileId changes\r\n\r\n// Function to get friendly name for parameter groups\r\nconst getParameterGroupName = (key: string): string => {\r\n  const groupNames: Record<string, string> = {\r\n    canSetting: \"CAN Configuration\",\r\n    canVar: \"CAN Communication\",\r\n    batVi: \"Battery Voltage/Current\",\r\n    batT: \"Battery Temperature\",\r\n    saV: \"Solar Array Voltage\",\r\n    saT1: \"Solar Array Temperature 1\",\r\n    saT2: \"Solar Array Temperature 2\",\r\n    obnVi: \"OBN Voltage/Current\",\r\n    bcrIt: \"BCR Current/Temperature\",\r\n    pcbT: \"PCB Temperature\",\r\n    conv1V: \"Converter 1 Voltage\",\r\n    conv2V: \"Converter 2 Voltage\",\r\n    conv1T: \"Converter 1 Temperature\",\r\n    conv2T: \"Converter 2 Temperature\",\r\n    rlclVi: \"RLCL Voltage/Current\",\r\n    lclVi: \"LCL Voltage/Current\",\r\n    hdrmVi: \"HDRM Voltage/Current\",\r\n    heater1Vi: \"Heater 1 Parameters\",\r\n    heater2Vi: \"Heater 2 Parameters\"\r\n  };\r\n  \r\n  return groupNames[key] || key;\r\n};\r\n\r\n// Helper function to get human-readable parameter names\r\nconst getReadableParameterName = (rawName: string): string => {\r\n  // Handle nested paths like 'battery.voltage1'\r\n  if (rawName.includes('.')) {\r\n    const parts = rawName.split('.');\r\n    const parentName = parts[0];\r\n    const childName = parts[1];\r\n    \r\n    // Convert from camelCase to space-separated words\r\n    const parentReadable = parentName\r\n      .replace(/([A-Z])/g, ' $1')\r\n      .replace(/^./, str => str.toUpperCase());\r\n    \r\n    // Special handling for various parameter types\r\n    if (childName.includes('voltage')) {\r\n      const voltageNumber = childName.replace('voltage', '');\r\n      return `${parentReadable} ${voltageNumber ? voltageNumber : ''} Voltage`;\r\n    } else if (childName.includes('current')) {\r\n      const currentNumber = childName.replace('current', '');\r\n      return `${parentReadable} ${currentNumber ? currentNumber : ''} Current`;\r\n    } else if (childName.includes('temperature')) {\r\n      const tempNumber = childName.replace('temperature', '');\r\n      return `${parentReadable} ${tempNumber ? tempNumber : ''} Temperature`;\r\n    } else if (childName.includes('temp')) {\r\n      if (childName.startsWith('temp')) {\r\n        // Handle special cases like 'tempYNeg1'\r\n        if (childName.includes('YNeg')) {\r\n          const num = childName.replace('tempYNeg', '');\r\n          return `${parentReadable} Y- Side ${num} Temperature`;\r\n        } else if (childName.includes('YPos')) {\r\n          const num = childName.replace('tempYPos', '');\r\n          return `${parentReadable} Y+ Side ${num} Temperature`;\r\n        } else if (childName.includes('BodyMount')) {\r\n          return `${parentReadable} Body Mount Temperature`;\r\n        }\r\n      } else {\r\n        const tempNumber = childName.replace('temp', '');\r\n        return `${parentReadable} ${tempNumber ? tempNumber : ''} Temperature`;\r\n      }\r\n    } else if (childName.includes('power')) {\r\n      return `${parentReadable} Power`;\r\n    } else if (childName.includes('status')) {\r\n      return `${parentReadable} Status`;\r\n    } else if (childName.includes('deploy')) {\r\n      const deployNumber = childName.replace('deploy', '');\r\n      return `${parentReadable} ${deployNumber ? deployNumber : ''} Deployment Status`;\r\n    }\r\n    \r\n    // For any other cases, just convert camelCase to space-separated\r\n    const childReadable = childName\r\n      .replace(/([A-Z])/g, ' $1')\r\n      .replace(/^./, str => str.toUpperCase());\r\n    \r\n    return `${parentReadable} ${childReadable}`;\r\n  }\r\n  \r\n  // Handle array index notation for heaters\r\n  if (rawName.includes('[')) {\r\n    const match = rawName.match(/^(.+)\\[(\\d+)\\]\\.(.+)$/);\r\n    if (match) {\r\n      const [, arrayName, index, property] = match;\r\n      const arrayReadable = arrayName\r\n        .replace(/([A-Z])/g, ' $1')\r\n        .replace(/^./, str => str.toUpperCase());\r\n      \r\n      const propertyReadable = property\r\n        .replace(/([A-Z])/g, ' $1')\r\n        .replace(/^./, str => str.toUpperCase());\r\n      \r\n      return `${arrayReadable} ${parseInt(index) + 1} ${propertyReadable}`;\r\n    }\r\n  }\r\n  \r\n  // For top-level parameters, just convert camelCase to space-separated\r\n  return rawName\r\n    .replace(/([A-Z])/g, ' $1')\r\n    .replace(/^./, str => str.toUpperCase());\r\n};\r\n\r\n// Helper function to format values with proper units\r\nconst formatParameterValue = (rawValue: any, paramName: string): string => {\r\n  if (rawValue === null || rawValue === undefined) {\r\n    return 'N/A';\r\n  }\r\n  \r\n  // Try to parse as number\r\n  const numValue = parseFloat(rawValue);\r\n  if (isNaN(numValue)) {\r\n    return rawValue.toString();\r\n  }\r\n  \r\n  // Add appropriate units based on parameter name\r\n  if (paramName.toLowerCase().includes('voltage')) {\r\n    return `${numValue.toFixed(2)} V`;\r\n  } else if (paramName.toLowerCase().includes('current')) {\r\n    return `${numValue.toFixed(2)} mA`;\r\n  } else if (paramName.toLowerCase().includes('temp')) {\r\n    return `${numValue.toFixed(2)} °C`;\r\n  } else if (paramName.toLowerCase().includes('power')) {\r\n    return `${numValue.toFixed(2)} W`;\r\n  } else if (paramName.toLowerCase().includes('status') || paramName.toLowerCase().includes('deploy')) {\r\n    return numValue === 1 ? 'Enabled' : 'Disabled';\r\n  }\r\n  \r\n  // Default formatting\r\n  return numValue.toFixed(2);\r\n};\r\n\r\n// Helper function to render temperature trend chart for heater test results\r\nconst renderTemperatureTrend = (heaterData: any, index: number) => {\r\n  if (!heaterData || !heaterData.tempReadings || heaterData.tempReadings.length === 0) {\r\n    return (\r\n      <div style={{ \r\n        padding: '16px', \r\n        textAlign: 'center', \r\n        color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n        fontStyle: 'italic'\r\n      }}>\r\n        No temperature data available\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Generate array for the temperature points\r\n  const tempPoints = heaterData.tempReadings.map((temp: number, idx: number) => ({\r\n    time: idx * heaterData.readingInterval,\r\n    temp: temp\r\n  }));\r\n\r\n  return (\r\n    <div style={{ height: '200px', marginBottom: '20px' }}>\r\n      <div style={{ \r\n        display: 'flex', \r\n        justifyContent: 'space-between',\r\n        marginBottom: '8px',\r\n        fontSize: '13px',\r\n        color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n      }}>\r\n        <span>Initial: {heaterData.initialTemp}°C</span>\r\n        <span>Max: {Math.max(...heaterData.tempReadings).toFixed(1)}°C</span>\r\n        <span>Final: {heaterData.tempReadings[heaterData.tempReadings.length - 1]}°C</span>\r\n      </div>\r\n      <div style={{ \r\n        position: 'relative',\r\n        height: '160px',\r\n        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n        borderRadius: '6px',\r\n        padding: '8px',\r\n        overflow: 'hidden'\r\n      }}>\r\n        <ResponsiveContainer width=\"100%\" height={140}>\r\n          <LineChart\r\n            data={tempPoints}\r\n            margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? \"#374151\" : \"#e5e7eb\"} />\r\n            <XAxis \r\n              dataKey=\"time\" \r\n              label={{ value: 'Time (s)', position: 'bottom' }}\r\n              stroke={isDarkMode ? \"#9ca3af\" : \"#6b7280\"}\r\n            />\r\n            <YAxis \r\n              dataKey=\"temp\"\r\n              label={{ value: 'Temp (°C)', angle: -90, position: 'left' }}\r\n              stroke={isDarkMode ? \"#9ca3af\" : \"#6b7280\"}\r\n            />\r\n            <Tooltip />\r\n            <Line \r\n              type=\"monotone\" \r\n              dataKey=\"temp\" \r\n              stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} \r\n              strokeWidth={2}\r\n              activeDot={{ r: 8 }}\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper to render thermal rise data\r\nconst renderThermalRiseData = (heaterData: any) => {\r\n  if (!heaterData || !heaterData.thermalRise) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginBottom: '16px' }}>\r\n      <div style={{ \r\n        padding: '12px',\r\n        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n        borderRadius: '6px',\r\n        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n        marginBottom: '8px'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span style={{ fontWeight: 'bold' }}>Temperature Rise:</span>\r\n          <span>{heaterData.thermalRise.totalRise.toFixed(1)}°C</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span>Rise Rate:</span>\r\n          <span>{heaterData.thermalRise.riseRate.toFixed(2)}°C/min</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span>Time to 5°C Rise:</span>\r\n          <span>{heaterData.thermalRise.timeTo5C.toFixed(1)}s</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <span>Time to 10°C Rise:</span>\r\n          <span>{heaterData.thermalRise.timeTo10C ? heaterData.thermalRise.timeTo10C.toFixed(1) + 's' : 'N/A'}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper to render power consumption data\r\nconst renderPowerConsumption = (heaterData: any) => {\r\n  if (!heaterData || !heaterData.power) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ marginBottom: '16px' }}>\r\n      <div style={{ \r\n        padding: '12px',\r\n        backgroundColor: isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5',\r\n        borderRadius: '6px',\r\n        border: `1px solid ${isDarkMode ? 'rgba(16, 185, 129, 0.3)' : '#a7f3d0'}`,\r\n        marginBottom: '8px'\r\n      }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span style={{ fontWeight: 'bold' }}>Average Current:</span>\r\n          <span>{heaterData.power.avgCurrent.toFixed(1)} mA</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span>Max Current:</span>\r\n          <span>{heaterData.power.maxCurrent.toFixed(1)} mA</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n          <span>Average Power:</span>\r\n          <span>{heaterData.power.avgPower.toFixed(2)} W</span>\r\n        </div>\r\n        \r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          <span>Total Energy:</span>\r\n          <span>{heaterData.power.totalEnergy.toFixed(2)} Wh</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to render a parameter box with human-readable labels\r\nconst renderParameterBox = (paramPath: string, value: string, passFailStatus?: string) => {\r\n  const readableLabel = getReadableParameterName(paramPath);\r\n  const formattedValue = formatParameterValue(value, paramPath);\r\n\r\n  return (\r\n    <div className={styles.parameterBox} style={{\r\n      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n      borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n    }}>\r\n      <div className={styles.parameterLabel}>\r\n        {readableLabel}\r\n      </div>\r\n      <span className={`${styles.parameterValue} ${\r\n        passFailStatus === \"[PASS]\" ? styles.colorCompleted :\r\n        passFailStatus === \"[FAIL]\" ? styles.colorError :\r\n        ''\r\n      }`}>\r\n        {formattedValue}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nreturn (\r\n  <div className={styles.testPanel}>\r\n    {error && (\r\n      <Alert variant=\"destructive\">\r\n        <p>{error}</p>\r\n      </Alert>\r\n    )}\r\n    \r\n    <div className={styles.tabsContainer} style={{\r\n      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n      padding: '8px',\r\n      borderRadius: '8px',\r\n      marginBottom: '16px',\r\n    }}>\r\n      <button\r\n        onClick={() => setShowHistory(false)}\r\n        className={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\n        style={{\r\n          padding: '8px 16px',\r\n          borderRadius: '6px',\r\n          backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n          color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n          border: 'none',\r\n          fontWeight: 500,\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Current Test\r\n      </button>\r\n      <button\r\n        onClick={() => setShowHistory(true)}\r\n        className={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\n        style={{\r\n          padding: '8px 16px',\r\n          borderRadius: '6px',\r\n          backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n          color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n          border: 'none',\r\n          fontWeight: 500,\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Test History\r\n      </button>\r\n    </div>\r\n    \r\n    {/* Current Test Panel */}\r\n    {!showHistory ? (\r\n      <>\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              HEPS Test Status\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            <div className={styles.progressContainer}>\r\n              <div className={styles.progressLabel}>\r\n                <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                  {currentStep || 'Waiting to start test...'}\r\n                </span>\r\n                <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                  {progress}%\r\n                </span>\r\n              </div>\r\n              <div \r\n                className={styles.progressBar}\r\n                style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n              >\r\n                <div \r\n                  className={styles.progressBarFill}\r\n                  style={{ \r\n                    width: `${progress}%`,\r\n                    background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                  }}\r\n                ></div>\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Display the testing options with human-readable labels */}\r\n            <div style={{ marginBottom: '20px' }}>\r\n              <h4 style={{ \r\n                fontSize: '14px', \r\n                marginBottom: '10px',\r\n                color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n              }}>\r\n                Selected Test Options:\r\n              </h4>\r\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                {options.map((option, index) => (\r\n                  <div key={index} style={{ \r\n                    padding: '6px 10px', \r\n                    backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                    borderRadius: '4px',\r\n                    fontSize: '13px',\r\n                    color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '6px'\r\n                  }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                      <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    {option}\r\n                  </div>\r\n                ))}\r\n                {options.length === 0 && (\r\n                  <div style={{ \r\n                    color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                    fontStyle: 'italic',\r\n                    fontSize: '13px'\r\n                  }}>\r\n                    No specific options selected. Running with defaults.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Connection Status with improved labels */}\r\n            <div \r\n              className={styles.parameterBox}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div className={styles.parameterLabel}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n                </svg>\r\n                Connection Mode\r\n              </div>\r\n              <span className={`${styles.statusBadge} ${\r\n                isForceSimulation || detectedSimulation ? styles.colorWaiting : styles.colorCompleted\r\n              }`}>\r\n                {isForceSimulation || detectedSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n              </span>\r\n            </div>\r\n            \r\n            <div \r\n              className={styles.parameterBox}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                marginTop: '10px'\r\n              }}\r\n            >\r\n              <div className={styles.parameterLabel}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                HEPS System Tests\r\n              </div>\r\n              <span style={{ display: 'flex', gap: '8px' }}>\r\n                {enableCANTest && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    CAN\r\n                  </span>\r\n                )}\r\n                {enableBatteryTest && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    Battery\r\n                  </span>\r\n                )}\r\n                {enableHeaterTest && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    Heaters\r\n                  </span>\r\n                )}\r\n                {enableCurrentTest && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    Current\r\n                  </span>\r\n                )}\r\n                {enablePowerCycle && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    Power Cycle\r\n                  </span>\r\n                )}\r\n                {enableConverterTest && (\r\n                  <span className={`${styles.parameterValue} ${styles.colorCompleted}`}>\r\n                    Converters\r\n                  </span>\r\n                )}\r\n              </span>\r\n            </div>\r\n            \r\n            {/* Run/Re-run Test Button */}\r\n            <button \r\n              onClick={startTest} \r\n              className={styles.button}\r\n              disabled={isRunning}\r\n              style={{ \r\n                backgroundColor: isRunning ? '#9ca3af' :\r\n                  hasRunTest ? '#4f46e5' : '#10b981',\r\n                color: 'white',\r\n                marginTop: '20px'\r\n              }}\r\n            >\r\n              {isRunning ? (\r\n                <>\r\n                  <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  Running Test...\r\n                </>\r\n              ) : hasRunTest ? (\r\n                <>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Re-run Test\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Run Test\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Current Test Results (only shown if we have results) */}\r\n        {results && (\r\n          <div className=\"space-y-4 mt-4\">\r\n            {/* HEPS System Status Card with improved parameter names */}\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                    : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                  color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  HEPS System Status\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <div style={{ \r\n                  display: 'grid', \r\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                  gap: '16px',\r\n                  marginBottom: '16px'\r\n                }}>\r\n                  <div style={{\r\n                    borderRadius: '8px',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    overflow: 'hidden'\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '10px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      color: isDarkMode ? '#d1d5db' : '#374151'\r\n                    }}>\r\n                      Power Status\r\n                    </div>\r\n                    <div style={{\r\n                      padding: '12px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{\r\n                        fontSize: '24px',\r\n                        fontWeight: 'bold',\r\n                        color: results.system.powerStatus === \"1\" ? \r\n                          (isDarkMode ? '#34d399' : '#059669') : \r\n                          (isDarkMode ? '#f87171' : '#dc2626')\r\n                      }}>\r\n                        {results.system.powerStatus === \"1\" ? \"POWERED\" : \"OFF\"}\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '13px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginTop: '4px'\r\n                      }}>\r\n                        Current State\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    borderRadius: '8px',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    overflow: 'hidden'\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '10px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      color: isDarkMode ? '#d1d5db' : '#374151'\r\n                    }}>\r\n                      System Voltage\r\n                    </div>\r\n                    <div style={{\r\n                      padding: '12px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{\r\n                        fontSize: '24px',\r\nfontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#111827'\r\n                      }}>\r\n                        {formatParameterValue(results.system.voltage, 'system.voltage')}\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '13px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginTop: '4px'\r\n                      }}>\r\n                        Bus Voltage\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    borderRadius: '8px',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    overflow: 'hidden'\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '10px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      color: isDarkMode ? '#d1d5db' : '#374151'\r\n                    }}>\r\n                      System Current\r\n                    </div>\r\n                    <div style={{\r\n                      padding: '12px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{\r\n                        fontSize: '24px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#111827'\r\n                      }}>\r\n                        {formatParameterValue(results.system.current, 'system.current')}\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '13px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginTop: '4px'\r\n                      }}>\r\n                        Total Current\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.powerStatus')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {formatParameterValue(results.system.powerStatus, 'system.powerStatus')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          results.system.powerStatus === \"1\" ? styles.colorCompleted : styles.colorError\r\n                        }`}>\r\n                          {results.system.powerStatus === \"1\" ? \"ONLINE\" : \"OFFLINE\"}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.voltage')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {formatParameterValue(results.system.voltage, 'system.voltage')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          parseFloat(results.system.voltage) > 27 && parseFloat(results.system.voltage) < 30\r\n                            ? styles.colorCompleted : styles.colorError\r\n                        }`}>\r\n                          {parseFloat(results.system.voltage) > 27 && parseFloat(results.system.voltage) < 30\r\n                            ? \"NORMAL\" : \"CHECK\"}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.current')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {formatParameterValue(results.system.current, 'system.current')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          parseFloat(results.system.current) < 1500 \r\n                            ? styles.colorCompleted : styles.colorError\r\n                        }`}>\r\n                          {parseFloat(results.system.current) < 1500 \r\n                            ? \"NORMAL\" : \"HIGH\"}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.power')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {formatParameterValue(results.system.power, 'system.power')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          parseFloat(results.system.power) < 50 \r\n                            ? styles.colorCompleted : styles.colorError\r\n                        }`}>\r\n                          {parseFloat(results.system.power) < 50 \r\n                            ? \"NORMAL\" : \"HIGH\"}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.powerCycleCount')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {results.system.powerCycleCount}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>-</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {getReadableParameterName('system.operatingTime')}\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {results.system.operatingTime} min\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>-</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            {/* CAN Test Results with improved parameter names */}\r\n            {(enableCANTest || results.canTest) && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #7c2d12, #9a3412)\" \r\n                      : \"linear-gradient(to right, #ffedd5, #fed7aa)\",\r\n                    color: isDarkMode ? \"#fed7aa\" : \"#9a3412\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    CAN Communication Test\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        Primary CAN Status\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: results.canTest?.primaryResult === \"[PASS]\" ? \r\n                            (isDarkMode ? '#34d399' : '#059669') : \r\n                            (isDarkMode ? '#f87171' : '#dc2626')\r\n                        }}>\r\n                          {results.canTest?.primaryResult === \"[PASS]\" ? \"CONNECTED\" : \"FAILED\"}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          Primary Bus\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        Secondary CAN Status\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: results.canTest?.secondaryResult === \"[PASS]\" ? \r\n                            (isDarkMode ? '#34d399' : '#059669') : \r\n                            (isDarkMode ? '#f87171' : '#dc2626')\r\n                        }}>\r\n                          {results.canTest?.secondaryResult === \"[PASS]\" ? \"CONNECTED\" : \"FAILED\"}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          Secondary Bus\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      CAN Communication Summary\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                      marginBottom: '8px'\r\n                    }}>\r\n                      Primary CAN: {results.canTest?.primaryResult === \"[PASS]\" ? \r\n                        \"Communication established with all controllers. Packet exchange successful.\" : \r\n                        \"Communication error detected. Check connections and retry.\"}\r\n                    </p>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      Secondary CAN: {results.canTest?.secondaryResult === \"[PASS]\" ? \r\n                        \"Redundant bus operational. Failover capability confirmed.\" : \r\n                        \"Secondary bus failure. Redundancy compromised.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Battery Status with improved parameter names */}\r\n            {results.battery && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                      : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                    color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path d=\"M13 7H7v6h6V7z\" />\r\n                      <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Battery Status\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* Battery 1 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('battery.voltage1').split(' ')[0]} 1\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.battery1 === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.battery.voltage1, 'battery.voltage1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.current1, 'battery.current1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.temperature1, 'battery.temperature1')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Battery 2 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('battery.voltage2').split(' ')[0]} 2\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.battery2 === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.battery.voltage2, 'battery.voltage2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.current2, 'battery.current2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.temperature2, 'battery.temperature2')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Battery 3 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('battery.voltage3').split(' ')[0]} 3\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.battery3 === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.battery.voltage3, 'battery.voltage3')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.current3, 'battery.current3')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.battery.temperature3, 'battery.temperature3')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      Battery Status Summary\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      {results.passFailStatus && \r\n                       results.passFailStatus.battery1 === \"[PASS]\" && \r\n                       results.passFailStatus.battery2 === \"[PASS]\" && \r\n                       results.passFailStatus.battery3 === \"[PASS]\" ? \r\n                        \"All batteries are within nominal voltage range (11-16V) and operating at expected temperature.\" : \r\n                        \"One or more batteries are outside nominal voltage range. Check battery health and charging circuit.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Solar Array Status with improved parameter names */}\r\n            {results.solarArray && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #b45309, #d97706)\" \r\n                      : \"linear-gradient(to right, #fef3c7, #fde68a)\",\r\n                    color: isDarkMode ? \"#fef3c7\" : \"#b45309\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M11 3a1 1 0 10-2 0v1a1 1 0 102 0V3zM15.657 5.757a1 1 0 00-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zM18 10a1 1 0 01-1 1h-1a1 1 0 110-2h1a1 1 0 011 1zM5.05 6.464A1 1 0 106.464 5.05l-.707-.707a1 1 0 00-1.414 1.414l.707.707zM5 10a1 1 0 01-1 1H3a1 1 0 110-2h1a1 1 0 011 1zM8 16v-1h4v1a2 2 0 11-4 0zM12 14c.015-.34.208-.646.477-.859a4 4 0 10-4.954 0c.27.213.462.519.476.859h4.002z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Solar Array Status\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* Solar Array 1 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('solarArray.voltage1').split(' ')[0]} 1\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.voltage1, 'solarArray.voltage1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y- Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYNeg1, 'solarArray.tempYNeg1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y+ Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYPos1, 'solarArray.tempYPos1')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Solar Array 2 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('solarArray.voltage2').split(' ')[0]} 2\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.voltage2, 'solarArray.voltage2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y- Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYNeg2, 'solarArray.tempYNeg2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y+ Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYPos2, 'solarArray.tempYPos2')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Solar Array 3 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('solarArray.voltage3').split(' ')[0]} 3\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.voltage3, 'solarArray.voltage3')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y- Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYNeg3, 'solarArray.tempYNeg3')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Y+ Temp:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.solarArray.tempYPos3, 'solarArray.tempYPos3')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Body Mount Temperature */}\r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      {getReadableParameterName('solarArray.tempBodyMount')}\r\n                    </h4>\r\n                    \r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                      <span style={{ \r\n                        fontSize: '14px',\r\n                        color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                      }}>\r\n                        Temperature:\r\n                      </span>\r\n                      <span style={{ \r\n                        fontWeight: 'bold',\r\n                        fontSize: '16px',\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {formatParameterValue(results.solarArray.tempBodyMount, 'solarArray.tempBodyMount')}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* HDRM Deployment Status */}\r\n                  {results.hdrmStatus && (\r\n                    <div style={{\r\n                      padding: '12px',\r\n                      backgroundColor: isDarkMode ? \r\n                        (results.hdrmStatus.deploy1 === \"1\" && results.hdrmStatus.deploy2 === \"1\" ? \r\n                          'rgba(5, 150, 105, 0.1)' : 'rgba(239, 68, 68, 0.1)') : \r\n                        (results.hdrmStatus.deploy1 === \"1\" && results.hdrmStatus.deploy2 === \"1\" ? \r\n                          '#d1fae5' : '#fee2e2'),\r\n                      borderRadius: '6px',\r\n                      border: `1px solid ${isDarkMode ? \r\n                        (results.hdrmStatus.deploy1 === \"1\" && results.hdrmStatus.deploy2 === \"1\" ?\r\n                          'rgba(16, 185, 129, 0.2)' : 'rgba(239, 68, 68, 0.2)') :\r\n                        (results.hdrmStatus.deploy1 === \"1\" && results.hdrmStatus.deploy2 === \"1\" ?\r\n                          '#a7f3d0' : '#fecaca')}`\r\n                    }}>\r\n                      <h4 style={{ \r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        marginBottom: '8px',\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        HDRM Deployment Status\r\n                      </h4>\r\n                      \r\n                      <div style={{ \r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex',\r\n                          flexDirection: 'column',\r\n                          alignItems: 'center'\r\n                        }}>\r\n                          <span style={{ \r\n                            color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            {getReadableParameterName('hdrmStatus.deploy1')}\r\n                          </span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.hdrmStatus.deploy1 === \"1\" ?\r\n                              (isDarkMode ? '#34d399' : '#059669') :\r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.hdrmStatus.deploy1, 'hdrmStatus.deploy1')}\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        <div style={{ \r\n                          display: 'flex',\r\n                          flexDirection: 'column',\r\n                          alignItems: 'center'\r\n                        }}>\r\n                          <span style={{ \r\n                            color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            {getReadableParameterName('hdrmStatus.deploy2')}\r\n                          </span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.hdrmStatus.deploy2 === \"1\" ?\r\n                              (isDarkMode ? '#34d399' : '#059669') :\r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.hdrmStatus.deploy2, 'hdrmStatus.deploy2')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* OBN (On-Board Network) Status with improved parameter names */}\r\n            {results.obn && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #6d28d9, #7c3aed)\" \r\n                      : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                    color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    OBN (On-Board Network) Status\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* OBN 1 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('obn.voltage1').split(' ')[0]} 1\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.obn1Voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.obn.voltage1, 'obn.voltage1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.obn.current1, 'obn.current1')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* OBN 2 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('obn.voltage2').split(' ')[0]} 2\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.obn2Voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.obn.voltage2, 'obn.voltage2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.obn.current2, 'obn.current2')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* AUX Voltage */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('obn.auxVoltage')}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.auxVoltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.obn.auxVoltage, 'obn.auxVoltage')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      OBN Status Summary\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      {results.passFailStatus && \r\n                       results.passFailStatus.obn1Voltage === \"[PASS]\" && \r\n                       results.passFailStatus.obn2Voltage === \"[PASS]\" && \r\n                       results.passFailStatus.auxVoltage === \"[PASS]\" ? \r\n                        \"All OBN voltages are within nominal range. Network communication links operational.\" : \r\n                        \"One or more OBN voltages are outside nominal range. Check power supply and network connections.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* BCR (Battery Charging Regulator) with improved parameter names */}\r\n            {results.bcr && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #0f766e, #0d9488)\" \r\n                      : \"linear-gradient(to right, #ccfbf1, #99f6e4)\",\r\n                    color: isDarkMode ? \"#99f6e4\" : \"#0f766e\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    {getReadableParameterName('bcr.current1').split(' ')[0]} (Battery Charging Regulator)\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* BCR 1 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('bcr.current1').split(' ')[0]} 1\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.current1, 'bcr.current1')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.temp1, 'bcr.temp1')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* BCR 2 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('bcr.current2').split(' ')[0]} 2\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.current2, 'bcr.current2')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.temp2, 'bcr.temp2')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* BCR 3 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('bcr.current3').split(' ')[0]} 3\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.current3, 'bcr.current3')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Temperature:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.bcr.temp3, 'bcr.temp3')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* PDM Temperature with improved parameter names */}\r\n            {results.pdmTemperature && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #4f46e5, #4338ca)\" \r\n                      : \"linear-gradient(to right, #e0e7ff, #c7d2fe)\",\r\n                    color: isDarkMode ? \"#c7d2fe\" : \"#4338ca\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    PDM Temperature\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* PDM 1 Temperature */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('pdmTemperature.pdm1')}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: isDarkMode ? '#d1d5db' : '#111827'\r\n                        }}>\r\n                          {formatParameterValue(results.pdmTemperature.pdm1, 'pdmTemperature.pdm1')}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          PCB Temperature\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* PDM 2 Temperature */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('pdmTemperature.pdm2')}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: isDarkMode ? '#d1d5db' : '#111827'\r\n                        }}>\r\n                          {formatParameterValue(results.pdmTemperature.pdm2, 'pdmTemperature.pdm2')}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          PCB Temperature\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\nPDM Temperature Status\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      {parseFloat(results.pdmTemperature.pdm1) < 60 && parseFloat(results.pdmTemperature.pdm2) < 60 ?\r\n                        \"PDM temperatures are within normal operating range (< 60°C).\" :\r\n                        \"One or more PDM temperatures exceeded nominal range. Check thermal conditions.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Converters with improved parameter names */}\r\n            {results.converters && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #0f766e, #0d9488)\" \r\n                      : \"linear-gradient(to right, #ccfbf1, #99f6e4)\",\r\n                    color: isDarkMode ? \"#99f6e4\" : \"#0f766e\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Power Converters\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <h4 style={{ \r\n                    fontSize: '16px',\r\n                    fontWeight: 'bold',\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Converter 1 (PSM1)\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '24px'\r\n                  }}>\r\n                    {/* Using renderParameterBox to display parameters with human-readable names */}\r\n                    {renderParameterBox(\r\n                      'converters.hdrm12v1_voltage', \r\n                      results.converters.hdrm12v1_voltage, \r\n                      results.passFailStatus?.hdrm12v1_voltage\r\n                    )}\r\n                    \r\n                    {renderParameterBox(\r\n                      'converters.v5_1_voltage', \r\n                      results.converters.v5_1_voltage, \r\n                      results.passFailStatus?.v5_1_voltage\r\n                    )}\r\n                    \r\n                    {renderParameterBox(\r\n                      'converters.v12_1_voltage', \r\n                      results.converters.v12_1_voltage, \r\n                      results.passFailStatus?.v12_1_voltage\r\n                    )}\r\n                    \r\n                    {renderParameterBox(\r\n                      'converters.v15_voltage', \r\n                      results.converters.v15_voltage, \r\n                      results.passFailStatus?.v15_voltage\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <h4 style={{ \r\n                    fontSize: '16px',\r\n                    fontWeight: 'bold',\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Converter 2 (PSM2)\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {/* Using renderParameterBox for consistent display */}\r\n                    {renderParameterBox(\r\n                      'converters.hdrm12v2_voltage', \r\n                      results.converters.hdrm12v2_voltage, \r\n                      results.passFailStatus?.hdrm12v2_voltage\r\n                    )}\r\n                    \r\n                    {renderParameterBox(\r\n                      'converters.v5_2_voltage', \r\n                      results.converters.v5_2_voltage, \r\n                      results.passFailStatus?.v5_2_voltage\r\n                    )}\r\n                    \r\n                    {renderParameterBox(\r\n                      'converters.v12_2_voltage', \r\n                      results.converters.v12_2_voltage, \r\n                      results.passFailStatus?.v12_2_voltage\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      Converter Status Summary\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      {Object.entries(results.passFailStatus || {})\r\n                        .filter(([key]) => key.includes('voltage'))\r\n                        .every(([, value]) => value === \"[PASS]\") ?\r\n                        \"All converters operating within voltage specifications. Temperature readings normal.\" :\r\n                        \"One or more converters outside voltage specifications. Check power supply and load conditions.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Loads with improved parameter names */}\r\n            {results.loads && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #be123c, #e11d48)\" \r\n                      : \"linear-gradient(to right, #ffe4e6, #fecdd3)\",\r\n                    color: isDarkMode ? \"#fecdd3\" : \"#be123c\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path d=\"M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z\" />\r\n                      <path d=\"M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707l-2-2A1 1 0 0015 7h-1z\" />\r\n                    </svg>\r\n                    Load Status\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '24px'\r\n                  }}>\r\n                    {/* OBC-1 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('loads.obc1_voltage').split(' ')[0]}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.obc1_voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.loads.obc1_voltage, 'loads.obc1_voltage')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.loads.obc1_current, 'loads.obc1_current')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* OBC-2 */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('loads.obc2_voltage').split(' ')[0]}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.obc2_voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.loads.obc2_voltage, 'loads.obc2_voltage')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.loads.obc2_current, 'loads.obc2_current')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* S-Band */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        {getReadableParameterName('loads.sband_voltage').split(' ')[0]}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.sband_voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.loads.sband_voltage, 'loads.sband_voltage')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.loads.sband_current, 'loads.sband_current')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* UHF */}\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n{getReadableParameterName('loads.uhf_voltage').split(' ')[0]}\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          marginBottom: '8px'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Voltage:</span>\r\n                          <span style={{ \r\n                            fontWeight: 'bold',\r\n                            color: results.passFailStatus?.uhf_voltage === \"[PASS]\" ? \r\n                              (isDarkMode ? '#34d399' : '#059669') : \r\n                              (isDarkMode ? '#f87171' : '#dc2626')\r\n                          }}>\r\n                            {formatParameterValue(results.loads.uhf_voltage, 'loads.uhf_voltage')}\r\n                          </span>\r\n                        </div>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between'\r\n                        }}>\r\n                          <span style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>Current:</span>\r\n                          <span style={{ fontWeight: 'bold' }}>\r\n                            {formatParameterValue(results.loads.uhf_current, 'loads.uhf_current')}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderRadius: '6px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      Load Status Summary\r\n                    </h4>\r\n                    \r\n                    <p style={{ \r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      {results.passFailStatus?.obc1_voltage === \"[PASS]\" && \r\n                       results.passFailStatus?.obc2_voltage === \"[PASS]\" &&\r\n                       results.passFailStatus?.sband_voltage === \"[PASS]\" &&\r\n                       results.passFailStatus?.uhf_voltage === \"[PASS]\" ?\r\n                        \"All loads receiving correct voltage. Current consumption within expected ranges.\" :\r\n                        \"One or more loads receiving incorrect voltage. Check power distribution system.\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Heater Status Summary Card with improved parameter names */}\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                    : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                  color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Heater Status Summary\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <div style={{ \r\n                  display: 'grid', \r\n                  gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n                  gap: '16px',\r\n                  marginBottom: '16px'\r\n                }}>\r\n                  {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                    <div key={index} style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        overflow: 'hidden'\r\n                      }}>\r\n                        <div style={{\r\n                          padding: '8px',\r\n                          backgroundColor: heater.status === \"1\" ? \r\n                            (isDarkMode ? 'rgba(5, 150, 105, 0.2)' : '#d1fae5') : \r\n                            (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                          textAlign: 'center',\r\n                          fontSize: '14px',\r\n                          fontWeight: 'bold',\r\n                          color: heater.status === \"1\" ? \r\n                            (isDarkMode ? '#34d399' : '#059669') : \r\n                            (isDarkMode ? '#f87171' : '#dc2626')\r\n                        }}>\r\n                          {getReadableParameterName(`heaters[${index}].status`).split(' ')[0]} {index + 1}\r\n                        </div>\r\n                        <div style={{\r\n                          padding: '12px',\r\n                          textAlign: 'center'\r\n                        }}>\r\n                          <div style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: isDarkMode ? '#d1d5db' : '#111827'\r\n                          }}>\r\n                            {formatParameterValue(heater.temperature, `heaters[${index}].temperature`)}\r\n                          </div>\r\n                          <div style={{\r\n                            fontSize: '13px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginTop: '4px'\r\n                          }}>\r\n                            {formatParameterValue(heater.current, `heaters[${index}].current`)}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Temperature</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Current</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n                      {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                        <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            {getReadableParameterName(`heaters[${index}].status`).split(' ')[0]} {index + 1}\r\n                          </td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            <span className={`${styles.statusBadge} ${\r\n                              heater.status === \"1\" ? styles.colorCompleted : styles.colorError\r\n                            }`}>\r\n                              {formatParameterValue(heater.status, `heaters[${index}].status`)}\r\n                            </span>\r\n                          </td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            {formatParameterValue(heater.temperature, `heaters[${index}].temperature`)}\r\n                          </td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            {formatParameterValue(heater.current, `heaters[${index}].current`)}\r\n                          </td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n{formatParameterValue(heater.power, `heaters[${index}].power`)}\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Heater Test Results (Only shown if heater tests were enabled and run) with improved parameter names */}\r\n              {enableHeaterTest && results.heaterTests && results.heaterTests.length > 0 && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n                        : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                      color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Heater Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    {results.heaterTests.map((heaterTest: any, index: number) => (\r\n                      <div key={index} style={{ \r\n                        marginBottom: '20px', \r\n                        padding: '16px',\r\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        borderRadius: '8px',\r\n                        backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#fff'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          alignItems: 'center',\r\n                          marginBottom: '12px'\r\n                        }}>\r\n                          <h4 style={{ \r\n                            fontSize: '16px', \r\n                            fontWeight: 'bold',\r\n                            color: isDarkMode ? '#d1d5db' : '#111827',\r\n                            margin: 0\r\n                          }}>\r\n                            {getReadableParameterName(`heaters[${index}].status`).split(' ')[0]} {index + 1} Test Results\r\n                          </h4>\r\n                          <span className={`${styles.statusBadge} ${\r\n                            heaterTest.testResult === \"PASS\" ? styles.colorCompleted : styles.colorError\r\n                          }`}>\r\n                            {heaterTest.testResult}\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* Temperature trend chart */}\r\n                        {renderTemperatureTrend(heaterTest, index)}\r\n                        \r\n                        {/* Thermal rise data */}\r\n                        {renderThermalRiseData(heaterTest)}\r\n                        \r\n                        {/* Power consumption data */}\r\n                        {renderPowerConsumption(heaterTest)}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Current Test Results (if enabled) with improved parameter names */}\r\n              {enableCurrentTest && results.currentTest && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #713f12, #854d0e)\" \r\n                        : \"linear-gradient(to right, #fffbeb, #fef3c7)\",\r\n                      color: isDarkMode ? \"#fef3c7\" : \"#854d0e\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Current Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      marginBottom: '20px', \r\n                      padding: '16px',\r\n                      backgroundColor: results.currentTest.testResult === \"PASS\" ? \r\n                        (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                        (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                      borderRadius: '8px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold',\r\n                        color: results.currentTest.testResult === \"PASS\" ? \r\n                          (isDarkMode ? '#34d399' : '#059669') : \r\n                          (isDarkMode ? '#f87171' : '#dc2626'),\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {results.currentTest.testResult}\r\n                      </div>\r\n                      <div style={{ \r\n                        color: isDarkMode ? '#d1d5db' : '#374151',\r\n                        fontSize: '14px'\r\n                      }}>\r\n                        Current measurements {results.currentTest.testResult === \"PASS\" ? \"within\" : \"outside\"} expected range\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <table \r\n                      className={styles.table}\r\n                      style={{\r\n                        color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                      }}\r\n                    >\r\n                      <thead \r\n                        className={styles.tableHeader}\r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                        }}\r\n                      >\r\n                        <tr>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Expected (mA)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Measured (mA)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Deviation (%)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Result</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className={styles.tableBody}>\r\n                        {results.currentTest.heaterResults && results.currentTest.heaterResults.map((result: any, index: number) => (\r\n                          <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                              {getReadableParameterName(`heaters[${index}].status`).split(' ')[0]} {index + 1}\r\n                            </td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.expectedCurrent}</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.measuredCurrent}</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.deviation.toFixed(2)}%</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                              <span className={`${styles.statusBadge} ${\r\n                                result.inRange ? styles.colorCompleted : styles.colorError\r\n                              }`}>\r\n                                {result.inRange ? \"PASS\" : \"FAIL\"}\r\n                              </span>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                    \r\n                    <div style={{\r\n                      marginTop: '16px',\r\n                      padding: '12px',\r\n                      backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#f9fafb',\r\n                      borderRadius: '6px',\r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Test Summary:</div>\r\n                      <div>• Test Duration: {results.currentTest.testDuration} s</div>\r\n                      <div>• Samples Collected: {results.currentTest.sampleCount}</div>\r\n                      <div>• Maximum Deviation: {results.currentTest.maxDeviation.toFixed(2)}%</div>\r\n                      <div>• Tolerance Range: ±{results.currentTest.tolerance}%</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Power Cycle Test Results (if enabled) with improved parameter names */}\r\n              {enablePowerCycle && results.powerCycleTest && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #164e63, #0e7490)\" \r\n                        : \"linear-gradient(to right, #ecfeff, #cffafe)\",\r\n                      color: isDarkMode ? \"#cffafe\" : \"#0e7490\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path d=\"M13 7H7v6h6V7z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Power Cycle Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      marginBottom: '20px', \r\n                      padding: '16px',\r\n                      backgroundColor: results.powerCycleTest.testResult === \"PASS\" ? \r\n                        (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                        (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                      borderRadius: '8px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold',\r\n                        color: results.powerCycleTest.testResult === \"PASS\" ? \r\n                          (isDarkMode ? '#34d399' : '#059669') : \r\n                          (isDarkMode ? '#f87171' : '#dc2626'),\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {results.powerCycleTest.testResult}\r\n                      </div>\r\n                      <div style={{ \r\n                        color: isDarkMode ? '#d1d5db' : '#374151',\r\n                        fontSize: '14px'\r\n                      }}>\r\n                        Power Cycle Test {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles} cycles completed\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <table \r\n                      className={styles.table}\r\n                      style={{\r\n                        color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                      }}\r\n                    >\r\n                      <thead \r\n                        className={styles.tableHeader}\r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                        }}\r\n                      >\r\n                        <tr>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className={styles.tableBody}>\r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycles Completed</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles}\r\n                          </td>\r\n                        </tr>\r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycle Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.cycleTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power On Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOnTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Off Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOffTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Total Test Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.totalTestTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Failures</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.failures}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Pass/Fail Status Summary with improved parameter names */}\r\n              {results.passFailStatus && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                        : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                      color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Pass/Fail Status Summary\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      display: 'grid', \r\n                      gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', \r\n                      gap: '16px',\r\n                      marginBottom: '24px'\r\n                    }}>\r\n                      {/* Count pass/fail statuses */}\r\n                      {(() => {\r\n                        const totalTests = Object.values(results.passFailStatus).length;\r\n                        const passedTests = Object.values(results.passFailStatus).filter(status => status === \"[PASS]\").length;\r\n                        const failedTests = totalTests - passedTests;\r\n                        const passRate = totalTests > 0 ? (passedTests / totalTests) * 100 : 0;\r\n                        \r\n                        return (\r\n                          <>\r\n                            <div style={{\r\n                              borderRadius: '8px',\r\n                              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                              overflow: 'hidden'\r\n                            }}>\r\n                              <div style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: isDarkMode ? '#d1d5db' : '#374151'\r\n                              }}>\r\n                                Test Results Summary\r\n                              </div>\r\n                              <div style={{\r\n                                padding: '12px',\r\n                                textAlign: 'center'\r\n                              }}>\r\n                                <div style={{\r\n                                  fontSize: '24px',\r\n                                  fontWeight: 'bold',\r\n                                  color: passRate >= 90 ? \r\n                                    (isDarkMode ? '#34d399' : '#059669') : \r\n                                    passRate >= 70 ?\r\n                                      (isDarkMode ? '#fbbf24' : '#d97706') :\r\n                                      (isDarkMode ? '#f87171' : '#dc2626')\r\n                                }}>\r\n                                  {passRate.toFixed(1)}%\r\n                                </div>\r\n                                <div style={{\r\n                                  fontSize: '13px',\r\n                                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                                  marginTop: '4px'\r\n                                }}>\r\n                                  Pass Rate\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div style={{\r\n                              borderRadius: '8px',\r\n                              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                              overflow: 'hidden'\r\n                            }}>\r\n                              <div style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: isDarkMode ? '#d1d5db' : '#374151'\r\n                              }}>\r\n                                Passed Tests\r\n                              </div>\r\n                              <div style={{\r\n                                padding: '12px',\r\n                                textAlign: 'center'\r\n                              }}>\r\n                                <div style={{\r\n                                  fontSize: '24px',\r\n                                  fontWeight: 'bold',\r\n                                  color: isDarkMode ? '#34d399' : '#059669'\r\n                                }}>\r\n                                  {passedTests}\r\n                                </div>\r\n                                <div style={{\r\n                                  fontSize: '13px',\r\n                                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                                  marginTop: '4px'\r\n                                }}>\r\n                                  of {totalTests} tests\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div style={{\r\n                              borderRadius: '8px',\r\n                              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                              overflow: 'hidden'\r\n                            }}>\r\n                              <div style={{\r\n                                padding: '10px',\r\n                                backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                fontSize: '14px',\r\n                                fontWeight: 'bold',\r\n                                color: isDarkMode ? '#d1d5db' : '#374151'\r\n                              }}>\r\n                                Failed Tests\r\n                              </div>\r\n                              <div style={{\r\n                                padding: '12px',\r\n                                textAlign: 'center'\r\n                              }}>\r\n                                <div style={{\r\n                                  fontSize: '24px',\r\n                                  fontWeight: 'bold',\r\n                                  color: failedTests === 0 ?\r\n                                    (isDarkMode ? '#34d399' : '#059669') :\r\n                                    (isDarkMode ? '#f87171' : '#dc2626')\r\n                                }}>\r\n                                  {failedTests}\r\n                                </div>\r\n                                <div style={{\r\n                                  fontSize: '13px',\r\n                                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                                  marginTop: '4px'\r\n                                }}>\r\n                                  of {totalTests} tests\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          </>\r\n                        );\r\n                      })()}\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                      padding: '12px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '6px',\r\n                      marginBottom: '16px'\r\n                    }}>\r\n                      <h4 style={{ \r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        marginBottom: '8px',\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        Test Status Details\r\n                      </h4>\r\n                      \r\n                      <div style={{ \r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n                        gap: '16px'\r\n                      }}>\r\n                        {Object.entries(results.passFailStatus).map(([key, value]) => (\r\n                          <div key={key} style={{ \r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            alignItems: 'center',\r\n                            padding: '8px 12px',\r\n                            backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.3)' : 'rgba(249, 250, 251, 0.5)',\r\n                            borderRadius: '4px',\r\n                            marginBottom: '8px'\r\n                          }}>\r\n                            <span style={{ \r\n                              color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                            }}>\r\n                              {getReadableParameterName(key)}\r\n                            </span>\r\n                            <span className={`${styles.statusBadge} ${\r\n                              value === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                            }`}>\r\n                              {value === \"[PASS]\" ? \"PASS\" : \"FAIL\"}\r\n                            </span>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Raw Parameter Values Section - add this after the main results cards */}\r\n{results && (\r\n  <div className={styles.card} style={{\r\n    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n    marginTop: '20px'\r\n  }}>\r\n    <div className={styles.cardHeader} style={{\r\n      backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n      borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n      background: isDarkMode \r\n        ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n        : \"linear-gradient(to right, #dbeafe, #eff6ff)\",\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n      alignItems: 'center',\r\n      cursor: 'pointer'\r\n    }}\r\n    onClick={() => setShowParameters(!showParameters)}\r\n    >\r\n      <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n          <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n        Raw Parameter Values\r\n      </h3>\r\n      <svg \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        width=\"20\" \r\n        height=\"20\" \r\n        viewBox=\"0 0 20 20\" \r\n        fill=\"currentColor\"\r\n        style={{ \r\n          transform: showParameters ? 'rotate(180deg)' : 'rotate(0deg)',\r\n          transition: 'transform 0.3s ease'\r\n        }}\r\n      >\r\n        <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </div>\r\n    \r\n    {showParameters && (\r\n      <div className={styles.cardContent}>\r\n        <div style={{ marginBottom: '16px' }}>\r\n          <label style={{ \r\n            display: 'block',\r\n            marginBottom: '8px',\r\n            color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n            fontWeight: 500\r\n          }}>\r\n            Select Parameter Group:\r\n          </label>\r\n          <select\r\n            value={selectedParameterGroup}\r\n            onChange={(e) => setSelectedParameterGroup(e.target.value)}\r\n            style={{\r\n              width: '100%',\r\n              padding: '8px 12px',\r\n              borderRadius: '6px',\r\n              backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n              color: isDarkMode ? '#e5e7eb' : '#111827',\r\n              fontSize: '14px'\r\n            }}\r\n          >\r\n            {Object.keys(hepsParameters).map(key => (\r\n              <option key={key} value={key}>\r\n                {getParameterGroupName(key)}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <HEPSParameterDisplay \r\n          parameters={hepsParameters[selectedParameterGroup as keyof typeof hepsParameters]}\r\n          results={results}\r\n          groupName={getParameterGroupName(selectedParameterGroup)}\r\n          isDarkMode={isDarkMode}\r\n        />\r\n        \r\n        <div style={{\r\n          padding: '12px',\r\n          backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#f9fafb',\r\n          borderRadius: '6px',\r\n          fontSize: '14px',\r\n          color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n        }}>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </div>\r\n)}\r\n              \r\n              {/* Generate Report Button */}\r\n              <div className=\"flex justify-end mt-6\">\r\n                <button \r\n                  onClick={generateReport}\r\n                  className={styles.reportButton}\r\n                  style={{\r\n                    backgroundColor: \"#10b981\",\r\n                    color: \"white\"\r\n                  }}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Generate Report\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n       /* Test History Panel */\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              background: isDarkMode \r\n                ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              UHF Test History\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            {historyLoading ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n              }}>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                <p>Loading test history...</p>\r\n              </div>\r\n            ) : testHistory.length === 0 ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                fontStyle: 'italic'\r\n              }}>\r\n                <p>No test history available for this profile.</p>\r\n                <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                  Run a test to start building your history.\r\n                </p>\r\n                \r\n                {!profileId && (\r\n                  <div style={{\r\n                    marginTop: '16px',\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                    borderRadius: '6px',\r\n                    color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Visualization Controls */}\r\n                <div style={{ marginBottom: '16px' }}>\r\n                  <label style={{ \r\n                    display: 'block',\r\n                    marginBottom: '8px',\r\n                    color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                    fontWeight: 500\r\n                  }}>\r\n                    Select Metric:\r\n                  </label>\r\n                  <select\r\n                    value={selectedMetric}\r\n                    onChange={(e) => setSelectedMetric(e.target.value)}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '8px 12px',\r\n                      borderRadius: '6px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    {metricOptions.map(option => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Use TestHistoryChart component */}\r\n                <div style={{\r\n                  height: '300px',\r\n                  marginBottom: '20px',\r\n                  backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                  padding: '16px',\r\n                  borderRadius: '8px'\r\n                }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    {metricOptions.find(m => m.value === selectedMetric)?.label} Trend\r\n                  </h4>\r\n                  \r\n                  <TestHistoryChart\r\n                    data={testHistory}\r\n                    metricPath={selectedMetric}\r\n                    metricLabel={metricOptions.find(m => m.value === selectedMetric)?.label || ''}\r\n                    isDarkMode={isDarkMode}\r\n                  />\r\n                </div>\r\n\r\n                {/* Multi-select controls */}\r\n                <div style={{ \r\n                  marginTop: '20px', \r\n                  marginBottom: '12px', \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <div>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      marginBottom: '6px'\r\n                    }}>\r\n                      Test History Records\r\n                    </h4>\r\n                  </div>\r\n                  \r\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    {/* Toggle button for multi-select mode */}\r\n                    <button\r\n                      onClick={toggleMultiSelectMode}\r\n                      style={{\r\n                        backgroundColor: isMultiSelectMode \r\n                          ? (isDarkMode ? '#4f46e5' : '#6366f1') \r\n                          : (isDarkMode ? '#1f2937' : '#f3f4f6'),\r\n                        color: isMultiSelectMode \r\n                          ? 'white' \r\n                          : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        padding: '6px 12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 500,\r\n                        cursor: 'pointer',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {isMultiSelectMode ? 'Exit Selection Mode' : 'Select Items'}\r\n                    </button>\r\n                    \r\n                    {/* Only show these controls when in multi-select mode */}\r\n                    {isMultiSelectMode && (\r\n                      <>\r\n                        <button\r\n                          onClick={selectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Select All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deselectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Deselect All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deleteSelectedItems}\r\n                          disabled={selectedItems.length === 0}\r\n                          style={{\r\n                            backgroundColor: selectedItems.length === 0 \r\n                              ? (isDarkMode ? '#6b7280' : '#9ca3af') \r\n                              : (isDarkMode ? '#dc2626' : '#ef4444'),\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 12px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: selectedItems.length === 0 ? 'not-allowed' : 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                          }}\r\n                        >\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                            <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          Delete Selected ({selectedItems.length})\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Information panel before the table */}\r\n                <div style={{ marginBottom: '20px', padding: '12px', borderRadius: '8px', backgroundColor: isDarkMode ? '#1e293b' : '#f0f9ff', border: '1px solid', borderColor: isDarkMode ? '#475569' : '#bfdbfe' }}>\r\n                  <h4 style={{ marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#1e40af', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n                    </svg>\r\n                    Test History Information\r\n                  </h4>\r\n                  <p style={{ fontSize: '14px', color: isDarkMode ? '#cbd5e1' : '#334155' }}>\r\n                    This chart shows only <strong>real test data</strong> from actual hardware tests. \r\n                    Simulated test results are not included in this history or visualization.\r\n                  </p>\r\n                  {testHistory.length === 0 && (\r\n                    <p style={{ marginTop: '10px', fontSize: '14px', color: isDarkMode ? '#fb923c' : '#c2410c', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                      </svg>\r\n                      No real test data is available yet. Run tests in real mode (not simulation) to collect actual data.\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Use TestHistoryTable component */}\r\n                <TestHistoryTable\r\n                  testHistory={testHistory}\r\n                  isDarkMode={isDarkMode}\r\n                  onViewDetails={(item) => setSelectedHistoryItem(item)}\r\n                />\r\n\r\n                {/* Additional UHF Metrics Summary */}\r\n                <div style={{ marginTop: '20px' }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Key Metrics Summary\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                    gap: '12px'\r\n                  }}>\r\n                    {/* Metric Card: Average Board Temperature */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average Board Temperature\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.boardTemperature'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} °C`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Average PA Temperature */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average PA Temperature\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.paTemperature'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} °C`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Average RSSI */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average RSSI\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'telemetry.lastRssi'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(1)}`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Test Success Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Overall Success Rate\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          if (testHistory.length === 0) return 'N/A';\r\n                          \r\n                          const successes = testHistory.filter(item => item.status === 'completed').length;\r\n                          const successRate = (successes / testHistory.length) * 100;\r\n                          \r\n                          return `${successRate.toFixed(0)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n  \r\n                {/* Export History Button */}\r\n                <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'flex-end', gap: '10px', flexWrap: 'wrap' }}>\r\n                  {/* Clear All History Button */}\r\n                  <button \r\n                    onClick={clearAllTestHistory}\r\n                    style={{\r\n                      backgroundColor: '#dc2626',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clear All History\r\n                  </button>\r\n                  \r\n                  {/* Clean Up Simulated Data Button */}\r\n                  <button \r\n                    onClick={() => cleanupSimulatedData()}\r\n                    style={{\r\n                      backgroundColor: '#ef4444',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clean Up Simulated Data\r\n                  </button>\r\n                  \r\n                  {/* Limit History Button */}\r\n                  <button \r\n                    onClick={() => limitTestHistory(30)}\r\n                    style={{\r\n                      backgroundColor: '#3b82f6',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Limit History (30 Records)\r\n                  </button>\r\n                  \r\n                  <button \r\n                    onClick={() => {\r\n                      // Implement history export functionality\r\n                      const historyData = JSON.stringify(testHistory, null, 2);\r\n                      const blob = new Blob([historyData], { type: 'application/json' });\r\n                      const url = URL.createObjectURL(blob);\r\n                      const a = document.createElement('a');\r\n                      a.href = url;\r\n                      a.download = `uhf_test_history_${profileId || 'unknown'}.json`;\r\n                      document.body.appendChild(a);\r\n                      a.click();\r\n                      document.body.removeChild(a);\r\n                      URL.revokeObjectURL(url);\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: '#10b981',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Export Test History\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Status Messages for Cleanup and Limit Operations */}\r\n                {(cleanupMessage || limitMessage) && (\r\n                  <div style={{ \r\n                    marginTop: '12px',\r\n                    padding: '12px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    {cleanupMessage && (\r\n                      <div style={{ \r\n                        color: cleanupMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c'),\r\n                        marginBottom: limitMessage ? '8px' : '0'\r\n                      }}>\r\n                        {cleanupMessage}\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {limitMessage && (\r\n                      <div style={{ \r\n                        color: limitMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c')\r\n                      }}>\r\n                        {limitMessage}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Test Details Modal */}\r\n      {selectedHistoryItem && (\r\n        <TestDetailsModal\r\n          test={selectedHistoryItem}\r\n          onClose={() => setSelectedHistoryItem(null)}\r\n          isDarkMode={isDarkMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}