{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/OBC2TestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/OBC2TestPanel.tsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\n\r\n// Import the OBC2-specific functions\r\nimport { runOBC2Checkout } from '@/services/checkout/obc2Checkout';\r\nimport { generateOBC2Report } from '@/services/reports/obc2Report';\r\n\r\n// Import test history components\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface OBC2TestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Update your TestHistoryItem interface definition to include is_simulated\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    voltage?: {\r\n      sdCard?: any;\r\n      flash?: any;\r\n      eeprom?: any;\r\n      payload?: any;\r\n      uhf?: any;\r\n    };\r\n    can?: {\r\n      primary?: any;\r\n      secondary?: any;\r\n    };\r\n    memory?: {  // Add memory property to the interface\r\n      sdCard?: {\r\n        result?: string;\r\n        before?: any;\r\n        after?: any;\r\n      };\r\n      eeprom?: {\r\n        result?: string;\r\n        before?: any;\r\n        after?: any;\r\n      };\r\n    };\r\n    testedOptions?: string[];\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean;\r\n}\r\n\r\nexport const OBC2TestPanel: React.FC<OBC2TestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('voltage.sdCard.value');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  \r\n  // Add state variables for messages\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  \r\n  // Determine if memory options are enabled\r\n  const enableSdCard = options.includes('SD Card');\r\n  const enableEeprom = options.includes('EEPROM');\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n  \r\n  // Available metrics for visualization\r\n  const metricOptions = [\r\n    { label: 'SD Card Voltage', value: 'voltage.sdCard.value' },\r\n    { label: 'Flash Voltage', value: 'voltage.flash.value' },\r\n    { label: 'EEPROM Voltage', value: 'voltage.eeprom.value' },\r\n    { label: 'Payload Voltage', value: 'voltage.payload.value' },\r\n    { label: 'UHF Voltage', value: 'voltage.uhf.value' }\r\n  ];\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setDetectedSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  // Add function to fetch test history\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component OBC-2`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=OBC-2`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have voltage values to be a legitimate test\r\n            const hasVoltageData = item.results.voltage && \r\n              (item.results.voltage.sdCard || item.results.voltage.flash || \r\n               item.results.voltage.eeprom || item.results.voltage.payload || \r\n               item.results.voltage.uhf);\r\n            \r\n            // Must have some CAN data\r\n            const hasCanData = item.results.can && \r\n              (item.results.can.primary || item.results.can.secondary);\r\n            \r\n            // Consider it a real test if it has both voltage and CAN data\r\n            return hasVoltageData && hasCanData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `obc2_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Add function to save test result to history\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform our standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                      (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"OBC-2\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: `SD Card: ${enableSdCard ? \"Enabled\" : \"Disabled\"}, EEPROM: ${enableEeprom ? \"Enabled\" : \"Disabled\"}`,\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `obc2_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"OBC-2\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting OBC-2 Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for common parameters\r\n              if (param.includes(\"FW_Ver\")) {\r\n                const version = param.includes(\"Major\") ? \"1\" : \r\n                               param.includes(\"Minor\") ? \"2\" : \"3\";\r\n                return `${param}=${version}`;\r\n              } else if (param.includes(\"3V3\") || param.includes(\"3v3\")) {\r\n                // Voltage values in mV\r\n                return `${param}=${3300 + Math.floor(Math.random() * 100)}`;\r\n              } else if (param.includes(\"temp\") || param.includes(\"Temp\")) {\r\n                // Temperature values\r\n                return `${param}=${20 + Math.floor(Math.random() * 10)}`;\r\n              } else if (param.includes(\"Time\")) {\r\n                // Time values\r\n                return `${param}=${new Date().toISOString()}`;\r\n              } else if (param.includes(\"Uptime\")) {\r\n                // Uptime values\r\n                return `${param}=${3600 + Math.floor(Math.random() * 3600)}`;\r\n              } else if (param.includes(\"InterComm\")) {\r\n                // CAN communication counters\r\n                return `${param}=${10 + Math.floor(Math.random() * 20)}`;\r\n              } else if (param.includes(\"SD_\") || param.includes(\"EEPROM_\")) {\r\n                // Memory counters\r\n                return `${param}=${5 + Math.floor(Math.random() * 10)}`;\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n        setDetectedSimulation(true);\r\n      }\r\n      \r\n      // Run the OBC-2 checkout test with progress updates\r\n      const results = await runOBC2Checkout(sock, \r\n        { sdCard: enableSdCard, eeprom: enableEeprom }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Save result to history - determine simulation status\r\n      const wasSimulated = isForceSimulation || detectedSimulation;\r\n      await saveTestResult(results, 'completed', wasSimulated);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running OBC-2 checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history if we have partial results\r\n      if (results) {\r\n        const wasSimulated = isForceSimulation || detectedSimulation;\r\n        await saveTestResult(results, 'error', wasSimulated);\r\n      }\r\n      \r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateOBC2Report(results);\r\n      alert(`OBC-2 report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clean up simulated test results from the database\r\n   * This will remove any test results that were incorrectly saved as real but were actually simulated\r\n   */\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit test history to a certain number of records\r\n   * @param limit Number of records to keep (default: 30)\r\n   */\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'OBC-2'  // Limit only OBC-2 records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear all test history for this profile and component\r\n   */\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n\r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for OBC-2?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=OBC-2`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`obc2_real_history_${profileId}`);\r\n        localStorage.removeItem(`obc2_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete a single test history item\r\n   */\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Add these functions for multi-select mode\r\n  /**\r\n   * Toggle multi-select mode\r\n   */\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Toggle selection of a single history item\r\n   */\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Select all visible history items\r\n   */\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n\r\n  /**\r\n   * Deselect all history items\r\n   */\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  /**\r\n   * Delete all selected items\r\n   */\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Optionally add automatic cleanup on component mount\r\n  useEffect(() => {\r\n    if (profileId) {\r\n      // Automatically limit history to 30 records when the component mounts\r\n      limitTestHistory(30);\r\n    }\r\n  }, [profileId]); // Only run when profileId changes\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div className={styles.tabsContainer} style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        padding: '8px',\r\n        borderRadius: '8px',\r\n        marginBottom: '16px',\r\n      }}>\r\n        <button\r\nonClick={() => setShowHistory(false)}\r\nclassName={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\nstyle={{\r\n  padding: '8px 16px',\r\n  borderRadius: '6px',\r\n  backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n  color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n  border: 'none',\r\n  fontWeight: 500,\r\n  cursor: 'pointer'\r\n}}\r\n>\r\nCurrent Test\r\n</button>\r\n<button\r\nonClick={() => setShowHistory(true)}\r\nclassName={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\nstyle={{\r\n  padding: '8px 16px',\r\n  borderRadius: '6px',\r\n  backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n  color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n  border: 'none',\r\n  fontWeight: 500,\r\n  cursor: 'pointer'\r\n}}\r\n>\r\nTest History\r\n</button>\r\n</div>\r\n\r\n{/* Current Test Panel */}\r\n{!showHistory ? (\r\n<>\r\n<div \r\n  className={styles.card}\r\n  style={{\r\n    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n  }}\r\n>\r\n  <div \r\n    className={styles.cardHeader}\r\n    style={{\r\n      backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n      borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n    }}\r\n  >\r\n    <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n        <path fillRule=\"evenodd\" d=\"M10 1.944A11.954 11.954 0 012.166 5C2.056 5.649 2 6.319 2 7c0 5.225 3.34 9.67 8 11.317C14.66 16.67 18 12.225 18 7c0-.682-.057-1.35-.166-2.001A11.954 11.954 0 0110 1.944zM11 14a1 1 0 11-2 0 1 1 0 012 0zm0-7a1 1 0 10-2 0v3a1 1 0 102 0V7z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n      OBC-2 Test Status\r\n    </h3>\r\n  </div>\r\n  \r\n  <div className={styles.cardContent}>\r\n    <div className={styles.progressContainer}>\r\n      <div className={styles.progressLabel}>\r\n        <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n          {currentStep || 'Waiting to start test...'}\r\n        </span>\r\n        <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n          {progress}%\r\n        </span>\r\n      </div>\r\n      <div \r\n        className={styles.progressBar}\r\n        style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n      >\r\n        <div \r\n          className={styles.progressBarFill}\r\n          style={{ \r\n            width: `${progress}%`,\r\n            background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n    \r\n    {/* Display the testing options */}\r\n    <div style={{ marginBottom: '20px' }}>\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        marginBottom: '10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        Selected Test Options:\r\n      </h4>\r\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n        {options.map((option, index) => (\r\n          <div key={index} style={{ \r\n            padding: '6px 10px', \r\n            backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n            borderRadius: '4px',\r\n            fontSize: '13px',\r\n            color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '6px'\r\n          }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            {option}\r\n          </div>\r\n        ))}\r\n        {options.length === 0 && (\r\n          <div style={{ \r\n            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n            fontStyle: 'italic',\r\n            fontSize: '13px'\r\n          }}>\r\n            No specific options selected. Running with defaults.\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n    \r\n    {/* Connection Status */}\r\n    <div \r\n      className={styles.parameterBox}\r\n      style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n      }}\r\n    >\r\n      <div className={styles.parameterLabel}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n        <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n        </svg>\r\n        Connection Mode\r\n      </div>\r\n      <span className={`${styles.statusBadge} ${\r\n        isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n      }`}>\r\n        {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n      </span>\r\n    </div>\r\n    \r\n    <div \r\n      className={styles.parameterBox}\r\n      style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n        marginTop: '10px'\r\n      }}\r\n    >\r\n      <div className={styles.parameterLabel}>\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n          <path d=\"M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z\" />\r\n        </svg>\r\n        Memory Testing\r\n      </div>\r\n      <span style={{ display: 'flex', gap: '8px' }}>\r\n        <span className={`${styles.parameterValue} ${\r\n          enableSdCard ? styles.colorCompleted : styles.colorWaiting\r\n        }`}>\r\n          SD CARD: {enableSdCard ? 'ENABLED' : 'DISABLED'}\r\n        </span>\r\n        <span className={`${styles.parameterValue} ${\r\n          enableEeprom ? styles.colorCompleted : styles.colorWaiting\r\n        }`}>\r\n          EEPROM: {enableEeprom ? 'ENABLED' : 'DISABLED'}\r\n        </span>\r\n      </span>\r\n    </div>\r\n    \r\n    {/* Run/Re-run Test Button */}\r\n    <button \r\n      onClick={startTest} \r\n      className={styles.button}\r\n      disabled={isRunning}\r\n      style={{ \r\n          backgroundColor: isRunning ? '#9ca3af' :\r\n            hasRunTest ? '#4f46e5' : '#10b981',\r\n          color: 'white',\r\n          marginTop: '20px'\r\n        }}\r\n      >\r\n        {isRunning ? (\r\n          <>\r\n            <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n            </svg>\r\n            Running Test...\r\n          </>\r\n        ) : hasRunTest ? (\r\n          <>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n            <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Re-run Test\r\n          </>\r\n        ) : (\r\n          <>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Run Test\r\n          </>\r\n        )}\r\n      </button>\r\n    </div>\r\n  </div>\r\n  \r\n  {results && (\r\n    <div className=\"space-y-4 mt-4\">\r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader} \r\n          style={{ \r\n            background: isDarkMode \r\n              ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n              : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n            color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Firmware Information\r\n          </h3>\r\n          \r\n          {/* Add simulation badge */}\r\n          <SimulationBadge isSimulation={isForceSimulation} />\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <div \r\n            className={styles.infoCard}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div className={styles.infoIcon}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"#059669\" width=\"20\" height=\"20\">\r\n                <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 00-1 1v1a1 1 0 002 0V3a1 1 0 00-1-1zM4 4h3a3 3 0 006 0h3a2 2 0 012 2v9a2 2 0 01-2 2H4a2 2 0 01-2-2V6a2 2 0 012-2zm2.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm2.45 4a2.5 2.5 0 10-4.9 0h4.9zM12 9a1 1 0 100 2h3a1 1 0 100-2h-3zm-1 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </div>\r\n            <div className={styles.infoContent}>\r\n              <div \r\n                className={styles.infoLabel}\r\n                style={{ color: isDarkMode ? \"#9ca3af\" : \"#6b7280\" }}\r\n              >\r\n                OBC-2 Firmware Version\r\n              </div>\r\n              <div \r\n                className={styles.infoValue}\r\n                style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}\r\n              >\r\n                {results.firmware.major}.{results.firmware.minor}.{results.firmware.patch}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader} \r\n          style={{ \r\n            background: isDarkMode \r\n              ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n              : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n            color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n          }}\r\n          >\r\n            <h3 className={styles.cardTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Time Synchronization\r\n          </h3>\r\n          \r\n          {/* Add simulation badge */}\r\n          <SimulationBadge isSimulation={isForceSimulation} />\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <table \r\n            className={styles.table}\r\n            style={{\r\n              color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n            }}\r\n          >\r\n            <thead \r\n              className={styles.tableHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n              }}\r\n            >\r\n              <tr>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className={styles.tableBody}>\r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Before Update</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.time.before} UTC</td>\r\n              </tr>\r\n              \r\n              <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>After Update</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.time.after} UTC</td>\r\n              </tr>\r\n              \r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Current Time</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.time.current} UTC</td>\r\n              </tr>\r\n              \r\n              <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Uptime Total</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.time.uptime.total} sec</td>\r\n              </tr>\r\n              \r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Uptime Session</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.time.uptime.session} sec</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      \r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader} \r\n          style={{ \r\n            background: isDarkMode \r\n              ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n              : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n            color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            Voltage Measurements\r\n          </h3>\r\n          \r\n          {/* Add simulation badge */}\r\n          <SimulationBadge isSimulation={isForceSimulation} />\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <table \r\n            className={styles.table}\r\n            style={{\r\n              color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n            }}\r\n          >\r\n            <thead \r\n              className={styles.tableHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n              }}\r\n            >\r\n              <tr>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className={styles.tableBody}>\r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>SD Card 3V3</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.voltage.sdCard.value} mV</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                  <span className={`${styles.statusBadge} ${\r\n                    results.voltage.sdCard.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                  }`}>\r\n                    {results.voltage.sdCard.result}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n              \r\n              <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Flash 3V3</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.voltage.flash.value} mV</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                  <span className={`${styles.statusBadge} ${\r\n                    results.voltage.flash.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                  }`}>\r\n                    {results.voltage.flash.result}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n              \r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>EEPROM 3V3</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.voltage.eeprom.value} mV</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                  <span className={`${styles.statusBadge} ${\r\n                    results.voltage.eeprom.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                  }`}>\r\n                    {results.voltage.eeprom.result}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n              \r\n              <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Payload 3V3</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.voltage.payload.value} mV</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                  <span className={`${styles.statusBadge} ${\r\n                    results.voltage.payload.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                  }`}>\r\n                    {results.voltage.payload.result}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n              \r\n              <tr>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>UHF 3V3</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.voltage.uhf.value} mV</td>\r\n                <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                  <span className={`${styles.statusBadge} ${\r\n                    results.voltage.uhf.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                  }`}>\r\n                    {results.voltage.uhf.result}\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* CAN Communication Test Results */}\r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader} \r\n          style={{ \r\n            background: isDarkMode \r\n              ? \"linear-gradient(to right, #164e63, #0e7490)\" \r\n              : \"linear-gradient(to right, #ecfeff, #cffafe)\",\r\n            color: isDarkMode ? \"#cffafe\" : \"#0e7490\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path d=\"M13 7H7v6h6V7z\" />\r\n              <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            CAN Communication Test\r\n          </h3>\r\n          \r\n          {/* Add simulation badge */}\r\n          <SimulationBadge isSimulation={isForceSimulation} />\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <div style={{ display: 'flex', gap: '20px', marginBottom: '15px' }}>\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                padding: '10px',\r\n                backgroundColor: isDarkMode ? '#0c4a6e' : '#e0f2fe',\r\n                borderRadius: '8px',\r\n                textAlign: 'center'\r\n              }}\r\n            >\r\n              <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Primary CAN</div>\r\n              <span className={`${styles.statusBadge} ${results.can.primary.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                    }`} style={{ fontSize: '14px', padding: '5px 10px' }}>\r\n                      {results.can.primary.result}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div\r\n                    style={{\r\n                      flex: 1,\r\n                      padding: '10px',\r\n                      backgroundColor: isDarkMode ? '#0c4a6e' : '#e0f2fe',\r\n                      borderRadius: '8px',\r\n                      textAlign: 'center'\r\n                    }}\r\n                  >\r\n                    <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Secondary CAN</div>\r\n                    <span className={`${styles.statusBadge} ${\r\n                      results.can.secondary.result === \"[PASS]\" ? styles.colorCompleted : styles.colorError\r\n                    }`} style={{ fontSize: '14px', padding: '5px 10px' }}>\r\n                      {results.can.secondary.result}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                <div style={{ fontSize: '13px', color: isDarkMode ? '#94a3b8' : '#64748b', marginTop: '10px' }}>\r\n                  CAN communication test verifies data transfer between OBC-1 and OBC-2 over both primary and secondary CAN buses. \r\n                  The test measures successful transmission and acknowledgement of HKP, CFG, MET, ETC, and UHF packets.\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Memory Test Results (if enabled) */}\r\n            {(enableSdCard || enableEeprom) && (\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #713f12, #854d0e)\" \r\n                      : \"linear-gradient(to right, #fffbeb, #fef3c7)\",\r\n                    color: isDarkMode ? \"#fef3c7\" : \"#854d0e\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path d=\"M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z\" />\r\n                    </svg>\r\n                    Memory Test Results\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  {enableSdCard && (\r\n                    <div style={{ marginBottom: '20px' }}>\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>\r\n                        <h4 style={{ margin: 0 }}>SD Card Test</h4>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          results.memory.sdCard.result === \"[PASS]\" ? styles.colorCompleted : \r\n                          results.memory.sdCard.result === \"Not tested\" ? styles.colorWaiting : styles.colorError\r\n                        }`}>\r\n                          {results.memory.sdCard.result}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {results.memory.sdCard.result !== \"Not tested\" && (\r\n                        <table className={styles.table} style={{ marginTop: '10px' }}>\r\n                          <thead className={styles.tableHeader}>\r\n                            <tr>\r\n                              <th>Counter</th>\r\n                              <th>Before Test</th>\r\n                              <th>After Test</th>\r\n                              <th>Difference</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td>Write Success</td>\r\n                              <td>{results.memory.sdCard.before.writeSuccess}</td>\r\n                              <td>{results.memory.sdCard.after.writeSuccess}</td>\r\n                              <td>{isNaN(Number(results.memory.sdCard.after.writeSuccess) - Number(results.memory.sdCard.before.writeSuccess)) ? \r\n                                \"0\" : (Number(results.memory.sdCard.after.writeSuccess) - Number(results.memory.sdCard.before.writeSuccess))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Read Success</td>\r\n                              <td>{results.memory.sdCard.before.readSuccess}</td>\r\n                              <td>{results.memory.sdCard.after.readSuccess}</td>\r\n                              <td>{isNaN(Number(results.memory.sdCard.after.readSuccess) - Number(results.memory.sdCard.before.readSuccess)) ? \r\n                                \"0\" : (Number(results.memory.sdCard.after.readSuccess) - Number(results.memory.sdCard.before.readSuccess))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Write Fail</td>\r\n                              <td>{results.memory.sdCard.before.writeFail}</td>\r\n                              <td>{results.memory.sdCard.after.writeFail}</td>\r\n                              <td>{isNaN(Number(results.memory.sdCard.after.writeFail) - Number(results.memory.sdCard.before.writeFail)) ? \r\n                                \"0\" : (Number(results.memory.sdCard.after.writeFail) - Number(results.memory.sdCard.before.writeFail))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Read Fail</td>\r\n                              <td>{results.memory.sdCard.before.readFail}</td>\r\n                              <td>{results.memory.sdCard.after.readFail}</td>\r\n                              <td>{isNaN(Number(results.memory.sdCard.after.readFail) - Number(results.memory.sdCard.before.readFail)) ? \r\n                                \"0\" : (Number(results.memory.sdCard.after.readFail) - Number(results.memory.sdCard.before.readFail))}</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n\r\n                  {enableEeprom && (\r\n                    <div>\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>\r\n                        <h4 style={{ margin: 0 }}>EEPROM Test</h4>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          results.memory.eeprom.result === \"[PASS]\" ? styles.colorCompleted : \r\n                          results.memory.eeprom.result === \"Not tested\" ? styles.colorWaiting : styles.colorError\r\n                        }`}>\r\n                          {results.memory.eeprom.result}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {results.memory.eeprom.result !== \"Not tested\" && (\r\n                        <table className={styles.table} style={{ marginTop: '10px' }}>\r\n                          <thead className={styles.tableHeader}>\r\n                            <tr>\r\n                              <th>Counter</th>\r\n                              <th>Before Test</th>\r\n                              <th>After Test</th>\r\n                              <th>Difference</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td>Write Success</td>\r\n                              <td>{results.memory.eeprom.before.writeSuccess}</td>\r\n                              <td>{results.memory.eeprom.after.writeSuccess}</td>\r\n                              <td>{isNaN(Number(results.memory.eeprom.after.writeSuccess) - Number(results.memory.eeprom.before.writeSuccess)) ? \r\n                                \"0\" : (Number(results.memory.eeprom.after.writeSuccess) - Number(results.memory.eeprom.before.writeSuccess))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Read Success</td>\r\n                              <td>{results.memory.eeprom.before.readSuccess}</td>\r\n                              <td>{results.memory.eeprom.after.readSuccess}</td>\r\n                              <td>{isNaN(Number(results.memory.eeprom.after.readSuccess) - Number(results.memory.eeprom.before.readSuccess)) ? \r\n                                \"0\" : (Number(results.memory.eeprom.after.readSuccess) - Number(results.memory.eeprom.before.readSuccess))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Write Fail</td>\r\n                              <td>{results.memory.eeprom.before.writeFail}</td>\r\n                              <td>{results.memory.eeprom.after.writeFail}</td>\r\n                              <td>{isNaN(Number(results.memory.eeprom.after.writeFail) - Number(results.memory.eeprom.before.writeFail)) ? \r\n                                \"0\" : (Number(results.memory.eeprom.after.writeFail) - Number(results.memory.eeprom.before.writeFail))}</td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td>Read Fail</td>\r\n                              <td>{results.memory.eeprom.before.readFail}</td>\r\n                              <td>{results.memory.eeprom.after.readFail}</td>\r\n                              <td>{isNaN(Number(results.memory.eeprom.after.readFail) - Number(results.memory.eeprom.before.readFail)) ? \r\n                                \"0\" : (Number(results.memory.eeprom.after.readFail) - Number(results.memory.eeprom.before.readFail))}</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div>\r\n              <button \r\n                onClick={generateReport}\r\n                className={styles.reportButton}\r\n                style={{\r\n                  backgroundColor: \"#10b981\",\r\n                  color: \"white\"\r\n                }}\r\n              >\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Generate Report\r\n              </button>\r\n            </div>\r\n          </div>\r\n    )}  \r\n    </>\r\n      ) : (\r\n        /* Test History Panel */\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              background: isDarkMode \r\n                ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n                : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              OBC-2 Test History\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            {historyLoading ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n              }}>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                <p>Loading test history...</p>\r\n              </div>\r\n            ) : testHistory.length === 0 ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                fontStyle: 'italic'\r\n              }}>\r\n                <p>No test history available for this profile.</p>\r\n                <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                  Run a test to start building your history.\r\n                </p>\r\n                \r\n                {!profileId && (\r\n                  <div style={{\r\n                    marginTop: '16px',\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                    borderRadius: '6px',\r\n                    color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Visualization Controls */}\r\n                <div style={{ marginBottom: '16px' }}>\r\n                  <label style={{ \r\n                    display: 'block',\r\n                    marginBottom: '8px',\r\n                    color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                    fontWeight: 500\r\n                  }}>\r\n                    Select Metric:\r\n                  </label>\r\n                  <select\r\n                    value={selectedMetric}\r\n                    onChange={(e) => setSelectedMetric(e.target.value)}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '8px 12px',\r\n                      borderRadius: '6px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    {metricOptions.map(option => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Metric Trend Chart */}\r\n                <div style={{\r\n                  height: '300px',\r\n                  marginBottom: '20px',\r\n                  backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                  padding: '16px',\r\n                  borderRadius: '8px'\r\n                }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    {metricOptions.find(m => m.value === selectedMetric)?.label} Trend\r\n                  </h4>\r\n                  \r\n                  <TestHistoryChart\r\n                    data={testHistory}\r\n                    metricPath={selectedMetric}\r\n                    metricLabel={metricOptions.find(m => m.value === selectedMetric)?.label || selectedMetric}\r\n                    isDarkMode={isDarkMode}\r\n                  />\r\n                </div>\r\n\r\n                {/* Multi-select controls */}\r\n                <div style={{ \r\n                  marginTop: '20px', \r\n                  marginBottom: '12px', \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <div>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      marginBottom: '6px'\r\n                    }}>\r\n                      Test History Records\r\n                    </h4>\r\n                  </div>\r\n                  \r\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    {/* Toggle button for multi-select mode */}\r\n                    <button\r\n                      onClick={toggleMultiSelectMode}\r\n                      style={{\r\n                        backgroundColor: isMultiSelectMode \r\n                          ? (isDarkMode ? '#4f46e5' : '#6366f1') \r\n                          : (isDarkMode ? '#1f2937' : '#f3f4f6'),\r\n                        color: isMultiSelectMode \r\n                          ? 'white' \r\n                          : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        padding: '6px 12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 500,\r\n                        cursor: 'pointer',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {isMultiSelectMode ? 'Exit Selection Mode' : 'Select Items'}\r\n                    </button>\r\n                    \r\n                    {/* Only show these controls when in multi-select mode */}\r\n                    {isMultiSelectMode && (\r\n                      <>\r\n                        <button\r\n                          onClick={selectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Select All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deselectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Deselect All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deleteSelectedItems}\r\n                          disabled={selectedItems.length === 0}\r\n                          style={{\r\n                            backgroundColor: selectedItems.length === 0 \r\n                              ? (isDarkMode ? '#6b7280' : '#9ca3af') \r\n                              : (isDarkMode ? '#dc2626' : '#ef4444'),\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 12px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: selectedItems.length === 0 ? 'not-allowed' : 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                          }}\r\n                        >\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                            <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          Delete Selected ({selectedItems.length})\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* First add the information panel before the table */}\r\n                <div style={{ marginBottom: '20px', padding: '12px', borderRadius: '8px', backgroundColor: isDarkMode ? '#1e293b' : '#f0f9ff', border: '1px solid', borderColor: isDarkMode ? '#475569' : '#bfdbfe' }}>\r\n                  <h4 style={{ marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#1e40af', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n                    </svg>\r\n                    Test History Information\r\n                  </h4>\r\n                  <p style={{ fontSize: '14px', color: isDarkMode ? '#cbd5e1' : '#334155' }}>\r\n                    This chart shows only <strong>real test data</strong> from actual hardware tests. \r\n                    Simulated test results are not included in this history or visualization.\r\n                  </p>\r\n                  {testHistory.length === 0 && (\r\n                    <p style={{ marginTop: '10px', fontSize: '14px', color: isDarkMode ? '#fb923c' : '#c2410c', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                      </svg>\r\n                      No real test data is available yet. Run tests in real mode (not simulation) to collect actual data.\r\n                    </p>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Test History Table */}\r\n                <TestHistoryTable \r\n                  testHistory={testHistory}\r\n                  isDarkMode={isDarkMode}\r\n                  onViewDetails={(item) => setSelectedHistoryItem(item)}\r\n                />\r\n                \r\n                {/* Additional Metrics Summary */}\r\n                <div style={{ marginTop: '20px' }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Key Metrics Summary\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                    gap: '12px'\r\n                  }}>\r\n                    {/* Metric Card: Average SD Card Voltage */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average SD Card Voltage\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'voltage.sdCard.value'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} mV`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: SD Card Pass Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        CAN Communication Success\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const primaryResults = testHistory\r\n                            .map(item => item.results?.can?.primary?.result === \"[PASS]\")\r\n                            .filter(pass => pass !== undefined);\r\n                            \r\n                          const secondaryResults = testHistory\r\n                            .map(item => item.results?.can?.secondary?.result === \"[PASS]\")\r\n                            .filter(pass => pass !== undefined);\r\n                          \r\n                          const allResults = [...primaryResults, ...secondaryResults];\r\n                          \r\n                          if (allResults.length === 0) return 'N/A';\r\n                          \r\n                          const passCount = allResults.filter(Boolean).length;\r\n                          const passRate = (passCount / allResults.length) * 100;\r\n                          \r\n                          return `${passRate.toFixed(1)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Voltage Pass Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Voltage Pass Rate\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const voltageResults = testHistory.flatMap(item => {\r\n                            const voltage = item.results?.voltage;\r\n                            if (!voltage) return [];\r\n                            \r\n                            return [\r\n                              voltage.sdCard?.result === \"[PASS]\",\r\n                              voltage.flash?.result === \"[PASS]\",\r\n                              voltage.eeprom?.result === \"[PASS]\",\r\n                              voltage.payload?.result === \"[PASS]\",\r\n                              voltage.uhf?.result === \"[PASS]\"\r\n                            ].filter(result => result !== undefined);\r\n                          });\r\n                          \r\n                          if (voltageResults.length === 0) return 'N/A';\r\n                          \r\n                          const passCount = voltageResults.filter(Boolean).length;\r\n                          const passRate = (passCount / voltageResults.length) * 100;\r\n                          \r\n                          return `${passRate.toFixed(1)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Memory Test Success */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Memory Test Success\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const memoryResults = testHistory.flatMap(item => {\r\n                            const memory = item.results?.memory;\r\n                            if (!memory) return [];\r\n                            \r\n                            return [\r\n                              memory.sdCard?.result === \"[PASS]\",\r\n                              memory.eeprom?.result === \"[PASS]\"\r\n                            ].filter(result => {\r\n                              // First check if it's undefined\r\n                              if (result === undefined) return false;\r\n                              \r\n                              // If it's a string (which shouldn't happen here but TypeScript needs this check),\r\n                              // make sure it's not \"Not tested\"\r\n                              if (typeof result === 'string' && result === \"Not tested\") return false;\r\n                              \r\n                              // Otherwise keep it\r\n                              return true;\r\n                            });\r\n                          });\r\n                          \r\n                          if (memoryResults.length === 0) return 'N/A';\r\n                          \r\n                          const passCount = memoryResults.filter(Boolean).length;\r\n                          const passRate = (passCount / memoryResults.length) * 100;\r\n                          \r\n                          return `${passRate.toFixed(1)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Export History Button */}\r\n                <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'flex-end', gap: '10px', flexWrap: 'wrap' }}>\r\n                  {/* Clear All History Button - New */}\r\n                  <button \r\n                    onClick={clearAllTestHistory}\r\n                    style={{\r\n                      backgroundColor: '#dc2626', /* Deeper red for more dangerous action */\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clear All History\r\n                  </button>\r\n                  \r\n                  {/* Clean Up Simulated Data Button */}\r\n                  <button \r\n                    onClick={() => cleanupSimulatedData()}\r\n                    style={{\r\n                      backgroundColor: '#ef4444',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clean Up Simulated Data\r\n                  </button>\r\n                  \r\n                  {/* Limit History Button */}\r\n                  <button \r\n                    onClick={() => limitTestHistory(30)}\r\n                    style={{\r\n                      backgroundColor: '#3b82f6',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Limit History (30 Records)\r\n                  </button>\r\n                  \r\n                  <button \r\n                    onClick={() => {\r\n                      // Implement history export functionality\r\n                      const historyData = JSON.stringify(testHistory, null, 2);\r\n                      const blob = new Blob([historyData], { type: 'application/json' });\r\n                      const url = URL.createObjectURL(blob);\r\n                      const a = document.createElement('a');\r\n                      a.href = url;\r\n                      a.download = `obc2_test_history_${profileId || 'unknown'}.json`;\r\n                      document.body.appendChild(a);\r\n                      a.click();\r\n                      document.body.removeChild(a);\r\n                      URL.revokeObjectURL(url);\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: '#10b981',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Export Test History\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Status Messages for Cleanup and Limit Operations */}\r\n                {(cleanupMessage || limitMessage) && (\r\n                  <div style={{ \r\n                    marginTop: '12px',\r\n                    padding: '12px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    {cleanupMessage && (\r\n                      <div style={{ \r\n                        color: cleanupMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c'),\r\n                        marginBottom: limitMessage ? '8px' : '0'\r\n                      }}>\r\n                        {cleanupMessage}\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {limitMessage && (\r\n                      <div style={{ \r\n                        color: limitMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c')\r\n                      }}>\r\n                        {limitMessage}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Test Details Modal */}\r\n      {selectedHistoryItem && (\r\n        <TestDetailsModal\r\n          test={selectedHistoryItem}\r\n          onClose={() => setSelectedHistoryItem(null)}\r\n          isDarkMode={isDarkMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}