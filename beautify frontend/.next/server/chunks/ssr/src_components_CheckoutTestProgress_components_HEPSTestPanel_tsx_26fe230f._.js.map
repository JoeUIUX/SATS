{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n// Import the HEPS-specific functions\r\nimport { runHEPSCheckout } from '@/services/checkout/hepsCheckout';\r\nimport { generateHEPSReport } from '@/services/reports/hepsReport';\r\n\r\n// Import test history components\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface HEPSTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Update your TestHistoryItem interface definition to include is_simulated\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    system?: {\r\n      powerStatus?: string;\r\n      voltage?: string;\r\n      current?: string;\r\n    };\r\n    heaters?: any[];\r\n    testedOptions?: string[];\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean; // Add this field with optional marker\r\n}\r\n\r\nexport const HEPSTestPanel: React.FC<HEPSTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('system.voltage');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  // Add state variables for messages\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  \r\n  // Determine if heater test options are enabled\r\n  const enableHeaterTest = options.includes('Heater Test');\r\n  const enableCurrentTest = options.includes('Current Measurement');\r\n  const enablePowerCycle = options.includes('Power Cycle Test');\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n  \r\n  // Available metrics for visualization\r\n  const metricOptions = [\r\n    { label: 'System Voltage', value: 'system.voltage' },\r\n    { label: 'System Current', value: 'system.current' },\r\n    { label: 'Heater 1 Temperature', value: 'heaters[0].temperature' },\r\n    { label: 'Heater 2 Temperature', value: 'heaters[1].temperature' },\r\n    { label: 'Heater 1 Current', value: 'heaters[0].current' },\r\n    { label: 'Heater 2 Current', value: 'heaters[1].current' }\r\n  ];\r\n\r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  // Add function to fetch test history\r\n  // Update fetchTestHistory to include a limit parameter for client-side filtering\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component HEPS`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=HEPS`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have system values to be a legitimate test\r\n            const hasSystemData = item.results.system && \r\n              (item.results.system.voltage || item.results.system.current || item.results.system.powerStatus);\r\n            \r\n            // Must have some heater data\r\n            const hasHeaterData = item.results.heaters && item.results.heaters.length > 0;\r\n            \r\n            // Consider it a real test if it has both system and heater data\r\n            return hasSystemData && hasHeaterData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `heps_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Add function to save test result to history\r\n  // When saving test results, add a flag to indicate if it's a real test\r\n  // saveTestResult function to accept the simulation flag directly\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform our standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                      (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"HEPS\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: enableHeaterTest ? \"Heater Test Enabled\" : \"Heater Test Disabled\",\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `heps_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"HEPS\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    // Handle array index notation in the path (e.g. heaters[0].temperature)\r\n    const arrayIndexMatch = path.match(/^([^\\[]+)\\[(\\d+)\\]\\.(.+)$/);\r\n    if (arrayIndexMatch) {\r\n      const [, arrayName, indexStr, propName] = arrayIndexMatch;\r\n      const index = parseInt(indexStr);\r\n      \r\n      if (results[arrayName] && Array.isArray(results[arrayName]) && results[arrayName].length > index) {\r\n        const arrayItem = results[arrayName][index];\r\n        if (arrayItem && typeof arrayItem === 'object' && propName in arrayItem) {\r\n          const value = arrayItem[propName];\r\n          const numValue = parseFloat(value);\r\n          return isNaN(numValue) ? null : numValue;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    \r\n    // Handle regular dot notation (e.g. system.voltage)\r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting HEPS Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common HEPS parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for different HEPS parameters\r\n              if (param.includes(\"HEPS_Heater\")) {\r\n                if (param.includes(\"Status\")) {\r\n                  return `${param}=${Math.round(Math.random())}`;  // 0 or 1\r\n                } else if (param.includes(\"Temperature\")) {\r\n                  return `${param}=${20 + Math.floor(Math.random() * 30)}`;  // 20-50°C\r\n                } else if (param.includes(\"Current\")) {\r\n                  return `${param}=${500 + Math.floor(Math.random() * 500)}`;  // 500-1000mA\r\n                } else if (param.includes(\"Voltage\")) {\r\n                  return `${param}=${28 + Math.random() * 2}`;  // 28-30V\r\n                } else if (param.includes(\"Power\")) {\r\n                  return `${param}=${15 + Math.floor(Math.random() * 10)}`;  // 15-25W\r\n                } else if (param.includes(\"Count\")) {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // 0-99\r\n                } else if (param.includes(\"Test\")) {\r\n                  if (param.includes(\"Done\")) {\r\n                    return `${param}=1`;  // Test completed\r\n                  } else if (param.includes(\"Result\")) {\r\n                    return `${param}=PASS`;  // Test result\r\n                  } else {\r\n                    return `${param}=1`;  // Other test flags\r\n                  }\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // Generic value\r\n                }\r\n              } else if (param.includes(\"HEPS_Power\")) {\r\n                if (param.includes(\"Status\")) {\r\n                  return `${param}=1`;  // Power on\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // Generic value\r\n                }\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n        setDetectedSimulation(true);\r\n      }\r\n      \r\n      // Run the HEPS checkout test with progress updates\r\n      const results = await runHEPSCheckout(sock, \r\n        { \r\n          testHeaters: enableHeaterTest, \r\n          testCurrent: enableCurrentTest, \r\n          testPowerCycle: enablePowerCycle \r\n        }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Save result to history - detect if simulation was used\r\n      await saveTestResult(results, 'completed', isForceSimulation);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running HEPS checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history\r\n      if (results) {\r\n        await saveTestResult(results, 'error', true);\r\n      }\r\n      \r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateHEPSReport(results);\r\n      alert(`HEPS report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clean up simulated test results from the database\r\n   * This will remove any test results that were incorrectly saved as real but were actually simulated\r\n   */\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Limit test history to a certain number of records\r\n   * @param limit Number of records to keep (default: 30)\r\n   */\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'HEPS'  // Limit only HEPS records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear all test history for this profile and component\r\n   */\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n\r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for HEPS?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=HEPS`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`heps_real_history_${profileId}`);\r\n        localStorage.removeItem(`heps_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Delete a single test history item\r\n   */\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Add these functions for multi-select mode\r\n  /**\r\n   * Toggle multi-select mode\r\n   */\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Toggle selection of a single history item\r\n   */\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Select all visible history items\r\n   */\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n\r\n  /**\r\n   * Deselect all history items\r\n   */\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  /**\r\n   * Delete all selected items\r\n   */\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Modify the useEffect for socket detection to watch for simulation indicators\r\n  useEffect(() => {\r\n    // Check if we have real socket info saved\r\n    const socketInfo = localStorage.getItem('mccSocketInfo');\r\n    let shouldUseSimulation = true; // Default to simulation\r\n\r\n    if (socketInfo) {\r\n      try {\r\n        const parsed = JSON.parse(socketInfo);\r\n        if (parsed && parsed.isReal) {\r\n          console.log(\"📡 Using real socket based on stored configuration\");\r\n          shouldUseSimulation = false;\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing socket info:\", e);\r\n      }\r\n    }\r\n\r\n    // Check the actual socket type more thoroughly\r\n    let isActuallySimulated = true;\r\n    \r\n    if (sock) {\r\n      // Direct simulation flag check\r\n      if (typeof sock.isSimulated === 'boolean') {\r\n        isActuallySimulated = sock.isSimulated;\r\n      } \r\n      // Check if it's using the simulation fallback\r\n      else if (typeof sock.simulateRead === 'function') {\r\n        isActuallySimulated = true;\r\n      }\r\n      // Check if it's a real socket with a receive method but no simulation methods\r\n      else if (typeof sock.send === 'function' && typeof sock.receive === 'function' && typeof sock.simulateRead === 'undefined') {\r\n        // Additional check to see if it's been correctly initialized\r\n        if (sock.readyState === undefined || sock.readyState === 1) { // 1 = OPEN for WebSocket\r\n          isActuallySimulated = false;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Set both states\r\n    setIsForceSimulation(shouldUseSimulation);\r\n    setDetectedSimulation(isActuallySimulated);\r\n    \r\n    console.log(`🔧 Socket analysis: Config says simulation=${shouldUseSimulation}, actual detection=${isActuallySimulated}`);\r\n    \r\n    // Set global simulation mode based on the most accurate information\r\n    setSimulationMode(isActuallySimulated);\r\n  }, [sock]);\r\n\r\n  // Optionally add automatic cleanup on component mount\r\n  useEffect(() => {\r\n    if (profileId) {\r\n      // Automatically limit history to 30 records when the component mounts\r\n      limitTestHistory(30);\r\n    }\r\n  }, [profileId]); // Only run when profileId changes\r\n  \r\n  // Helper function to render the temperature trend chart\r\n  const renderTemperatureTrend = (heaterData: any, index: number) => {\r\n    if (!heaterData || !heaterData.tempReadings || heaterData.tempReadings.length === 0) {\r\n      return (\r\n        <div style={{ \r\n          padding: '16px', \r\n          textAlign: 'center', \r\n          color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          No temperature data available\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Generate array for the temperature points\r\n    const tempPoints = heaterData.tempReadings.map((temp: number, idx: number) => ({\r\n      time: idx * heaterData.readingInterval,\r\n      temp: temp\r\n    }));\r\n\r\n    return (\r\n      <div style={{ height: '200px', marginBottom: '20px' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between',\r\n          marginBottom: '8px',\r\n          fontSize: '13px',\r\n          color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n        }}>\r\n          <span>Initial: {heaterData.initialTemp}°C</span>\r\n          <span>Max: {Math.max(...heaterData.tempReadings).toFixed(1)}°C</span>\r\n          <span>Final: {heaterData.tempReadings[heaterData.tempReadings.length - 1]}°C</span>\r\n        </div>\r\n        <div style={{ \r\n          position: 'relative',\r\n          height: '160px',\r\n          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n          borderRadius: '6px',\r\n          padding: '8px',\r\n          overflow: 'hidden'\r\n        }}>\r\n          <div style={{ \r\n            position: 'absolute',\r\n            bottom: '8px',\r\n            left: '8px',\r\n            right: '8px',\r\n            height: '130px'\r\n          }}>\r\n            {/* SVG line chart for temperature */}\r\n            <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${tempPoints.length} 100`} preserveAspectRatio=\"none\">\r\n              <polyline\r\n                points={tempPoints.map((point: any, i: number) => \r\n                  `${i * (100 / (tempPoints.length - 1))},${100 - ((point.temp - Math.min(...heaterData.tempReadings)) / \r\n                  (Math.max(...heaterData.tempReadings) - Math.min(...heaterData.tempReadings)) * 100)}`\r\n                ).join(' ')}\r\n                stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\r\n                strokeWidth=\"2\"\r\n                fill=\"none\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          {/* Simple X-axis label */}\r\n          <div style={{ \r\n            position: 'absolute', \r\n            bottom: '0', \r\n            right: '8px',\r\n            fontSize: '10px',\r\n            color: isDarkMode ? '#9ca3af' : '#6b7280'\r\n          }}>\r\n            {heaterData.testDuration}s\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Helper to render thermal rise data\r\n  const renderThermalRiseData = (heaterData: any) => {\r\n    if (!heaterData || !heaterData.thermalRise) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: '16px' }}>\r\n        <div style={{ \r\n          padding: '12px',\r\n          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n          borderRadius: '6px',\r\n          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n          marginBottom: '8px'\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span style={{ fontWeight: 'bold' }}>Temperature Rise:</span>\r\n            <span>{heaterData.thermalRise.totalRise.toFixed(1)}°C</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Rise Rate:</span>\r\n            <span>{heaterData.thermalRise.riseRate.toFixed(2)}°C/min</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Time to 5°C Rise:</span>\r\n            <span>{heaterData.thermalRise.timeTo5C.toFixed(1)}s</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <span>Time to 10°C Rise:</span>\r\n            <span>{heaterData.thermalRise.timeTo10C ? heaterData.thermalRise.timeTo10C.toFixed(1) + 's' : 'N/A'}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Helper to render power consumption data\r\n  const renderPowerConsumption = (heaterData: any) => {\r\n    if (!heaterData || !heaterData.power) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: '16px' }}>\r\n        <div style={{ \r\n          padding: '12px',\r\n          backgroundColor: isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5',\r\n          borderRadius: '6px',\r\n          border: `1px solid ${isDarkMode ? 'rgba(16, 185, 129, 0.3)' : '#a7f3d0'}`,\r\n          marginBottom: '8px'\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span style={{ fontWeight: 'bold' }}>Average Current:</span>\r\n            <span>{heaterData.power.avgCurrent.toFixed(1)} mA</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Max Current:</span>\r\n            <span>{heaterData.power.maxCurrent.toFixed(1)} mA</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Average Power:</span>\r\n            <span>{heaterData.power.avgPower.toFixed(2)} W</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <span>Total Energy:</span>\r\n            <span>{heaterData.power.totalEnergy.toFixed(2)} Wh</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div className={styles.tabsContainer} style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        padding: '8px',\r\n        borderRadius: '8px',\r\n        marginBottom: '16px',\r\n      }}>\r\n        <button\r\n          onClick={() => setShowHistory(false)}\r\n          className={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Current Test\r\n        </button>\r\n        <button\r\n          onClick={() => setShowHistory(true)}\r\n          className={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Test History\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Current Test Panel */}\r\n      {!showHistory ? (\r\n        <>\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                HEPS Test Status\r\n              </h3>\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div className={styles.progressContainer}>\r\n                <div className={styles.progressLabel}>\r\n                  <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                    {currentStep || 'Waiting to start test...'}\r\n                  </span>\r\n                  <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                    {progress}%\r\n                  </span>\r\n                </div>\r\n                <div \r\n                  className={styles.progressBar}\r\n                  style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n                >\r\n                  <div \r\n                    className={styles.progressBarFill}\r\n                    style={{ \r\n                      width: `${progress}%`,\r\n                      background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Display the testing options */}\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <h4 style={{ \r\n                  fontSize: '14px', \r\n                  marginBottom: '10px',\r\n                  color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n                }}>\r\n                  Selected Test Options:\r\n                </h4>\r\n                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                  {options.map((option, index) => (\r\n                    <div key={index} style={{ \r\n                      padding: '6px 10px', \r\n                      backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                      borderRadius: '4px',\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '6px'\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {option}\r\n                    </div>\r\n                  ))}\r\n                  {options.length === 0 && (\r\n                    <div style={{ \r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      fontStyle: 'italic',\r\n                      fontSize: '13px'\r\n                    }}>\r\n                      No specific options selected. Running with defaults.\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Connection Status */}\r\n              <div \r\n                className={styles.parameterBox}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div className={styles.parameterLabel}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n                  </svg>\r\n                  Connection Mode\r\n                </div>\r\n                <span className={`${styles.statusBadge} ${\r\n                  isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n                }`}>\r\n                  {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n                </span>\r\n              </div>\r\n              \r\n              <div \r\n                className={styles.parameterBox}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                  marginTop: '10px'\r\n                }}\r\n              >\r\n                <div className={styles.parameterLabel}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  HEPS Testing\r\n                </div>\r\n                <span style={{ display: 'flex', gap: '8px' }}>\r\n                  <span className={`${styles.parameterValue} ${\r\n                    enableHeaterTest ? styles.colorCompleted : styles.colorWaiting\r\n                  }`}>\r\n                    Heaters: {enableHeaterTest ? 'ENABLED' : 'DISABLED'}\r\n                  </span>\r\n                  <span className={`${styles.parameterValue} ${\r\n                    enableCurrentTest ? styles.colorCompleted : styles.colorWaiting\r\n                  }`}>\r\n                    Current: {enableCurrentTest ? 'ENABLED' : 'DISABLED'}\r\n                  </span>\r\n                  <span className={`${styles.parameterValue} ${\r\n                    enablePowerCycle ? styles.colorCompleted : styles.colorWaiting\r\n                  }`}>\r\n                    Power Cycle: {enablePowerCycle ? 'ENABLED' : 'DISABLED'}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n              \r\n              {/* Run/Re-run Test Button */}\r\n              <button \r\n                onClick={startTest} \r\n                className={styles.button}\r\n                disabled={isRunning}\r\n                style={{ \r\n                  backgroundColor: isRunning ? '#9ca3af' :\r\n                    hasRunTest ? '#4f46e5' : '#10b981',\r\n                  color: 'white',\r\n                  marginTop: '20px'\r\n                }}\r\n              >\r\n                {isRunning ? (\r\n                  <>\r\n                    <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                    </svg>\r\n                    Running Test...\r\n                  </>\r\n                ) : hasRunTest ? (\r\n                  <>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Re-run Test\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Run Test\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {results && (\r\n            <div className=\"space-y-4 mt-4\">\r\n              {/* HEPS System Status Card */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                      : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                    color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    HEPS System Status\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        Power Status\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: results.system.powerStatus === \"1\" ? \r\n                            (isDarkMode ? '#34d399' : '#059669') : \r\n                            (isDarkMode ? '#f87171' : '#dc2626')\r\n                        }}>\r\n                          {results.system.powerStatus === \"1\" ? \"POWERED\" : \"OFF\"}\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          Current State\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        System Voltage\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: isDarkMode ? '#d1d5db' : '#111827'\r\n                        }}>\r\n                          {results.system.voltage} V\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          Bus Voltage\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div style={{\r\n                      borderRadius: '8px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      overflow: 'hidden'\r\n                    }}>\r\n                      <div style={{\r\n                        padding: '10px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#374151'\r\n                      }}>\r\n                        System Current\r\n                      </div>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        textAlign: 'center'\r\n                      }}>\r\n                        <div style={{\r\n                          fontSize: '24px',\r\n                          fontWeight: 'bold',\r\n                          color: isDarkMode ? '#d1d5db' : '#111827'\r\n                        }}>\r\n                          {results.system.current} mA\r\n                        </div>\r\n                        <div style={{\r\n                          fontSize: '13px',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          marginTop: '4px'\r\n                        }}>\r\n                          Total Current\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n                      <tr>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Status</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                          <span className={`${styles.statusBadge} ${\r\n                            results.system.powerStatus === \"1\" ? styles.colorCompleted : styles.colorError\r\n                          }`}>\r\n                            {results.system.powerStatus === \"1\" ? \"ON\" : \"OFF\"}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                      \r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Voltage</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.voltage} V</td>\r\n                      </tr>\r\n                      \r\n                      <tr>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Current</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.current} mA</td>\r\n                      </tr>\r\n                      \r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Power</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.power} W</td>\r\n                      </tr>\r\n                      \r\n                      <tr>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Cycle Count</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.powerCycleCount}</td>\r\n                      </tr>\r\n                      \r\n                      <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Operating Time</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.operatingTime} min</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Heater Status Summary Card */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                      : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                    color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n                  }}\r\n                >\r\n                  <h3 className={styles.cardTitle}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Heater Status Summary\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                </div>\r\n                \r\n                <div className={styles.cardContent}>\r\n                  <div style={{ \r\n                    display: 'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                      <div key={index} style={{\r\n                        borderRadius: '8px',\r\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        overflow: 'hidden'\r\n                      }}>\r\n                        <div style={{\r\n                          padding: '8px',\r\n                          backgroundColor: heater.status === \"1\" ? \r\n                            (isDarkMode ? 'rgba(5, 150, 105, 0.2)' : '#d1fae5') : \r\n                            (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                          textAlign: 'center',\r\n                          fontSize: '14px',\r\n                          fontWeight: 'bold',\r\n                          color: heater.status === \"1\" ? \r\n                            (isDarkMode ? '#34d399' : '#059669') : \r\n                            (isDarkMode ? '#f87171' : '#dc2626')\r\n                        }}>\r\n                          Heater {index + 1}\r\n                        </div>\r\n                        <div style={{\r\n                          padding: '12px',\r\n                          textAlign: 'center'\r\n                        }}>\r\n                          <div style={{\r\n                            fontSize: '18px',\r\n                            fontWeight: 'bold',\r\n                            color: isDarkMode ? '#d1d5db' : '#111827'\r\n                          }}>\r\n                            {heater.temperature}°C\r\n                          </div>\r\n                          <div style={{\r\n                            fontSize: '13px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginTop: '4px'\r\n                          }}>\r\n                            {heater.current} mA\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <table \r\n                    className={styles.table}\r\n                    style={{\r\n                      color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                    }}\r\n                  >\r\n                    <thead \r\n                      className={styles.tableHeader}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                      }}\r\n                    >\r\n                      <tr>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Temperature</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Current</th>\r\n                        <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className={styles.tableBody}>\r\n                      {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                        <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater {index + 1}</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            <span className={`${styles.statusBadge} ${\r\n                              heater.status === \"1\" ? styles.colorCompleted : styles.colorError\r\n                            }`}>\r\n                              {heater.status === \"1\" ? \"ON\" : \"OFF\"}\r\n                            </span>\r\n                          </td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.temperature}°C</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.current} mA</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.power} W</td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Heater Test Results (Only shown if heater tests were enabled and run) */}\r\n              {enableHeaterTest && results.heaterTests && results.heaterTests.length > 0 && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n                        : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                      color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Heater Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    {results.heaterTests.map((heaterTest: any, index: number) => (\r\n                      <div key={index} style={{ \r\n                        marginBottom: '20px', \r\n                        padding: '16px',\r\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        borderRadius: '8px',\r\n                        backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#fff'\r\n                      }}>\r\n                        <div style={{ \r\n                          display: 'flex', \r\n                          justifyContent: 'space-between',\r\n                          alignItems: 'center',\r\n                          marginBottom: '12px'\r\n                        }}>\r\n                          <h4 style={{ \r\n                            fontSize: '16px', \r\n                            fontWeight: 'bold',\r\n                            color: isDarkMode ? '#d1d5db' : '#111827',\r\n                            margin: 0\r\n                          }}>\r\n                            Heater {index + 1} Test Results\r\n                          </h4>\r\n                          <span className={`${styles.statusBadge} ${\r\n                            heaterTest.testResult === \"PASS\" ? styles.colorCompleted : styles.colorError\r\n                          }`}>\r\n                            {heaterTest.testResult}\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* Temperature trend chart */}\r\n                        {renderTemperatureTrend(heaterTest, index)}\r\n                        \r\n                        {/* Thermal rise data */}\r\n                        {renderThermalRiseData(heaterTest)}\r\n                        \r\n                        {/* Power consumption data */}\r\n                        {renderPowerConsumption(heaterTest)}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Power Cycle Test Results (Only shown if power cycle tests were enabled and run) */}\r\n              {enablePowerCycle && results.powerCycleTest && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #713f12, #854d0e)\" \r\n                        : \"linear-gradient(to right, #fffbeb, #fef3c7)\",\r\n                      color: isDarkMode ? \"#fef3c7\" : \"#854d0e\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Power Cycle Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      marginBottom: '20px', \r\n                      padding: '16px',\r\n                      backgroundColor: results.powerCycleTest.testResult === \"PASS\" ? \r\n                        (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                        (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                      borderRadius: '8px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold',\r\n                        color: results.powerCycleTest.testResult === \"PASS\" ? \r\n                          (isDarkMode ? '#34d399' : '#059669') : \r\n                          (isDarkMode ? '#f87171' : '#dc2626'),\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {results.powerCycleTest.testResult}\r\n                      </div>\r\n                      <div style={{ \r\n                        color: isDarkMode ? '#d1d5db' : '#374151',\r\n                        fontSize: '14px'\r\n                      }}>\r\n                        Power Cycle Test {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles} cycles completed\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <table \r\n                      className={styles.table}\r\n                      style={{\r\n                        color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                      }}\r\n                    >\r\n                      <thead \r\n                        className={styles.tableHeader}\r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                        }}\r\n                      >\r\n                        <tr>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className={styles.tableBody}>\r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycles Completed</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                            {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles}\r\n                          </td>\r\n                        </tr>\r\n                        \r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycle Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.cycleTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power On Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOnTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Off Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOffTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Total Test Time</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.totalTestTime} s</td>\r\n                        </tr>\r\n                        \r\n                        <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Failures</td>\r\n                          <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.failures}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Current Measurement Test Results (Only shown if current tests were enabled and run) */}\r\n              {enableCurrentTest && results.currentTest && (\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #164e63, #0e7490)\" \r\n                        : \"linear-gradient(to right, #ecfeff, #cffafe)\",\r\n                      color: isDarkMode ? \"#cffafe\" : \"#0e7490\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path d=\"M13 7H7v6h6V7z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Current Measurement Test Results\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation || detectedSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      marginBottom: '20px', \r\n                      padding: '16px',\r\n                      backgroundColor: results.currentTest.testResult === \"PASS\" ? \r\n                        (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                        (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                      borderRadius: '8px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '20px', \r\n                        fontWeight: 'bold',\r\n                        color: results.currentTest.testResult === \"PASS\" ? \r\n                          (isDarkMode ? '#34d399' : '#059669') : \r\n                          (isDarkMode ? '#f87171' : '#dc2626'),\r\n                        marginBottom: '8px'\r\n                      }}>\r\n                        {results.currentTest.testResult}\r\n                      </div>\r\n                      <div style={{ \r\n                        color: isDarkMode ? '#d1d5db' : '#374151',\r\n                        fontSize: '14px'\r\n                      }}>\r\n                        Current measurements {results.currentTest.testResult === \"PASS\" ? \"within\" : \"outside\"} expected range\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <table \r\n                      className={styles.table}\r\n                      style={{\r\n                        color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                      }}\r\n                    >\r\n                      <thead \r\n                        className={styles.tableHeader}\r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                        }}\r\n                      >\r\n                        <tr>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Expected (mA)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Measured (mA)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Deviation (%)</th>\r\n                          <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Result</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody className={styles.tableBody}>\r\n                        {results.currentTest.heaterResults && results.currentTest.heaterResults.map((result: any, index: number) => (\r\n                          <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater {index + 1}</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.expectedCurrent}</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.measuredCurrent}</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.deviation.toFixed(2)}%</td>\r\n                            <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                              <span className={`${styles.statusBadge} ${\r\n                                result.inRange ? styles.colorCompleted : styles.colorError\r\n                              }`}>\r\n                                {result.inRange ? \"PASS\" : \"FAIL\"}\r\n                              </span>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                    \r\n                    <div style={{\r\n                      marginTop: '16px',\r\n                      padding: '12px',\r\n                      backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#f9fafb',\r\n                      borderRadius: '6px',\r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                    }}>\r\n                      <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Test Summary:</div>\r\n                      <div>• Test Duration: {results.currentTest.testDuration} s</div>\r\n                      <div>• Samples Collected: {results.currentTest.sampleCount}</div>\r\n                      <div>• Maximum Deviation: {results.currentTest.maxDeviation.toFixed(2)}%</div>\r\n                      <div>• Tolerance Range: ±{results.currentTest.tolerance}%</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Generate Report Button */}\r\n              <div>\r\n                <button \r\n                  onClick={generateReport}\r\n                  className={styles.reportButton}\r\n                  style={{\r\n                    backgroundColor: \"#10b981\",\r\n                    color: \"white\"\r\n                  }}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Generate Report\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        /* Test History Panel */\r\n        <div className={styles.card} style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}>\r\n          <div className={styles.cardHeader} style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n            background: isDarkMode \r\n              ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n              : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n          }}>\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              HEPS Test History\r\n            </h3>\r\n          </div>\r\n\r\n          <div className={styles.cardContent}>\r\n            {historyLoading ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n              }}>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                <p>Loading test history...</p>\r\n              </div>\r\n            ) : testHistory.length === 0 ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                fontStyle: 'italic'\r\n              }}>\r\n                <p>No test history available for this profile.</p>\r\n                <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                  Run a test to start building your history.\r\n                </p>\r\n                \r\n                {!profileId && (\r\n                  <div style={{\r\n                    marginTop: '16px',\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                    borderRadius: '6px',\r\n                    color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <div style={{\r\n                borderRadius: '8px',\r\n                overflow: 'hidden',\r\n                border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n              }}>\r\n                <table style={{ \r\n                  width: '100%', \r\n                  borderCollapse: 'collapse',\r\n                  fontSize: '14px'\r\n                }}>\r\n                  <thead style={{ \r\n                    backgroundColor: isDarkMode ? '#1f2937' : '#f9fafb',\r\n                    color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                    fontWeight: 500\r\n                  }}>\r\n                    <tr>\r\n                      <th style={{ \r\n                        padding: '12px 16px',\r\n                        textAlign: 'left',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                      }}>\r\n                        Date/Time\r\n                      </th>\r\n                      <th style={{ \r\n                        padding: '12px 16px',\r\n                        textAlign: 'left',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                      }}>\r\n                        Test Options\r\n                      </th>\r\n                      <th style={{ \r\n                        padding: '12px 16px',\r\n                        textAlign: 'left',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                      }}>\r\n                        Status\r\n                      </th>\r\n                      <th style={{ \r\n                        padding: '12px 16px',\r\n                        textAlign: 'left',\r\n                        borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                      }}>\r\n                        Type\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {testHistory.slice().reverse().map((item, index) => (\r\n                      <tr key={item.id} style={{ \r\n                        backgroundColor: index % 2 === 0 \r\n                          ? (isDarkMode ? '#111827' : '#ffffff') \r\n                          : (isDarkMode ? '#1f2937' : '#f9fafb') \r\n                      }}>\r\n                        <td style={{ \r\n                          padding: '12px 16px',\r\n                          borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                          color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                        }}>\r\n                          {new Date(item.test_date).toLocaleString()}\r\n                        </td>\r\n                        <td style={{ \r\n                          padding: '12px 16px',\r\n                          borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                          color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                        }}>\r\n                          {item.results.testedOptions ? item.results.testedOptions.join(', ') : item.test_type}\r\n                        </td>\r\n                        <td style={{ \r\n                          padding: '12px 16px',\r\n                          borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <span style={{ \r\n                            display: 'inline-block',\r\n                            padding: '4px 8px',\r\n                            borderRadius: '9999px',\r\n                            fontSize: '12px',\r\n                            fontWeight: 500,\r\n                            backgroundColor: item.status === 'completed' \r\n                              ? (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5')\r\n                              : (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                            color: item.status === 'completed'\r\n                              ? (isDarkMode ? '#34d399' : '#047857')\r\n                              : (isDarkMode ? '#f87171' : '#b91c1c')\r\n                          }}>\r\n                            {item.status === 'completed' ? 'SUCCESS' : 'FAILED'}\r\n                          </span>\r\n                        </td>\r\n                        <td style={{ \r\n                          padding: '12px 16px',\r\n                          borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <span style={{ \r\n                            display: 'inline-block',\r\n                            padding: '4px 8px',\r\n                            borderRadius: '9999px',\r\n                            fontSize: '12px',\r\n                            fontWeight: 500,\r\n                            backgroundColor: item.is_simulated || item.results.simulated\r\n                              ? (isDarkMode ? 'rgba(245, 158, 11, 0.2)' : '#fffbeb')\r\n                              : (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5'),\r\n                            color: item.is_simulated || item.results.simulated\r\n                              ? (isDarkMode ? '#fbbf24' : '#d97706')\r\n                              : (isDarkMode ? '#34d399' : '#047857')\r\n                          }}>\r\n                            {item.is_simulated || item.results.simulated ? 'SIMULATION' : 'REAL DATA'}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Export History Button */}\r\n            {testHistory.length > 0 && (\r\n              <div style={{ marginTop: '20px' }}>\r\n                <button \r\n                  onClick={() => {\r\n                    // Export the test history\r\n                    const historyData = JSON.stringify(testHistory, null, 2);\r\n                    const blob = new Blob([historyData], { type: 'application/json' });\r\n                    const url = URL.createObjectURL(blob);\r\n                    const a = document.createElement('a');\r\n                    a.href = url;\r\n                    a.download = `heps_test_history_${profileId || 'unknown'}.json`;\r\n                    document.body.appendChild(a);\r\n                    a.click();\r\n                    document.body.removeChild(a);\r\n                    URL.revokeObjectURL(url);\r\n                  }}\r\n                  style={{\r\n                    backgroundColor: '#10b981',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '6px',\r\n                    padding: '8px 16px',\r\n                    fontSize: '14px',\r\n                    fontWeight: 500,\r\n                    cursor: 'pointer',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    gap: '8px'\r\n                  }}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Export Test History\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}