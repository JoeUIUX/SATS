{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/HEPSTestPanel.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\n\r\n// Import the HEPS-specific functions\r\nimport { runHEPSCheckout } from '@/services/checkout/hepsCheckout';\r\nimport { generateHEPSReport } from '@/services/reports/hepsReport';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface HEPSTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n}\r\n\r\nexport const HEPSTestPanel: React.FC<HEPSTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Determine if heater test options are enabled\r\n  const enableHeaterTest = options.includes('Heater Test');\r\n  const enableCurrentTest = options.includes('Current Measurement');\r\n  const enablePowerCycle = options.includes('Power Cycle Test');\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting HEPS Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common HEPS parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for different HEPS parameters\r\n              if (param.includes(\"HEPS_Heater\")) {\r\n                if (param.includes(\"Status\")) {\r\n                  return `${param}=${Math.round(Math.random())}`;  // 0 or 1\r\n                } else if (param.includes(\"Temperature\")) {\r\n                  return `${param}=${20 + Math.floor(Math.random() * 30)}`;  // 20-50°C\r\n                } else if (param.includes(\"Current\")) {\r\n                  return `${param}=${500 + Math.floor(Math.random() * 500)}`;  // 500-1000mA\r\n                } else if (param.includes(\"Voltage\")) {\r\n                  return `${param}=${28 + Math.random() * 2}`;  // 28-30V\r\n                } else if (param.includes(\"Power\")) {\r\n                  return `${param}=${15 + Math.floor(Math.random() * 10)}`;  // 15-25W\r\n                } else if (param.includes(\"Count\")) {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // 0-99\r\n                } else if (param.includes(\"Test\")) {\r\n                  if (param.includes(\"Done\")) {\r\n                    return `${param}=1`;  // Test completed\r\n                  } else if (param.includes(\"Result\")) {\r\n                    return `${param}=PASS`;  // Test result\r\n                  } else {\r\n                    return `${param}=1`;  // Other test flags\r\n                  }\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // Generic value\r\n                }\r\n              } else if (param.includes(\"HEPS_Power\")) {\r\n                if (param.includes(\"Status\")) {\r\n                  return `${param}=1`;  // Power on\r\n                } else {\r\n                  return `${param}=${Math.floor(Math.random() * 100)}`;  // Generic value\r\n                }\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n      }\r\n      \r\n      // Run the HEPS checkout test with progress updates\r\n      const results = await runHEPSCheckout(sock, \r\n        { \r\n          testHeaters: enableHeaterTest, \r\n          testCurrent: enableCurrentTest, \r\n          testPowerCycle: enablePowerCycle \r\n        }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running HEPS checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateHEPSReport(results);\r\n      alert(`HEPS report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  // Helper function to render the temperature trend chart\r\n  const renderTemperatureTrend = (heaterData: any, index: number) => {\r\n    if (!heaterData || !heaterData.tempReadings || heaterData.tempReadings.length === 0) {\r\n      return (\r\n        <div style={{ \r\n          padding: '16px', \r\n          textAlign: 'center', \r\n          color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n          fontStyle: 'italic'\r\n        }}>\r\n          No temperature data available\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Generate array for the temperature points\r\n    const tempPoints = heaterData.tempReadings.map((temp: number, idx: number) => ({\r\n      time: idx * heaterData.readingInterval,\r\n      temp: temp\r\n    }));\r\n\r\n    return (\r\n      <div style={{ height: '200px', marginBottom: '20px' }}>\r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between',\r\n          marginBottom: '8px',\r\n          fontSize: '13px',\r\n          color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n        }}>\r\n          <span>Initial: {heaterData.initialTemp}°C</span>\r\n          <span>Max: {Math.max(...heaterData.tempReadings).toFixed(1)}°C</span>\r\n          <span>Final: {heaterData.tempReadings[heaterData.tempReadings.length - 1]}°C</span>\r\n        </div>\r\n        <div style={{ \r\n          position: 'relative',\r\n          height: '160px',\r\n          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n          borderRadius: '6px',\r\n          padding: '8px',\r\n          overflow: 'hidden'\r\n        }}>\r\n          <div style={{ \r\n            position: 'absolute',\r\n            bottom: '8px',\r\n            left: '8px',\r\n            right: '8px',\r\n            height: '130px'\r\n          }}>\r\n            {/* SVG line chart for temperature */}\r\n            <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${tempPoints.length} 100`} preserveAspectRatio=\"none\">\r\n              <polyline\r\n                points={tempPoints.map((point: any, i: number) => \r\n                  `${i * (100 / (tempPoints.length - 1))},${100 - ((point.temp - Math.min(...heaterData.tempReadings)) / \r\n                  (Math.max(...heaterData.tempReadings) - Math.min(...heaterData.tempReadings)) * 100)}`\r\n                ).join(' ')}\r\n                stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\r\n                strokeWidth=\"2\"\r\n                fill=\"none\"\r\n              />\r\n            </svg>\r\n          </div>\r\n          {/* Simple X-axis label */}\r\n          <div style={{ \r\n            position: 'absolute', \r\n            bottom: '0', \r\n            right: '8px',\r\n            fontSize: '10px',\r\n            color: isDarkMode ? '#9ca3af' : '#6b7280'\r\n          }}>\r\n            {heaterData.testDuration}s\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Helper to render thermal rise data\r\n  const renderThermalRiseData = (heaterData: any) => {\r\n    if (!heaterData || !heaterData.thermalRise) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: '16px' }}>\r\n        <div style={{ \r\n          padding: '12px',\r\n          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n          borderRadius: '6px',\r\n          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n          marginBottom: '8px'\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span style={{ fontWeight: 'bold' }}>Temperature Rise:</span>\r\n            <span>{heaterData.thermalRise.totalRise.toFixed(1)}°C</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Rise Rate:</span>\r\n            <span>{heaterData.thermalRise.riseRate.toFixed(2)}°C/min</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Time to 5°C Rise:</span>\r\n            <span>{heaterData.thermalRise.timeTo5C.toFixed(1)}s</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <span>Time to 10°C Rise:</span>\r\n            <span>{heaterData.thermalRise.timeTo10C ? heaterData.thermalRise.timeTo10C.toFixed(1) + 's' : 'N/A'}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Helper to render power consumption data\r\n  const renderPowerConsumption = (heaterData: any) => {\r\n    if (!heaterData || !heaterData.power) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: '16px' }}>\r\n        <div style={{ \r\n          padding: '12px',\r\n          backgroundColor: isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5',\r\n          borderRadius: '6px',\r\n          border: `1px solid ${isDarkMode ? 'rgba(16, 185, 129, 0.3)' : '#a7f3d0'}`,\r\n          marginBottom: '8px'\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span style={{ fontWeight: 'bold' }}>Average Current:</span>\r\n            <span>{heaterData.power.avgCurrent.toFixed(1)} mA</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Max Current:</span>\r\n            <span>{heaterData.power.maxCurrent.toFixed(1)} mA</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>\r\n            <span>Average Power:</span>\r\n            <span>{heaterData.power.avgPower.toFixed(2)} W</span>\r\n          </div>\r\n          \r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <span>Total Energy:</span>\r\n            <span>{heaterData.power.totalEnergy.toFixed(2)} Wh</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            HEPS Test Status\r\n          </h3>\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <div className={styles.progressContainer}>\r\n            <div className={styles.progressLabel}>\r\n              <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                {currentStep || 'Waiting to start test...'}\r\n              </span>\r\n              <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                {progress}%\r\n              </span>\r\n            </div>\r\n            <div \r\n              className={styles.progressBar}\r\n              style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n            >\r\n              <div \r\n                className={styles.progressBarFill}\r\n                style={{ \r\n                  width: `${progress}%`,\r\n                  background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Display the testing options */}\r\n          <div style={{ marginBottom: '20px' }}>\r\n            <h4 style={{ \r\n              fontSize: '14px', \r\n              marginBottom: '10px',\r\n              color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n            }}>\r\n              Selected Test Options:\r\n            </h4>\r\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n              {options.map((option, index) => (\r\n                <div key={index} style={{ \r\n                  padding: '6px 10px', \r\n                  backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                  borderRadius: '4px',\r\n                  fontSize: '13px',\r\n                  color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '6px'\r\n                }}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  {option}\r\n                </div>\r\n              ))}\r\n              {options.length === 0 && (\r\n                <div style={{ \r\n                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                  fontStyle: 'italic',\r\n                  fontSize: '13px'\r\n                }}>\r\n                  No specific options selected. Running with defaults.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Connection Status */}\r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n              <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n              </svg>\r\n              Connection Mode\r\n            </div>\r\n            <span className={`${styles.statusBadge} ${\r\n              isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n            }`}>\r\n              {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              marginTop: '10px'\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              HEPS Testing\r\n            </div>\r\n            <span style={{ display: 'flex', gap: '8px' }}>\r\n              <span className={`${styles.parameterValue} ${\r\n                enableHeaterTest ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Heaters: {enableHeaterTest ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n              <span className={`${styles.parameterValue} ${\r\n                enableCurrentTest ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Current: {enableCurrentTest ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n              <span className={`${styles.parameterValue} ${\r\n                enablePowerCycle ? styles.colorCompleted : styles.colorWaiting\r\n              }`}>\r\n                Power Cycle: {enablePowerCycle ? 'ENABLED' : 'DISABLED'}\r\n              </span>\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Run/Re-run Test Button */}\r\n          <button \r\n            onClick={startTest} \r\n            className={styles.button}\r\n            disabled={isRunning}\r\n            style={{ \r\n              backgroundColor: isRunning ? '#9ca3af' :\r\n                hasRunTest ? '#4f46e5' : '#10b981',\r\n              color: 'white',\r\n              marginTop: '20px'\r\n            }}\r\n          >\r\n            {isRunning ? (\r\n              <>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                Running Test...\r\n              </>\r\n            ) : hasRunTest ? (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Re-run Test\r\n              </>\r\n            ) : (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Run Test\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {results && (\r\n        <div className=\"space-y-4 mt-4\">\r\n          {/* HEPS System Status Card */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                  : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                HEPS System Status\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div style={{ \r\n                display: 'grid', \r\n                gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', \r\n                gap: '16px',\r\n                marginBottom: '16px'\r\n              }}>\r\n                <div style={{\r\n                  borderRadius: '8px',\r\n                  border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                  overflow: 'hidden'\r\n                }}>\r\n                  <div style={{\r\n                    padding: '10px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px',\r\n                    fontWeight: 'bold',\r\n                    color: isDarkMode ? '#d1d5db' : '#374151'\r\n                  }}>\r\n                    Power Status\r\n                  </div>\r\n                  <div style={{\r\n                    padding: '12px',\r\n                    textAlign: 'center'\r\n                  }}>\r\n                    <div style={{\r\n                      fontSize: '24px',\r\n                      fontWeight: 'bold',\r\n                      color: results.system.powerStatus === \"1\" ? \r\n                        (isDarkMode ? '#34d399' : '#059669') : \r\n                        (isDarkMode ? '#f87171' : '#dc2626')\r\n                    }}>\r\n                      {results.system.powerStatus === \"1\" ? \"POWERED\" : \"OFF\"}\r\n                    </div>\r\n                    <div style={{\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      marginTop: '4px'\r\n                    }}>\r\n                      Current State\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div style={{\r\n                  borderRadius: '8px',\r\n                  border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                  overflow: 'hidden'\r\n                }}>\r\n                  <div style={{\r\n                    padding: '10px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px',\r\n                    fontWeight: 'bold',\r\n                    color: isDarkMode ? '#d1d5db' : '#374151'\r\n                  }}>\r\n                    System Voltage\r\n                  </div>\r\n                  <div style={{\r\n                    padding: '12px',\r\n                    textAlign: 'center'\r\n                  }}>\r\n                    <div style={{\r\n                      fontSize: '24px',\r\n                      fontWeight: 'bold',\r\n                      color: isDarkMode ? '#d1d5db' : '#111827'\r\n                    }}>\r\n                      {results.system.voltage} V\r\n                    </div>\r\n                    <div style={{\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      marginTop: '4px'\r\n                    }}>\r\n                      Bus Voltage\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div style={{\r\n                  borderRadius: '8px',\r\n                  border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                  overflow: 'hidden'\r\n                }}>\r\n                  <div style={{\r\n                    padding: '10px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px',\r\n                    fontWeight: 'bold',\r\n                    color: isDarkMode ? '#d1d5db' : '#374151'\r\n                  }}>\r\n                    System Current\r\n                  </div>\r\n                  <div style={{\r\n                    padding: '12px',\r\n                    textAlign: 'center'\r\n                  }}>\r\n                    <div style={{\r\n                      fontSize: '24px',\r\n                      fontWeight: 'bold',\r\n                      color: isDarkMode ? '#d1d5db' : '#111827'\r\n                    }}>\r\n                      {results.system.current} mA\r\n                    </div>\r\n                    <div style={{\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      marginTop: '4px'\r\n                    }}>\r\n                      Total Current\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Status</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      <span className={`${styles.statusBadge} ${\r\n                        results.system.powerStatus === \"1\" ? styles.colorCompleted : styles.colorError\r\n                      }`}>\r\n                        {results.system.powerStatus === \"1\" ? \"ON\" : \"OFF\"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Voltage</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.voltage} V</td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Current</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.current} mA</td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>System Power</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.power} W</td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Cycle Count</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.powerCycleCount}</td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Operating Time</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.system.operatingTime} min</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Heater Status Summary Card */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                  : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Heater Status Summary\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div style={{ \r\n                display: 'grid', \r\n                gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', \r\n                gap: '16px',\r\n                marginBottom: '16px'\r\n              }}>\r\n                {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                  <div key={index} style={{\r\n                    borderRadius: '8px',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    overflow: 'hidden'\r\n                  }}>\r\n                    <div style={{\r\n                      padding: '8px',\r\n                      backgroundColor: heater.status === \"1\" ? \r\n                        (isDarkMode ? 'rgba(5, 150, 105, 0.2)' : '#d1fae5') : \r\n                        (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                      textAlign: 'center',\r\n                      fontSize: '14px',\r\n                      fontWeight: 'bold',\r\n                      color: heater.status === \"1\" ? \r\n                        (isDarkMode ? '#34d399' : '#059669') : \r\n                        (isDarkMode ? '#f87171' : '#dc2626')\r\n                    }}>\r\n                      Heater {index + 1}\r\n                    </div>\r\n                    <div style={{\r\n                      padding: '12px',\r\n                      textAlign: 'center'\r\n                    }}>\r\n                      <div style={{\r\n                        fontSize: '18px',\r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#111827'\r\n                      }}>\r\n                        {heater.temperature}°C\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '13px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginTop: '4px'\r\n                      }}>\r\n                        {heater.current} mA\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Temperature</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Current</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  {results.heaters && results.heaters.map((heater: any, index: number) => (\r\n                    <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater {index + 1}</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        <span className={`${styles.statusBadge} ${\r\n                          heater.status === \"1\" ? styles.colorCompleted : styles.colorError\r\n                        }`}>\r\n                          {heater.status === \"1\" ? \"ON\" : \"OFF\"}\r\n                        </span>\r\n                      </td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.temperature}°C</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.current} mA</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{heater.power} W</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Heater Test Results (Only shown if heater tests were enabled and run) */}\r\n          {enableHeaterTest && results.heaterTests && results.heaterTests.length > 0 && (\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n                    : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                  color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Heater Test Results\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                {results.heaterTests.map((heaterTest: any, index: number) => (\r\n                  <div key={index} style={{ \r\n                    marginBottom: '20px', \r\n                    padding: '16px',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    borderRadius: '8px',\r\n                    backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#fff'\r\n                  }}>\r\n                    <div style={{ \r\n                      display: 'flex', \r\n                      justifyContent: 'space-between',\r\n                      alignItems: 'center',\r\n                      marginBottom: '12px'\r\n                    }}>\r\n                      <h4 style={{ \r\n                        fontSize: '16px', \r\n                        fontWeight: 'bold',\r\n                        color: isDarkMode ? '#d1d5db' : '#111827',\r\n                        margin: 0\r\n                      }}>\r\n                        Heater {index + 1} Test Results\r\n                      </h4>\r\n                      <span className={`${styles.statusBadge} ${\r\n                        heaterTest.testResult === \"PASS\" ? styles.colorCompleted : styles.colorError\r\n                      }`}>\r\n                        {heaterTest.testResult}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    {/* Temperature trend chart */}\r\n                    {renderTemperatureTrend(heaterTest, index)}\r\n                    \r\n                    {/* Thermal rise data */}\r\n                    {renderThermalRiseData(heaterTest)}\r\n                    \r\n                    {/* Power consumption data */}\r\n                    {renderPowerConsumption(heaterTest)}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Power Cycle Test Results (Only shown if power cycle tests were enabled and run) */}\r\n          {enablePowerCycle && results.powerCycleTest && (\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #713f12, #854d0e)\" \r\n                    : \"linear-gradient(to right, #fffbeb, #fef3c7)\",\r\n                  color: isDarkMode ? \"#fef3c7\" : \"#854d0e\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Power Cycle Test Results\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <div style={{ \r\n                  marginBottom: '20px', \r\n                  padding: '16px',\r\n                  backgroundColor: results.powerCycleTest.testResult === \"PASS\" ? \r\n                    (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                    (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                  borderRadius: '8px',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  <div style={{ \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: results.powerCycleTest.testResult === \"PASS\" ? \r\n                      (isDarkMode ? '#34d399' : '#059669') : \r\n                      (isDarkMode ? '#f87171' : '#dc2626'),\r\n                    marginBottom: '8px'\r\n                  }}>\r\n                    {results.powerCycleTest.testResult}\r\n                  </div>\r\n                  <div style={{ \r\n                    color: isDarkMode ? '#d1d5db' : '#374151',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    Power Cycle Test {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles} cycles completed\r\n                  </div>\r\n                </div>\r\n                \r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycles Completed</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                        {results.powerCycleTest.cyclesCompleted} of {results.powerCycleTest.totalCycles}\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Cycle Time</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.cycleTime} s</td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power On Time</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOnTime} s</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Power Off Time</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.powerOffTime} s</td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Total Test Time</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.totalTestTime} s</td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Failures</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.powerCycleTest.failures}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Current Measurement Test Results (Only shown if current tests were enabled and run) */}\r\n          {enableCurrentTest && results.currentTest && (\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #164e63, #0e7490)\" \r\n                    : \"linear-gradient(to right, #ecfeff, #cffafe)\",\r\n                  color: isDarkMode ? \"#cffafe\" : \"#0e7490\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path d=\"M13 7H7v6h6V7z\" />\r\n                    <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Current Measurement Test Results\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <div style={{ \r\n                  marginBottom: '20px', \r\n                  padding: '16px',\r\n                  backgroundColor: results.currentTest.testResult === \"PASS\" ? \r\n                    (isDarkMode ? 'rgba(5, 150, 105, 0.1)' : '#d1fae5') : \r\n                    (isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2'),\r\n                  borderRadius: '8px',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  <div style={{ \r\n                    fontSize: '20px', \r\n                    fontWeight: 'bold',\r\n                    color: results.currentTest.testResult === \"PASS\" ? \r\n                      (isDarkMode ? '#34d399' : '#059669') : \r\n                      (isDarkMode ? '#f87171' : '#dc2626'),\r\n                    marginBottom: '8px'\r\n                  }}>\r\n                    {results.currentTest.testResult}\r\n                  </div>\r\n                  <div style={{ \r\n                    color: isDarkMode ? '#d1d5db' : '#374151',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    Current measurements {results.currentTest.testResult === \"PASS\" ? \"within\" : \"outside\"} expected range\r\n                  </div>\r\n                </div>\r\n                \r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Expected (mA)</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Measured (mA)</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Deviation (%)</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Result</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                    {results.currentTest.heaterResults && results.currentTest.heaterResults.map((result: any, index: number) => (\r\n                      <tr key={index} className={index % 2 === 1 ? styles.tableRowAlt : undefined} style={{ backgroundColor: index % 2 === 1 ? (isDarkMode ? \"#111827\" : \"#f9fafb\") : undefined }}>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Heater {index + 1}</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.expectedCurrent}</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.measuredCurrent}</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{result.deviation.toFixed(2)}%</td>\r\n                        <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                          <span className={`${styles.statusBadge} ${\r\n                            result.inRange ? styles.colorCompleted : styles.colorError\r\n                          }`}>\r\n                            {result.inRange ? \"PASS\" : \"FAIL\"}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n</tbody>\r\n                </table>\r\n                \r\n                <div style={{\r\n                  marginTop: '16px',\r\n                  padding: '12px',\r\n                  backgroundColor: isDarkMode ? 'rgba(17, 24, 39, 0.5)' : '#f9fafb',\r\n                  borderRadius: '6px',\r\n                  fontSize: '14px',\r\n                  color: isDarkMode ? '#d1d5db' : '#4b5563'\r\n                }}>\r\n                  <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>Test Summary:</div>\r\n                  <div>• Test Duration: {results.currentTest.testDuration} s</div>\r\n                  <div>• Samples Collected: {results.currentTest.sampleCount}</div>\r\n                  <div>• Maximum Deviation: {results.currentTest.maxDeviation.toFixed(2)}%</div>\r\n                  <div>• Tolerance Range: ±{results.currentTest.tolerance}%</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Generate Report Button */}\r\n          <div>\r\n            <button \r\n              onClick={generateReport}\r\n              className={styles.reportButton}\r\n              style={{\r\n                backgroundColor: \"#10b981\",\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              Generate Report\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"AAAA,mEAAmE;;;;;AACnE;AACA;AAAA;AACA;AACA,gUAAiD,yCAAyC;AAE1F,qCAAqC;AACrC;AACA;;;;;;;;AAEA,8DAA8D;AAC9D,MAAM,kBAAkD,CAAC,EAAE,YAAY,EAAE,iBACvE,8OAAC;QAAI,OAAO;YACV,UAAU;YACV,SAAS;YACT,iBAAiB,eAAe,4BAA4B;YAC5D,OAAO,eAAe,YAAY;YAClC,cAAc;YACd,SAAS,eAAe,UAAU;QACpC;kBAAG;;;;;;AAkBE,MAAM,gBAA8C,CAAC,EAC1D,OAAO,EACP,IAAI,EACJ,cAAc,EACd,WAAW,EACX,WAAW,EACX,YAAY,EACb;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACvD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAO;IAC5C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3D,+CAA+C;IAC/C,MAAM,mBAAmB,QAAQ,QAAQ,CAAC;IAC1C,MAAM,oBAAoB,QAAQ,QAAQ,CAAC;IAC3C,MAAM,mBAAmB,QAAQ,QAAQ,CAAC;IAE1C,sBAAsB;IACtB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB;YACpB,cAAc,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC5D;QAEA,gBAAgB;QAChB;QAEA,0BAA0B;QAC1B,MAAM,WAAW,IAAI,iBAAiB;YACpC;QACF;QAEA,SAAS,OAAO,CAAC,SAAS,eAAe,EAAE;YACzC,YAAY;YACZ,iBAAiB;gBAAC;aAAQ;QAC5B;QAEA,OAAO,IAAM,SAAS,UAAU;IAClC,GAAG,EAAE;IAEL,oDAAoD;IACpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,kDAAkD;QAClD,QAAQ,GAAG,CAAC,yBAAyB,CAAA,GAAA,wHAAA,CAAA,kBAAe,AAAD,EAAE;QAErD,4CAA4C;QAC5C,MAAM,gBAAgB,aAAa,OAAO,CAAC;QAC3C,IAAI,gBAAgB,MAAM,wBAAwB;QAElD,IAAI,eAAe;YACjB,IAAI;gBACF,MAAM,aAAa,KAAK,KAAK,CAAC;gBAC9B,wEAAwE;gBACxE,IAAI,cAAc,WAAW,MAAM,KAAK,MAAM;oBAC5C,QAAQ,GAAG,CAAC;oBACZ,gBAAgB;gBAClB,OAAO;oBACL,QAAQ,GAAG,CAAC;oBACZ,gBAAgB;gBAClB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,8BAA8B;YAC9C;QACF,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;QAEA,2DAA2D;QAC3D,IAAI,QAAQ,KAAK,WAAW,KAAK,WAAW;YAC1C,gBAAgB,KAAK,WAAW;YAChC,QAAQ,GAAG,CAAC,CAAC,wCAAwC,EAAE,eAAe;QACxE;QAEA,qBAAqB;QACrB,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD,EAAE;QAElB,IAAI,eAAe;YACjB,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;IACF,GAAG;QAAC;KAAK;IAET,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,mFAAmF;QACnF,IAAI,gBAAgB,CAAC,cAAc,CAAC,WAAW;YAC7C,QAAQ,GAAG,CAAC,6CAA6C;YACzD;QACF;IACF,GAAG;QAAC;QAAc;QAAY;KAAU;IAExC,MAAM,YAAY;QAChB,IAAI,WAAW;QAEf,aAAa;QACb,YAAY;QACZ,SAAS;QACT,cAAc;QAEd,IAAI;YACF,0CAA0C;YAC1C;YAEA,yBAAyB;YACzB,eAAe;YAEf,oCAAoC;YACpC,IAAI,CAAC,QAAS,OAAO,KAAK,YAAY,KAAK,cAC9B,OAAO,KAAK,IAAI,KAAK,YAAa;gBAC7C,QAAQ,IAAI,CAAC;gBAEb,qCAAqC;gBACrC,MAAM,gBAAgB;oBACpB,cAAc,CAAC;wBACb,uDAAuD;wBACvD,OAAO,WAAW,GAAG,CAAC,CAAA;4BACpB,uDAAuD;4BACvD,IAAI,MAAM,QAAQ,CAAC,gBAAgB;gCACjC,IAAI,MAAM,QAAQ,CAAC,WAAW;oCAC5B,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,EAAG,SAAS;gCAC5D,OAAO,IAAI,MAAM,QAAQ,CAAC,gBAAgB;oCACxC,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,EAAG,UAAU;gCACvE,OAAO,IAAI,MAAM,QAAQ,CAAC,YAAY;oCACpC,OAAO,GAAG,MAAM,CAAC,EAAE,MAAM,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,EAAG,aAAa;gCAC5E,OAAO,IAAI,MAAM,QAAQ,CAAC,YAAY;oCACpC,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,MAAM,KAAK,GAAG,EAAG,SAAS;gCACzD,OAAO,IAAI,MAAM,QAAQ,CAAC,UAAU;oCAClC,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,EAAG,SAAS;gCACtE,OAAO,IAAI,MAAM,QAAQ,CAAC,UAAU;oCAClC,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,EAAG,OAAO;gCAChE,OAAO,IAAI,MAAM,QAAQ,CAAC,SAAS;oCACjC,IAAI,MAAM,QAAQ,CAAC,SAAS;wCAC1B,OAAO,GAAG,MAAM,EAAE,CAAC,EAAG,iBAAiB;oCACzC,OAAO,IAAI,MAAM,QAAQ,CAAC,WAAW;wCACnC,OAAO,GAAG,MAAM,KAAK,CAAC,EAAG,cAAc;oCACzC,OAAO;wCACL,OAAO,GAAG,MAAM,EAAE,CAAC,EAAG,mBAAmB;oCAC3C;gCACF,OAAO;oCACL,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,EAAG,gBAAgB;gCACzE;4BACF,OAAO,IAAI,MAAM,QAAQ,CAAC,eAAe;gCACvC,IAAI,MAAM,QAAQ,CAAC,WAAW;oCAC5B,OAAO,GAAG,MAAM,EAAE,CAAC,EAAG,WAAW;gCACnC,OAAO;oCACL,OAAO,GAAG,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,MAAM,EAAG,gBAAgB;gCACzE;4BACF,OAAO;gCACL,OAAO,GAAG,MAAM,UAAU,CAAC;4BAC7B;wBACF;oBACF;oBACA,MAAM,OAAO;wBACX,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,SAAS;wBACvC,OAAO,QAAQ,OAAO;oBACxB;oBACA,SAAS;wBACP,QAAQ,GAAG,CAAC,CAAC,oBAAoB,CAAC;wBAClC,OAAO,QAAQ,OAAO,CAAC;oBACzB;oBACA,aAAa;gBACf;gBAEA,2BAA2B;gBAC3B,OAAO;YACT;YAEA,mDAAmD;YACnD,MAAM,UAAU,MAAM,CAAA,GAAA,2IAAA,CAAA,kBAAe,AAAD,EAAE,MACpC;gBACE,aAAa;gBACb,aAAa;gBACb,gBAAgB;YAClB,GACA,CAAC,MAAM;gBACL,eAAe;gBACf,YAAY;YACd;YAGF,gDAAgD;YAChD,QAAQ,aAAa,GAAG;YAExB,2BAA2B;YAC3B,WAAW;YAEX,0CAA0C;YAC1C,eAAe;QAEjB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YACzD,YAAY;QACd,SAAU;YACR,aAAa;YACb,YAAY;YACZ,eAAe;QACjB;IACF;IAEA,0CAA0C;IAC1C,MAAM,iBAAiB;QACrB,IAAI,CAAC,SAAS;YACZ,SAAS;YACT;QACF;QAEA,IAAI;YACF,MAAM,aAAa,MAAM,CAAA,GAAA,wIAAA,CAAA,qBAAkB,AAAD,EAAE;YAC5C,MAAM,CAAC,mBAAmB,EAAE,YAAY;QAC1C,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAC3D;IACF;IAEA,wDAAwD;IACxD,MAAM,yBAAyB,CAAC,YAAiB;QAC/C,IAAI,CAAC,cAAc,CAAC,WAAW,YAAY,IAAI,WAAW,YAAY,CAAC,MAAM,KAAK,GAAG;YACnF,qBACE,8OAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,WAAW;oBACX,OAAO,aAAa,YAAY;oBAChC,WAAW;gBACb;0BAAG;;;;;;QAIP;QAEA,4CAA4C;QAC5C,MAAM,aAAa,WAAW,YAAY,CAAC,GAAG,CAAC,CAAC,MAAc,MAAgB,CAAC;gBAC7E,MAAM,MAAM,WAAW,eAAe;gBACtC,MAAM;YACR,CAAC;QAED,qBACE,8OAAC;YAAI,OAAO;gBAAE,QAAQ;gBAAS,cAAc;YAAO;;8BAClD,8OAAC;oBAAI,OAAO;wBACV,SAAS;wBACT,gBAAgB;wBAChB,cAAc;wBACd,UAAU;wBACV,OAAO,aAAa,YAAY;oBAClC;;sCACE,8OAAC;;gCAAK;gCAAU,WAAW,WAAW;gCAAC;;;;;;;sCACvC,8OAAC;;gCAAK;gCAAM,KAAK,GAAG,IAAI,WAAW,YAAY,EAAE,OAAO,CAAC;gCAAG;;;;;;;sCAC5D,8OAAC;;gCAAK;gCAAQ,WAAW,YAAY,CAAC,WAAW,YAAY,CAAC,MAAM,GAAG,EAAE;gCAAC;;;;;;;;;;;;;8BAE5E,8OAAC;oBAAI,OAAO;wBACV,UAAU;wBACV,QAAQ;wBACR,iBAAiB,aAAa,YAAY;wBAC1C,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;wBACzD,cAAc;wBACd,SAAS;wBACT,UAAU;oBACZ;;sCACE,8OAAC;4BAAI,OAAO;gCACV,UAAU;gCACV,QAAQ;gCACR,MAAM;gCACN,OAAO;gCACP,QAAQ;4BACV;sCAEE,cAAA,8OAAC;gCAAI,OAAM;gCAAO,QAAO;gCAAO,SAAS,CAAC,IAAI,EAAE,WAAW,MAAM,CAAC,IAAI,CAAC;gCAAE,qBAAoB;0CAC3F,cAAA,8OAAC;oCACC,QAAQ,WAAW,GAAG,CAAC,CAAC,OAAY,IAClC,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,MAAO,CAAC,MAAM,IAAI,GAAG,KAAK,GAAG,IAAI,WAAW,YAAY,CAAC,IACnG,CAAC,KAAK,GAAG,IAAI,WAAW,YAAY,IAAI,KAAK,GAAG,IAAI,WAAW,YAAY,CAAC,IAAI,KAAM,EACtF,IAAI,CAAC;oCACP,QAAQ,aAAa,YAAY;oCACjC,aAAY;oCACZ,MAAK;;;;;;;;;;;;;;;;sCAKX,8OAAC;4BAAI,OAAO;gCACV,UAAU;gCACV,QAAQ;gCACR,OAAO;gCACP,UAAU;gCACV,OAAO,aAAa,YAAY;4BAClC;;gCACG,WAAW,YAAY;gCAAC;;;;;;;;;;;;;;;;;;;IAKnC;IAEA,qCAAqC;IACrC,MAAM,wBAAwB,CAAC;QAC7B,IAAI,CAAC,cAAc,CAAC,WAAW,WAAW,EAAE;YAC1C,OAAO;QACT;QAEA,qBACE,8OAAC;YAAI,OAAO;gBAAE,cAAc;YAAO;sBACjC,cAAA,8OAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,iBAAiB,aAAa,YAAY;oBAC1C,cAAc;oBACd,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;oBACzD,cAAc;gBAChB;;kCACE,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;gCAAK,OAAO;oCAAE,YAAY;gCAAO;0CAAG;;;;;;0CACrC,8OAAC;;oCAAM,WAAW,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAGrD,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;0CAAK;;;;;;0CACN,8OAAC;;oCAAM,WAAW,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAGpD,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;0CAAK;;;;;;0CACN,8OAAC;;oCAAM,WAAW,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAGpD,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;wBAAgB;;0CAC7D,8OAAC;0CAAK;;;;;;0CACN,8OAAC;0CAAM,WAAW,WAAW,CAAC,SAAS,GAAG,WAAW,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,MAAM;;;;;;;;;;;;;;;;;;;;;;;IAKxG;IAEA,0CAA0C;IAC1C,MAAM,yBAAyB,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,WAAW,KAAK,EAAE;YACpC,OAAO;QACT;QAEA,qBACE,8OAAC;YAAI,OAAO;gBAAE,cAAc;YAAO;sBACjC,cAAA,8OAAC;gBAAI,OAAO;oBACV,SAAS;oBACT,iBAAiB,aAAa,2BAA2B;oBACzD,cAAc;oBACd,QAAQ,CAAC,UAAU,EAAE,aAAa,4BAA4B,WAAW;oBACzE,cAAc;gBAChB;;kCACE,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;gCAAK,OAAO;oCAAE,YAAY;gCAAO;0CAAG;;;;;;0CACrC,8OAAC;;oCAAM,WAAW,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAGhD,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;0CAAK;;;;;;0CACN,8OAAC;;oCAAM,WAAW,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAGhD,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;4BAAiB,cAAc;wBAAM;;0CAClF,8OAAC;0CAAK;;;;;;0CACN,8OAAC;;oCAAM,WAAW,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;kCAG9C,8OAAC;wBAAI,OAAO;4BAAE,SAAS;4BAAQ,gBAAgB;wBAAgB;;0CAC7D,8OAAC;0CAAK;;;;;;0CACN,8OAAC;;oCAAM,WAAW,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;oCAAG;;;;;;;;;;;;;;;;;;;;;;;;IAKzD;IAEA,qBACE,8OAAC;QAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;YAC7B,uBACC,8OAAC,iIAAA,CAAA,QAAK;gBAAC,SAAQ;0BACb,cAAA,8OAAC;8BAAG;;;;;;;;;;;0BAIR,8OAAC;gBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;gBACtB,OAAO;oBACL,iBAAiB,aAAa,YAAY;oBAC1C,aAAa,aAAa,YAAY;gBACxC;;kCAEA,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;wBAC5B,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;kCAEA,cAAA,8OAAC;4BAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;4BAAE,OAAO;gCAAE,OAAO,aAAa,YAAY;4BAAU;;8CAClF,8OAAC;oCAAI,OAAM;oCAA6B,SAAQ;oCAAY,MAAK;oCAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;8CACxG,cAAA,8OAAC;wCAAK,UAAS;wCAAU,GAAE;wCAAwL,UAAS;;;;;;;;;;;gCACxN;;;;;;;;;;;;kCAKV,8OAAC;wBAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;;0CAChC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,iBAAiB;;kDACtC,8OAAC;wCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,aAAa;;0DAClC,8OAAC;gDAAK,WAAW,oLAAA,CAAA,UAAM,CAAC,YAAY;gDAAE,OAAO;oDAAE,OAAO,aAAa,YAAY;gDAAU;0DACtF,eAAe;;;;;;0DAElB,8OAAC;gDAAK,WAAW,oLAAA,CAAA,UAAM,CAAC,aAAa;gDAAE,OAAO;oDAAE,OAAO,aAAa,YAAY;gDAAU;;oDACvF;oDAAS;;;;;;;;;;;;;kDAGd,8OAAC;wCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wCAC7B,OAAO;4CAAE,iBAAiB,aAAa,YAAY;wCAAU;kDAE7D,cAAA,8OAAC;4CACC,WAAW,oLAAA,CAAA,UAAM,CAAC,eAAe;4CACjC,OAAO;gDACL,OAAO,GAAG,SAAS,CAAC,CAAC;gDACrB,YAAY;4CACd;;;;;;;;;;;;;;;;;0CAMN,8OAAC;gCAAI,OAAO;oCAAE,cAAc;gCAAO;;kDACjC,8OAAC;wCAAG,OAAO;4CACT,UAAU;4CACV,cAAc;4CACd,OAAO,aAAa,YAAY;wCAClC;kDAAG;;;;;;kDAGH,8OAAC;wCAAI,OAAO;4CAAE,SAAS;4CAAQ,UAAU;4CAAQ,KAAK;wCAAM;;4CACzD,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBACpB,8OAAC;oDAAgB,OAAO;wDACtB,SAAS;wDACT,iBAAiB,aAAa,YAAY;wDAC1C,cAAc;wDACd,UAAU;wDACV,OAAO,aAAa,YAAY;wDAChC,SAAS;wDACT,YAAY;wDACZ,KAAK;oDACP;;sEACE,8OAAC;4DAAI,OAAM;4DAA6B,OAAM;4DAAK,QAAO;4DAAK,SAAQ;4DAAY,MAAK;sEACtF,cAAA,8OAAC;gEAAK,UAAS;gEAAU,GAAE;gEAAqH,UAAS;;;;;;;;;;;wDAE1J;;mDAbO;;;;;4CAgBX,QAAQ,MAAM,KAAK,mBAClB,8OAAC;gDAAI,OAAO;oDACV,OAAO,aAAa,YAAY;oDAChC,WAAW;oDACX,UAAU;gDACZ;0DAAG;;;;;;;;;;;;;;;;;;0CAQT,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,YAAY;gCAC9B,OAAO;oCACL,iBAAiB,aAAa,YAAY;oCAC1C,aAAa,aAAa,YAAY;gCACxC;;kDAEA,8OAAC;wCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,cAAc;;0DACnC,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,aAAa;0DAC/G,cAAA,8OAAC;oDAAK,GAAE;;;;;;;;;;;4CACF;;;;;;;kDAGR,8OAAC;wCAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EACtC,oBAAoB,oLAAA,CAAA,UAAM,CAAC,YAAY,GAAG,oLAAA,CAAA,UAAM,CAAC,cAAc,EAC/D;kDACC,oBAAoB,eAAe;;;;;;;;;;;;0CAIxC,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,YAAY;gCAC9B,OAAO;oCACL,iBAAiB,aAAa,YAAY;oCAC1C,aAAa,aAAa,YAAY;oCACtC,WAAW;gCACb;;kDAEA,8OAAC;wCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,cAAc;;0DACnC,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,aAAa;0DAC7G,cAAA,8OAAC;oDAAK,UAAS;oDAAU,GAAE;oDAAwL,UAAS;;;;;;;;;;;4CACxN;;;;;;;kDAGR,8OAAC;wCAAK,OAAO;4CAAE,SAAS;4CAAQ,KAAK;wCAAM;;0DACzC,8OAAC;gDAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,cAAc,CAAC,CAAC,EACzC,mBAAmB,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,YAAY,EAC9D;;oDAAE;oDACQ,mBAAmB,YAAY;;;;;;;0DAE3C,8OAAC;gDAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,cAAc,CAAC,CAAC,EACzC,oBAAoB,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,YAAY,EAC/D;;oDAAE;oDACQ,oBAAoB,YAAY;;;;;;;0DAE5C,8OAAC;gDAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,cAAc,CAAC,CAAC,EACzC,mBAAmB,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,YAAY,EAC9D;;oDAAE;oDACY,mBAAmB,YAAY;;;;;;;;;;;;;;;;;;;0CAMnD,8OAAC;gCACC,SAAS;gCACT,WAAW,oLAAA,CAAA,UAAM,CAAC,MAAM;gCACxB,UAAU;gCACV,OAAO;oCACL,iBAAiB,YAAY,YAC3B,aAAa,YAAY;oCAC3B,OAAO;oCACP,WAAW;gCACb;0CAEC,0BACC;;sDACE,8OAAC;4CAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;4CAAE,OAAM;4CAA6B,OAAM;4CAAK,QAAO;4CAAK,SAAQ;4CAAY,MAAK;4CAAO,QAAO;4CAAe,aAAY;4CAAI,eAAc;4CAAQ,gBAAe;sDACvM,cAAA,8OAAC;gDAAK,GAAE;;;;;;;;;;;wCACJ;;mDAGN,2BACF;;sDACE,8OAAC;4CAAI,OAAM;4CAA6B,SAAQ;4CAAY,MAAK;4CAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;sDAC5G,cAAA,8OAAC;gDAAK,UAAS;gDAAU,GAAE;gDAA+R,UAAS;;;;;;;;;;;wCAC7T;;iEAIR;;sDACE,8OAAC;4CAAI,OAAM;4CAA6B,SAAQ;4CAAY,MAAK;4CAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;sDAC1G,cAAA,8OAAC;gDAAK,UAAS;gDAAU,GAAE;gDAA0G,UAAS;;;;;;;;;;;wCAC1I;;;;;;;;;;;;;;;;;;;;YAQf,yBACC,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;wBACtB,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;;0CAEA,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;gCAC5B,OAAO;oCACL,YAAY,aACR,gDACA;oCACJ,OAAO,aAAa,YAAY;gCAClC;;kDAEA,8OAAC;wCAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;0DAC7B,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;0DACxG,cAAA,8OAAC;oDAAK,UAAS;oDAAU,GAAE;oDAAuJ,UAAS;;;;;;;;;;;4CACvL;;;;;;;kDAKR,8OAAC;wCAAgB,cAAc;;;;;;;;;;;;0CAGjC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;;kDAChC,8OAAC;wCAAI,OAAO;4CACV,SAAS;4CACT,qBAAqB;4CACrB,KAAK;4CACL,cAAc;wCAChB;;0DACE,8OAAC;gDAAI,OAAO;oDACV,cAAc;oDACd,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;oDACzD,UAAU;gDACZ;;kEACE,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,iBAAiB,aAAa,YAAY;4DAC1C,cAAc,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;4DAC/D,UAAU;4DACV,YAAY;4DACZ,OAAO,aAAa,YAAY;wDAClC;kEAAG;;;;;;kEAGH,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,WAAW;wDACb;;0EACE,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,YAAY;oEACZ,OAAO,QAAQ,MAAM,CAAC,WAAW,KAAK,MACnC,aAAa,YAAY,YACzB,aAAa,YAAY;gEAC9B;0EACG,QAAQ,MAAM,CAAC,WAAW,KAAK,MAAM,YAAY;;;;;;0EAEpD,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,OAAO,aAAa,YAAY;oEAChC,WAAW;gEACb;0EAAG;;;;;;;;;;;;;;;;;;0DAMP,8OAAC;gDAAI,OAAO;oDACV,cAAc;oDACd,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;oDACzD,UAAU;gDACZ;;kEACE,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,iBAAiB,aAAa,YAAY;4DAC1C,cAAc,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;4DAC/D,UAAU;4DACV,YAAY;4DACZ,OAAO,aAAa,YAAY;wDAClC;kEAAG;;;;;;kEAGH,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,WAAW;wDACb;;0EACE,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,YAAY;oEACZ,OAAO,aAAa,YAAY;gEAClC;;oEACG,QAAQ,MAAM,CAAC,OAAO;oEAAC;;;;;;;0EAE1B,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,OAAO,aAAa,YAAY;oEAChC,WAAW;gEACb;0EAAG;;;;;;;;;;;;;;;;;;0DAMP,8OAAC;gDAAI,OAAO;oDACV,cAAc;oDACd,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;oDACzD,UAAU;gDACZ;;kEACE,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,iBAAiB,aAAa,YAAY;4DAC1C,cAAc,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;4DAC/D,UAAU;4DACV,YAAY;4DACZ,OAAO,aAAa,YAAY;wDAClC;kEAAG;;;;;;kEAGH,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,WAAW;wDACb;;0EACE,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,YAAY;oEACZ,OAAO,aAAa,YAAY;gEAClC;;oEACG,QAAQ,MAAM,CAAC,OAAO;oEAAC;;;;;;;0EAE1B,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,OAAO,aAAa,YAAY;oEAChC,WAAW;gEACb;0EAAG;;;;;;;;;;;;;;;;;;;;;;;;kDAOT,8OAAC;wCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,KAAK;wCACvB,OAAO;4CACL,OAAO,aAAa,YAAY;wCAClC;;0DAEA,8OAAC;gDACC,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;gDAC7B,OAAO;oDACL,iBAAiB,aAAa,YAAY;oDAC1C,OAAO,aAAa,YAAY;gDAClC;0DAEA,cAAA,8OAAC;;sEACC,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;;;;;;;;;;;;0DAGpE,8OAAC;gDAAM,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;kEAChC,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAC3D,cAAA,8OAAC;oEAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EACtC,QAAQ,MAAM,CAAC,WAAW,KAAK,MAAM,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,UAAU,EAC9E;8EACC,QAAQ,MAAM,CAAC,WAAW,KAAK,MAAM,OAAO;;;;;;;;;;;;;;;;;kEAKnD,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,MAAM,CAAC,OAAO;oEAAC;;;;;;;;;;;;;kEAG1F,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,MAAM,CAAC,OAAO;oEAAC;;;;;;;;;;;;;kEAG1F,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,MAAM,CAAC,KAAK;oEAAC;;;;;;;;;;;;;kEAGxF,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAI,QAAQ,MAAM,CAAC,eAAe;;;;;;;;;;;;kEAGjG,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,MAAM,CAAC,aAAa;oEAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAQxG,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;wBACtB,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;;0CAEA,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;gCAC5B,OAAO;oCACL,YAAY,aACR,gDACA;oCACJ,OAAO,aAAa,YAAY;gCAClC;;kDAEA,8OAAC;wCAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;0DAC7B,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;0DACxG,cAAA,8OAAC;oDAAK,UAAS;oDAAU,GAAE;oDAAwL,UAAS;;;;;;;;;;;4CACxN;;;;;;;kDAKR,8OAAC;wCAAgB,cAAc;;;;;;;;;;;;0CAGjC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;;kDAChC,8OAAC;wCAAI,OAAO;4CACV,SAAS;4CACT,qBAAqB;4CACrB,KAAK;4CACL,cAAc;wCAChB;kDACG,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,QAAa,sBACpD,8OAAC;gDAAgB,OAAO;oDACtB,cAAc;oDACd,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;oDACzD,UAAU;gDACZ;;kEACE,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,iBAAiB,OAAO,MAAM,KAAK,MAChC,aAAa,2BAA2B,YACxC,aAAa,2BAA2B;4DAC3C,WAAW;4DACX,UAAU;4DACV,YAAY;4DACZ,OAAO,OAAO,MAAM,KAAK,MACtB,aAAa,YAAY,YACzB,aAAa,YAAY;wDAC9B;;4DAAG;4DACO,QAAQ;;;;;;;kEAElB,8OAAC;wDAAI,OAAO;4DACV,SAAS;4DACT,WAAW;wDACb;;0EACE,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,YAAY;oEACZ,OAAO,aAAa,YAAY;gEAClC;;oEACG,OAAO,WAAW;oEAAC;;;;;;;0EAEtB,8OAAC;gEAAI,OAAO;oEACV,UAAU;oEACV,OAAO,aAAa,YAAY;oEAChC,WAAW;gEACb;;oEACG,OAAO,OAAO;oEAAC;;;;;;;;;;;;;;+CAnCZ;;;;;;;;;;kDA0Cd,8OAAC;wCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,KAAK;wCACvB,OAAO;4CACL,OAAO,aAAa,YAAY;wCAClC;;0DAEA,8OAAC;gDACC,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;gDAC7B,OAAO;oDACL,iBAAiB,aAAa,YAAY;oDAC1C,OAAO,aAAa,YAAY;gDAClC;0DAEA,cAAA,8OAAC;;sEACC,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;;;;;;;;;;;;0DAGpE,8OAAC;gDAAM,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;0DAC/B,QAAQ,OAAO,IAAI,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,QAAa,sBACpD,8OAAC;wDAAe,WAAW,QAAQ,MAAM,IAAI,oLAAA,CAAA,UAAM,CAAC,WAAW,GAAG;wDAAW,OAAO;4DAAE,iBAAiB,QAAQ,MAAM,IAAK,aAAa,YAAY,YAAa;wDAAU;;0EACxK,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAG;oEAAQ,QAAQ;;;;;;;0EAChF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAC3D,cAAA,8OAAC;oEAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EACtC,OAAO,MAAM,KAAK,MAAM,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,UAAU,EACjE;8EACC,OAAO,MAAM,KAAK,MAAM,OAAO;;;;;;;;;;;0EAGpC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,OAAO,WAAW;oEAAC;;;;;;;0EACpF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,OAAO,OAAO;oEAAC;;;;;;;0EAChF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,OAAO,KAAK;oEAAC;;;;;;;;uDAXvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAoBlB,oBAAoB,QAAQ,WAAW,IAAI,QAAQ,WAAW,CAAC,MAAM,GAAG,mBACvE,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;wBACtB,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;;0CAEA,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;gCAC5B,OAAO;oCACL,YAAY,aACR,gDACA;oCACJ,OAAO,aAAa,YAAY;gCAClC;;kDAEA,8OAAC;wCAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;0DAC7B,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;0DACxG,cAAA,8OAAC;oDAAK,UAAS;oDAAU,GAAE;oDAAsa,UAAS;;;;;;;;;;;4CACtc;;;;;;;kDAKR,8OAAC;wCAAgB,cAAc;;;;;;;;;;;;0CAGjC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;0CAC/B,QAAQ,WAAW,CAAC,GAAG,CAAC,CAAC,YAAiB,sBACzC,8OAAC;wCAAgB,OAAO;4CACtB,cAAc;4CACd,SAAS;4CACT,QAAQ,CAAC,UAAU,EAAE,aAAa,YAAY,WAAW;4CACzD,cAAc;4CACd,iBAAiB,aAAa,0BAA0B;wCAC1D;;0DACE,8OAAC;gDAAI,OAAO;oDACV,SAAS;oDACT,gBAAgB;oDAChB,YAAY;oDACZ,cAAc;gDAChB;;kEACE,8OAAC;wDAAG,OAAO;4DACT,UAAU;4DACV,YAAY;4DACZ,OAAO,aAAa,YAAY;4DAChC,QAAQ;wDACV;;4DAAG;4DACO,QAAQ;4DAAE;;;;;;;kEAEpB,8OAAC;wDAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EACtC,WAAW,UAAU,KAAK,SAAS,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,UAAU,EAC5E;kEACC,WAAW,UAAU;;;;;;;;;;;;4CAKzB,uBAAuB,YAAY;4CAGnC,sBAAsB;4CAGtB,uBAAuB;;uCAnChB;;;;;;;;;;;;;;;;oBA2CjB,oBAAoB,QAAQ,cAAc,kBACzC,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;wBACtB,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;;0CAEA,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;gCAC5B,OAAO;oCACL,YAAY,aACR,gDACA;oCACJ,OAAO,aAAa,YAAY;gCAClC;;kDAEA,8OAAC;wCAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;0DAC7B,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;0DACxG,cAAA,8OAAC;oDAAK,UAAS;oDAAU,GAAE;oDAAmH,UAAS;;;;;;;;;;;4CACnJ;;;;;;;kDAKR,8OAAC;wCAAgB,cAAc;;;;;;;;;;;;0CAGjC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;;kDAChC,8OAAC;wCAAI,OAAO;4CACV,cAAc;4CACd,SAAS;4CACT,iBAAiB,QAAQ,cAAc,CAAC,UAAU,KAAK,SACpD,aAAa,2BAA2B,YACxC,aAAa,2BAA2B;4CAC3C,cAAc;4CACd,WAAW;wCACb;;0DACE,8OAAC;gDAAI,OAAO;oDACV,UAAU;oDACV,YAAY;oDACZ,OAAO,QAAQ,cAAc,CAAC,UAAU,KAAK,SAC1C,aAAa,YAAY,YACzB,aAAa,YAAY;oDAC5B,cAAc;gDAChB;0DACG,QAAQ,cAAc,CAAC,UAAU;;;;;;0DAEpC,8OAAC;gDAAI,OAAO;oDACV,OAAO,aAAa,YAAY;oDAChC,UAAU;gDACZ;;oDAAG;oDACiB,QAAQ,cAAc,CAAC,eAAe;oDAAC;oDAAK,QAAQ,cAAc,CAAC,WAAW;oDAAC;;;;;;;;;;;;;kDAIrG,8OAAC;wCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,KAAK;wCACvB,OAAO;4CACL,OAAO,aAAa,YAAY;wCAClC;;0DAEA,8OAAC;gDACC,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;gDAC7B,OAAO;oDACL,iBAAiB,aAAa,YAAY;oDAC1C,OAAO,aAAa,YAAY;gDAClC;0DAEA,cAAA,8OAAC;;sEACC,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;;;;;;;;;;;;0DAGpE,8OAAC;gDAAM,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;kEAChC,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAC1D,QAAQ,cAAc,CAAC,eAAe;oEAAC;oEAAK,QAAQ,cAAc,CAAC,WAAW;;;;;;;;;;;;;kEAInF,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,cAAc,CAAC,SAAS;oEAAC;;;;;;;;;;;;;kEAGpG,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,cAAc,CAAC,WAAW;oEAAC;;;;;;;;;;;;;kEAGtG,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,cAAc,CAAC,YAAY;oEAAC;;;;;;;;;;;;;kEAGvG,8OAAC;;0EACC,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,QAAQ,cAAc,CAAC,aAAa;oEAAC;;;;;;;;;;;;;kEAGxG,8OAAC;wDAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;wDAAE,OAAO;4DAAE,iBAAiB,aAAa,YAAY;wDAAU;;0EAC9F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAG;;;;;;0EAChE,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAI,QAAQ,cAAc,CAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS3G,qBAAqB,QAAQ,WAAW,kBACvC,8OAAC;wBACC,WAAW,oLAAA,CAAA,UAAM,CAAC,IAAI;wBACtB,OAAO;4BACL,iBAAiB,aAAa,YAAY;4BAC1C,aAAa,aAAa,YAAY;wBACxC;;0CAEA,8OAAC;gCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;gCAC5B,OAAO;oCACL,YAAY,aACR,gDACA;oCACJ,OAAO,aAAa,YAAY;gCAClC;;kDAEA,8OAAC;wCAAG,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;;0DAC7B,8OAAC;gDAAI,OAAM;gDAA6B,SAAQ;gDAAY,MAAK;gDAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,QAAQ;;kEACxG,8OAAC;wDAAK,GAAE;;;;;;kEACR,8OAAC;wDAAK,UAAS;wDAAU,GAAE;wDAAyO,UAAS;;;;;;;;;;;;4CACzQ;;;;;;;kDAKR,8OAAC;wCAAgB,cAAc;;;;;;;;;;;;0CAGjC,8OAAC;gCAAI,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;;kDAChC,8OAAC;wCAAI,OAAO;4CACV,cAAc;4CACd,SAAS;4CACT,iBAAiB,QAAQ,WAAW,CAAC,UAAU,KAAK,SACjD,aAAa,2BAA2B,YACxC,aAAa,2BAA2B;4CAC3C,cAAc;4CACd,WAAW;wCACb;;0DACE,8OAAC;gDAAI,OAAO;oDACV,UAAU;oDACV,YAAY;oDACZ,OAAO,QAAQ,WAAW,CAAC,UAAU,KAAK,SACvC,aAAa,YAAY,YACzB,aAAa,YAAY;oDAC5B,cAAc;gDAChB;0DACG,QAAQ,WAAW,CAAC,UAAU;;;;;;0DAEjC,8OAAC;gDAAI,OAAO;oDACV,OAAO,aAAa,YAAY;oDAChC,UAAU;gDACZ;;oDAAG;oDACqB,QAAQ,WAAW,CAAC,UAAU,KAAK,SAAS,WAAW;oDAAU;;;;;;;;;;;;;kDAI3F,8OAAC;wCACC,WAAW,oLAAA,CAAA,UAAM,CAAC,KAAK;wCACvB,OAAO;4CACL,OAAO,aAAa,YAAY;wCAClC;;0DAEA,8OAAC;gDACC,WAAW,oLAAA,CAAA,UAAM,CAAC,WAAW;gDAC7B,OAAO;oDACL,iBAAiB,aAAa,YAAY;oDAC1C,OAAO,aAAa,YAAY;gDAClC;0DAEA,cAAA,8OAAC;;sEACC,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;sEAChE,8OAAC;4DAAG,OAAO;gEAAE,aAAa,aAAa,YAAY;4DAAU;sEAAG;;;;;;;;;;;;;;;;;0DAGpE,8OAAC;gDAAM,WAAW,oLAAA,CAAA,UAAM,CAAC,SAAS;0DAC/B,QAAQ,WAAW,CAAC,aAAa,IAAI,QAAQ,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,QAAa,sBACxF,8OAAC;wDAAe,WAAW,QAAQ,MAAM,IAAI,oLAAA,CAAA,UAAM,CAAC,WAAW,GAAG;wDAAW,OAAO;4DAAE,iBAAiB,QAAQ,MAAM,IAAK,aAAa,YAAY,YAAa;wDAAU;;0EACxK,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAG;oEAAQ,QAAQ;;;;;;;0EAChF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAI,OAAO,eAAe;;;;;;0EACvF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAAI,OAAO,eAAe;;;;;;0EACvF,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;;oEAAI,OAAO,SAAS,CAAC,OAAO,CAAC;oEAAG;;;;;;;0EAC7F,8OAAC;gEAAG,OAAO;oEAAE,aAAa,aAAa,YAAY;gEAAU;0EAC3D,cAAA,8OAAC;oEAAK,WAAW,GAAG,oLAAA,CAAA,UAAM,CAAC,WAAW,CAAC,CAAC,EACtC,OAAO,OAAO,GAAG,oLAAA,CAAA,UAAM,CAAC,cAAc,GAAG,oLAAA,CAAA,UAAM,CAAC,UAAU,EAC1D;8EACC,OAAO,OAAO,GAAG,SAAS;;;;;;;;;;;;uDATxB;;;;;;;;;;;;;;;;kDAiBf,8OAAC;wCAAI,OAAO;4CACV,WAAW;4CACX,SAAS;4CACT,iBAAiB,aAAa,0BAA0B;4CACxD,cAAc;4CACd,UAAU;4CACV,OAAO,aAAa,YAAY;wCAClC;;0DACE,8OAAC;gDAAI,OAAO;oDAAE,YAAY;oDAAQ,cAAc;gDAAM;0DAAG;;;;;;0DACzD,8OAAC;;oDAAI;oDAAkB,QAAQ,WAAW,CAAC,YAAY;oDAAC;;;;;;;0DACxD,8OAAC;;oDAAI;oDAAsB,QAAQ,WAAW,CAAC,WAAW;;;;;;;0DAC1D,8OAAC;;oDAAI;oDAAsB,QAAQ,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC;oDAAG;;;;;;;0DACvE,8OAAC;;oDAAI;oDAAqB,QAAQ,WAAW,CAAC,SAAS;oDAAC;;;;;;;;;;;;;;;;;;;;;;;;;kCAOhE,8OAAC;kCACC,cAAA,8OAAC;4BACC,SAAS;4BACT,WAAW,oLAAA,CAAA,UAAM,CAAC,YAAY;4BAC9B,OAAO;gCACL,iBAAiB;gCACjB,OAAO;4BACT;;8CAEA,8OAAC;oCAAI,OAAM;oCAA6B,SAAQ;oCAAY,MAAK;oCAAe,WAAW,oLAAA,CAAA,UAAM,CAAC,UAAU;8CAC1G,cAAA,8OAAC;wCAAK,UAAS;wCAAU,GAAE;wCAAqL,UAAS;;;;;;;;;;;gCACrN;;;;;;;;;;;;;;;;;;;;;;;;AAQpB","debugId":null}}]
}