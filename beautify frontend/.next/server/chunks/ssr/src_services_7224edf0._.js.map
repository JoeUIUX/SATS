{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc1Checkout.ts"],"sourcesContent":["// src/services/checkout/obc1Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the OBC-1 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param enableEmmc Whether to test the eMMC functionality\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC1Checkout(\r\n  sock: any, \r\n  enableEmmc: boolean,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      kernel: { \r\n        uptime: '', \r\n        loads: { oneMinute: '', fiveMinute: '', fifteenMinute: '' },\r\n        memory: { \r\n          totalRam: '', freeRam: '', sharedRam: '', bufferRam: '', \r\n          totalSwap: '', freeSwap: '', memUnit: '', totalHigh: '', freeHigh: '' \r\n        },\r\n        processes: ''\r\n      },\r\n      fpga: { \r\n        voltages: { \r\n          vccPspll: '', vccPsbatt: '', vccint: '', vccbram: '', vccaux: '' \r\n          // Add others as needed\r\n        },\r\n        temperatures: { psTemp: '', remoteTemp: '', plTemp: '' }\r\n      },\r\n      vi: {\r\n        d3v3: { value: '', pass: false },\r\n        ps3v3Obc2: { value: '', pass: false },\r\n        ps5vObc2: { value: '', pass: false },\r\n        ps5vObc2I: '',\r\n        ps3v3Obc2I: ''\r\n      },\r\n      temperatures: {\r\n        thruster1: '',\r\n        thruster2: '',\r\n        leocam: ['', '', '', ''] \r\n      },\r\n      emmc: {\r\n        emmc0States: [] as string[],  // Define explicit type as string array\r\n        emmc1States: [] as string[]   // Define explicit type as string array\r\n      },\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading Firmware Version', 5);\r\n    const fwVars = [\"OBC1_FW_Ver_Major\", \"OBC1_FW_Ver_Minor\", \"OBC1_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 2: Read kernel info (20%)\r\n    onProgress('Reading Kernel Information', 20);\r\n    const kernelVars = [\r\n      \"OBC1_Sys_uptime\", \"OBC1_Sys_loads_1m\", \"OBC1_Sys_loads_5m\", \"OBC1_Sys_loads_15m\",\r\n      \"OBC1_Sys_totalram\", \"OBC1_Sys_freeram\", \"OBC1_Sys_sharedram\", \"OBC1_Sys_bufferram\",\r\n      \"OBC1_Sys_totalswap\", \"OBC1_Sys_freeswap\", \"OBC1_Sys_procs\", \"OBC1_Sys_pad\",\r\n      \"OBC1_Sys_totalhigh\", \"OBC1_Sys_freehigh\", \"OBC1_Sys_mem_unit\"\r\n    ];\r\n    \r\n    try {\r\n      const kernelResults = await mccifRead(sock, kernelVars);\r\n      results.kernel.uptime = safeParseValue(kernelResults[0]);\r\n      results.kernel.loads.oneMinute = safeParseValue(kernelResults[1]);\r\n      results.kernel.loads.fiveMinute = safeParseValue(kernelResults[2]);\r\n      results.kernel.loads.fifteenMinute = safeParseValue(kernelResults[3]);\r\n      results.kernel.memory.totalRam = safeParseValue(kernelResults[4]);\r\n      results.kernel.memory.freeRam = safeParseValue(kernelResults[5]);\r\n      results.kernel.memory.sharedRam = safeParseValue(kernelResults[6]);\r\n      results.kernel.memory.bufferRam = safeParseValue(kernelResults[7]);\r\n      results.kernel.memory.totalSwap = safeParseValue(kernelResults[8]);\r\n      results.kernel.memory.freeSwap = safeParseValue(kernelResults[9]);\r\n      results.kernel.processes = safeParseValue(kernelResults[10]);\r\n      // Skip pad\r\n      results.kernel.memory.totalHigh = safeParseValue(kernelResults[12]);\r\n      results.kernel.memory.freeHigh = safeParseValue(kernelResults[13]);\r\n      results.kernel.memory.memUnit = safeParseValue(kernelResults[14]);\r\n    } catch (error) {\r\n      console.error(\"Error reading kernel info:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read FPGA values (40%)\r\n    onProgress('Reading FPGA Values', 40);\r\n    const fpgaVars = [\r\n      \"OBC1_vcc_pspll\", \"OBC1_vcc_psbatt\", \"OBC1_vccint\", \"OBC1_vccbram\", \"OBC1_vccaux\",\r\n      \"OBC1_vcc_psddr_pll\", \"OBC1_vccpsintfp_ddr\", \"OBC1_vccint1\", \"OBC1_vccaux1\", \"OBC1_vccvrefp\",\r\n      \"OBC1_vccvrefn\", \"OBC1_vccbram1\", \"OBC1_vccplintlp\", \"OBC1_vccplintfp\", \"OBC1_vccplaux\",\r\n      \"OBC1_vccams\", \"OBC1_vccpsintlp\", \"OBC1_vccpsintfp\", \"OBC1_vccpsaux\", \"OBC1_vccpsddr\",\r\n      \"OBC1_vccpsio3\", \"OBC1_vccpsio0\", \"OBC1_vccpsio1\", \"OBC1_vccpsio2\", \"OBC1_psmgtravcc\",\r\n      \"OBC1_psmgtravtt\", \"OBC1_vccams1\", \"OBC1_ps_temp\", \"OBC1_remote_temp\", \"OBC1_pl_temp\"\r\n    ];\r\n    \r\n    try {\r\n      const fpgaResults = await mccifRead(sock, fpgaVars);\r\n      \r\n      // First 27 are voltages, last 3 are temperatures\r\n      results.fpga.voltages.vccPspll = safeParseValue(fpgaResults[0]);\r\n      results.fpga.voltages.vccPsbatt = safeParseValue(fpgaResults[1]);\r\n      results.fpga.voltages.vccint = safeParseValue(fpgaResults[2]);\r\n      results.fpga.voltages.vccbram = safeParseValue(fpgaResults[3]);\r\n      results.fpga.voltages.vccaux = safeParseValue(fpgaResults[4]);\r\n      // ... Set other voltages\r\n\r\n      results.fpga.temperatures.psTemp = safeParseValue(fpgaResults[27]);\r\n      results.fpga.temperatures.remoteTemp = safeParseValue(fpgaResults[28]);\r\n      results.fpga.temperatures.plTemp = safeParseValue(fpgaResults[29]);\r\n    } catch (error) {\r\n      console.error(\"Error reading FPGA values:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 4: Read voltage and current (60%)\r\n    onProgress('Reading Voltage and Current', 60);\r\n    const viVars = [\r\n      \"OBC1_3V3_D\", \"OBC1_PS_3V3_OBC2_V\", \"OBC1_PS_5V_OBC2_V\", \r\n      \"OBC1_PS_5V_OBC2_I\", \"OBC1_PS_3V3_OBC2_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      \r\n      const d3v3Value = safeParseValue(viResults[0]);\r\n      const ps3v3Obc2Value = safeParseValue(viResults[1]);\r\n      const ps5vObc2Value = safeParseValue(viResults[2]);\r\n      \r\n      results.vi.d3v3 = { \r\n        value: d3v3Value, \r\n        pass: checkVoltage(d3v3Value, true) \r\n      };\r\n      results.vi.ps3v3Obc2 = { \r\n        value: ps3v3Obc2Value, \r\n        pass: checkVoltage(ps3v3Obc2Value, true) \r\n      };\r\n      results.vi.ps5vObc2 = { \r\n        value: ps5vObc2Value, \r\n        pass: checkVoltage(ps5vObc2Value, false) \r\n      };\r\n      results.vi.ps5vObc2I = safeParseValue(viResults[3]);\r\n      results.vi.ps3v3Obc2I = safeParseValue(viResults[4]);\r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 5: Read temperature sensors (80%)\r\n    onProgress('Reading Temperature Sensors', 80);\r\n    const tempVars = [\r\n      \"OBC1_thruster_ch1_T\", \"OBC1_thruster_ch2_T\", \r\n      \"OBC1_leocam_ch1_T\", \"OBC1_leocam_ch2_T\",\r\n      \"OBC1_leocam_ch3_T\", \"OBC1_leocam_ch4_T\"\r\n    ];\r\n    \r\n    try {\r\n      const tempResults = await mccifRead(sock, tempVars);\r\n      \r\n      results.temperatures.thruster1 = safeParseValue(tempResults[0]);\r\n      results.temperatures.thruster2 = safeParseValue(tempResults[1]);\r\n      results.temperatures.leocam[0] = safeParseValue(tempResults[2]);\r\n      results.temperatures.leocam[1] = safeParseValue(tempResults[3]);\r\n      results.temperatures.leocam[2] = safeParseValue(tempResults[4]);\r\n      results.temperatures.leocam[3] = safeParseValue(tempResults[5]);\r\n    } catch (error) {\r\n      console.error(\"Error reading temperature sensors:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n// Step 6: EMMC test if enabled (90-100%)\r\nif (enableEmmc) {\r\n  onProgress('Testing eMMC', 90);\r\n  \r\n  const emmcVars = [\"OBC1_Q8_eMMC0_state\", \"OBC1_Q8_eMMC1_state\"];\r\n  \r\n  try {\r\n    // Initial check\r\n    const emmcResult1 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult1[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult1[1]));\r\n    \r\n    // Modified command format: OBC1_Emmc_Control needs 8 or fewer tokens\r\n    // Test eMMC0 - Use single digit values instead of multi-digit\r\n    // Change from value=1 to value=1 (same in this case but follow the pattern)\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 1);\r\n    const emmcResult2 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult2[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult2[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 3);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 5);\r\n    const emmcResult3 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult3[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult3[1]));\r\n    \r\n    // Test eMMC1\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 2);\r\n    const emmcResult4 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult4[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult4[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 4);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 6);\r\n    const emmcResult5 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult5[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult5[1]));\r\n  } catch (error) {\r\n    console.error(\"Error during eMMC test:\", error);\r\n    // Fill with N/A values if the test fails\r\n    results.emmc.emmc0States = Array(6).fill('N.A.');\r\n    results.emmc.emmc1States = Array(6).fill('N.A.');\r\n  }\r\n} else {\r\n  // If eMMC test is disabled, set empty results\r\n  results.emmc.emmc0States = Array(6).fill('N.A.');\r\n  results.emmc.emmc1States = Array(6).fill('N.A.');\r\n}\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-1 checkout:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if voltage is within acceptable range\r\n * \r\n * @param value Voltage value as a string (in mV)\r\n * @param isThreeVolt Whether this is a 3.3V check (true) or 5V check (false)\r\n * @returns True if the voltage is within acceptable range\r\n */\r\nfunction checkVoltage(value: string, isThreeVolt: boolean): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return false;\r\n  }\r\n  \r\n  if (isThreeVolt) {\r\n    // 3.3V check (typically 3000-3600 mV)\r\n    return numValue >= 3000 && numValue <= 3600;\r\n  } else {\r\n    // 5V check (typically 4750-5250 mV)\r\n    return numValue >= 4750 && numValue <= 5250;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc1Report.ts"],"sourcesContent":["// src/services/reports/obc1Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-1 checkout results\r\n * \r\n * @param results The OBC-1 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC1Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-1_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-1 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-1 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Kernel Information section\r\n        new Paragraph({\r\n          text: \"* Kernel Information:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create kernel info table\r\n        createKernelInfoTable(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // FPGA section\r\n        new Paragraph({\r\n          text: \"* FPGA Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create FPGA info paragraphs\r\n        ...createFpgaInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Temperature section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create VI info paragraphs\r\n        ...createViInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // eMMC section (if enabled)\r\n        new Paragraph({\r\n          text: \"* eMMC test summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create eMMC info paragraphs\r\n        ...createEmmcInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create kernel info table\r\nfunction createKernelInfoTable(results: any): Table {\r\n  const rows = [\r\n    ['Uptime', `${results.kernel.uptime} s`],\r\n    ['1 minute average loads', results.kernel.loads.oneMinute],\r\n    ['5 minutes average loads', results.kernel.loads.fiveMinute],\r\n    ['15 minutes average loads', results.kernel.loads.fifteenMinute],\r\n    ['Total usable main memory size', `${results.kernel.memory.totalRam} bytes`],\r\n    ['Available memory size', `${results.kernel.memory.freeRam} bytes`],\r\n    ['Amount of shared memory', `${results.kernel.memory.sharedRam} bytes`],\r\n    ['Memory used by buffers', `${results.kernel.memory.bufferRam} bytes`],\r\n    ['Total swap space size', `${results.kernel.memory.totalSwap} bytes`],\r\n    ['Swap space still available', `${results.kernel.memory.freeSwap} bytes`],\r\n    ['Number of current processes', `${results.kernel.processes} bytes`],\r\n    ['Total high memory size', `${results.kernel.memory.totalHigh} bytes`],\r\n    ['Available high memory size', `${results.kernel.memory.freeHigh} bytes`],\r\n    ['Memory unit size in bytes', `${results.kernel.memory.memUnit} bytes`]\r\n  ].map(row => new TableRow({\r\n    children: [\r\n      new TableCell({\r\n        children: [new Paragraph(row[0])],\r\n        width: { size: 60, type: WidthType.PERCENTAGE }\r\n      }),\r\n      new TableCell({\r\n        children: [new Paragraph(row[1])],\r\n        width: { size: 40, type: WidthType.PERCENTAGE }\r\n      })\r\n    ]\r\n  }));\r\n\r\n  return new Table({\r\n    rows,\r\n    width: { size: 100, type: WidthType.PERCENTAGE },\r\n    borders: {\r\n      top: { style: BorderStyle.SINGLE, size: 1 },\r\n      bottom: { style: BorderStyle.SINGLE, size: 1 },\r\n      left: { style: BorderStyle.SINGLE, size: 1 },\r\n      right: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideHorizontal: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideVertical: { style: BorderStyle.SINGLE, size: 1 }\r\n    }\r\n  });\r\n}\r\n\r\n// Helper function to create FPGA info paragraphs\r\nfunction createFpgaInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`vcc_pspll       : ${padString(results.fpga.voltages.vccPspll, 4)} V`),\r\n    new Paragraph(`vcc_psbatt      : ${padString(results.fpga.voltages.vccPsbatt, 4)} V`),\r\n    new Paragraph(`vccint          : ${padString(results.fpga.voltages.vccint, 4)} V`),\r\n    new Paragraph(`vccbram         : ${padString(results.fpga.voltages.vccbram, 4)} V`),\r\n    new Paragraph(`vccaux          : ${padString(results.fpga.voltages.vccaux, 4)} V`),\r\n    // ... add other voltages as needed\r\n    new Paragraph(`ps_temp         : ${padString(results.fpga.temperatures.psTemp, 4)} deg C`),\r\n    new Paragraph(`remote_temp     : ${padString(results.fpga.temperatures.remoteTemp, 4)} deg C`),\r\n    new Paragraph(`pl_temp         : ${padString(results.fpga.temperatures.plTemp, 4)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create VI info paragraphs\r\nfunction createViInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`OBC-1 3V3 D V           : ${padString(results.vi.d3v3.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 V    : ${padString(results.vi.ps3v3Obc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 V     : ${padString(results.vi.ps5vObc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 I     : ${padString(results.vi.ps5vObc2I, 4)} mA`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 I    : ${padString(results.vi.ps3v3Obc2I, 4)} mA`),\r\n    new Paragraph(``),\r\n    new Paragraph(`Thruster thermistor 1   : ${padString(results.temperatures.thruster1, 3)} deg C`),\r\n    new Paragraph(`Thruster thermistor 2   : ${padString(results.temperatures.thruster2, 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 1     : ${padString(results.temperatures.leocam[0], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 2     : ${padString(results.temperatures.leocam[1], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 3     : ${padString(results.temperatures.leocam[2], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 4     : ${padString(results.temperatures.leocam[3], 3)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create eMMC info paragraphs\r\nfunction createEmmcInfoParagraphs(results: any): Paragraph[] {\r\n  if (results.emmc.emmc0States.length === 0 || results.emmc.emmc0States[0] === 'N.A.') {\r\n    return [new Paragraph('eMMC test was not performed')];\r\n  }\r\n  \r\n  return [\r\n    new Paragraph('eMMC state before on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[0], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[0], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[1], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[1], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[2], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[2], 3)}`),\r\n    new Paragraph('eMMC state before on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[3], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[3], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[4], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[4], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[5], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[5], 3)}`)\r\n];\r\n}\r\n\r\n/**\r\n* Utility function to pad a string to a specific length\r\n* \r\n* @param value The string value to pad\r\n* @param length The desired length\r\n* @returns The padded string\r\n*/\r\nfunction padString(value: string, length: number): string {\r\nif (!value) return ''.padStart(length, ' ');\r\nreturn value.padStart(length, ' ');\r\n}\r\n        "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc2Checkout.ts"],"sourcesContent":["// src/services/checkout/obc2Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Check if memory test was successful by comparing before/after values\r\n * @param values Array of test values to check\r\n * @returns Pass/Fail string\r\n */\r\nfunction memCheck(values: string[]): string {\r\n  if (values.length < 8) return \"[FAIL]\";\r\n  \r\n  const writeSuccessBefore = parseInt(values[0]);\r\n  const readSuccessBefore = parseInt(values[1]);\r\n  const writeFailBefore = parseInt(values[2]);\r\n  const readFailBefore = parseInt(values[3]);\r\n  \r\n  const writeSuccessAfter = parseInt(values[4]);\r\n  const readSuccessAfter = parseInt(values[5]);\r\n  const writeFailAfter = parseInt(values[6]);\r\n  const readFailAfter = parseInt(values[7]);\r\n  \r\n  if ((writeSuccessAfter - writeSuccessBefore) > 0 &&\r\n      (readSuccessAfter - readSuccessBefore) > 0 &&\r\n      (writeFailAfter - writeFailBefore) === 0 &&\r\n      (readFailAfter - readFailBefore) === 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check CAN communication by comparing before/after values\r\n * @param valuesBefore Array of test values before test\r\n * @param valuesAfter Array of test values after test\r\n * @param packetOffset Offset for acknowledgement packets\r\n * @returns Pass/Fail string\r\n */\r\nfunction canCheck(valuesBefore: string[], valuesAfter: string[], packetOffset: number): string {\r\n  if (valuesBefore.length < packetOffset + 5 || valuesAfter.length < packetOffset + 5) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Calculate differences in transmitted packets\r\n  const hkpTxDiff = parseInt(valuesAfter[0]) - parseInt(valuesBefore[0]);\r\n  const cfgTxDiff = parseInt(valuesAfter[1]) - parseInt(valuesBefore[1]);\r\n  const metTxDiff = parseInt(valuesAfter[2]) - parseInt(valuesBefore[2]);\r\n  const etcTxDiff = parseInt(valuesAfter[3]) - parseInt(valuesBefore[3]);\r\n  const uhfTxDiff = parseInt(valuesAfter[4]) - parseInt(valuesBefore[4]);\r\n  \r\n  // Calculate differences in acknowledged packets\r\n  const hkpAckDiff = parseInt(valuesAfter[packetOffset + 0]) - parseInt(valuesBefore[packetOffset + 0]);\r\n  const cfgAckDiff = parseInt(valuesAfter[packetOffset + 1]) - parseInt(valuesBefore[packetOffset + 1]);\r\n  const metAckDiff = parseInt(valuesAfter[packetOffset + 2]) - parseInt(valuesBefore[packetOffset + 2]);\r\n  const etcAckDiff = parseInt(valuesAfter[packetOffset + 3]) - parseInt(valuesBefore[packetOffset + 3]);\r\n  const uhfAckDiff = parseInt(valuesAfter[packetOffset + 4]) - parseInt(valuesBefore[packetOffset + 4]);\r\n  \r\n  // Check if all values increased\r\n  if (hkpTxDiff > 0 && hkpAckDiff > 0 &&\r\n      cfgTxDiff > 0 && cfgAckDiff > 0 &&\r\n      metTxDiff > 0 && metAckDiff > 0 &&\r\n      etcTxDiff > 0 && etcAckDiff > 0 &&\r\n      uhfTxDiff > 0 && uhfAckDiff > 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check if 3.3V voltage level is within acceptable range\r\n * @param value Voltage value as string (in mV)\r\n * @returns Pass/Fail string\r\n */\r\nfunction check3V3(value: string): string {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Check if voltage is within acceptable range (3000-3600 mV)\r\n  return numValue >= 3000 && numValue <= 3600 ? \"[PASS]\" : \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Run the OBC-2 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (SD Card, EEPROM, etc.)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC2Checkout(\r\n  sock: any, \r\n  options: { sdCard: boolean; eeprom: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      time: {\r\n        before: '',\r\n        after: '',\r\n        uptime: { total: '', session: '' },\r\n        storePeriod: '',\r\n        resetCount: '',\r\n        resetSource: ''\r\n      },\r\n      can: {\r\n        primary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        },\r\n        secondary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        }\r\n      },\r\n      voltage: {\r\n        sdCard: { value: '', result: '' },\r\n        flash: { value: '', result: '' },\r\n        eeprom: { value: '', result: '' },\r\n        payload: { value: '', current: '', result: '' },\r\n        uhf: { value: '', current: '', result: '' },\r\n        pp: { value: '', current: '' },\r\n        gps: { value: '' },\r\n        lna: { value: '', current: '' }\r\n      },\r\n      memory: {\r\n        sdCard: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        },\r\n        eeprom: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        }\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n    const passFailResults: string[] = [];\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading OBC-2 Firmware Version', 5);\r\n    const fwVars = [\"OBC2_FW_Ver_Major\", \"OBC2_FW_Ver_Minor\", \"OBC2_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    }\r\n\r\n    // Step 2: Check and update time (15%)\r\n    onProgress('Checking OBC-2 Time', 15);\r\n    try {\r\n      // Read current time\r\n      const timeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.before = safeParseValue(timeResult[0]);\r\n      allResults.push(results.time.before);\r\n      \r\n      // Set time to now\r\n      await mccifSet(sock, \"OBC2_Time\", \"NOW\");\r\n      \r\n      // Read updated time\r\n      const updatedTimeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.after = safeParseValue(updatedTimeResult[0]);\r\n      allResults.push(results.time.after);\r\n    } catch (error) {\r\n      console.error(\"Error updating time:\", error);\r\n      results.time.before = \"error\";\r\n      results.time.after = \"error\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(\"error\");\r\n      allResults.push(\"error\");\r\n    }\r\n\r\n    // Step 3: Read time related variables (20%)\r\n    onProgress('Reading OBC-2 Time Information', 20);\r\n    const timeVars = [\r\n      \"OBC2_Time\", \"OBC2_Uptime_Total\", \"OBC2_StorePeriod\", \r\n      \"OBC2_Uptime_Session\", \"OBC2_ResetCount\", \"OBC2_ResetSource\"\r\n    ];\r\n    \r\n    try {\r\n      const timeResults = await mccifRead(sock, timeVars);\r\n      results.time.current = safeParseValue(timeResults[0]);\r\n      results.time.uptime.total = safeParseValue(timeResults[1]);\r\n      results.time.storePeriod = safeParseValue(timeResults[2]);\r\n      results.time.uptime.session = safeParseValue(timeResults[3]);\r\n      results.time.resetCount = safeParseValue(timeResults[4]);\r\n      results.time.resetSource = safeParseValue(timeResults[5]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.time.current);\r\n      allResults.push(results.time.uptime.total);\r\n      allResults.push(results.time.storePeriod);\r\n      allResults.push(results.time.uptime.session);\r\n      allResults.push(results.time.resetCount);\r\n      allResults.push(results.time.resetSource);\r\n    } catch (error) {\r\n      console.error(\"Error reading time information:\", error);\r\n      \r\n      // Add default values to allResults\r\n      [\"error\", \"0\", \"0\", \"0\", \"0\", \"unknown\"].forEach(val => allResults.push(val));\r\n    }\r\n\r\n    // Step 4: CAN communication test - primary (30%)\r\n    onProgress('Testing Primary CAN Communication', 30);\r\n    const canVars = [\r\n      \"OBC1_InterComm_Obc2_Hkp_Tx\", \"OBC1_InterComm_Obc2_Cfg_Tx\", \"OBC1_InterComm_Obc2_Met_Tx\",\r\n      \"OBC1_InterComm_Obc2_Etc_Tx\", \"OBC1_InterComm_Obc2_Uhf_Tx\", \"OBC1_InterComm_Obc2_Hkp_Ack\",\r\n      \"OBC1_InterComm_Obc2_Cfg_Ack\", \"OBC1_InterComm_Obc2_Met_Ack\", \"OBC1_InterComm_Obc2_Etc_Ack\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Ack\", \"OBC1_InterComm_Obc2_Hkp_Timeout\", \"OBC1_InterComm_Obc2_Cfg_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Met_Timeout\", \"OBC1_InterComm_Obc2_Etc_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Timeout\", \"OBC1_InterComm_Obc2_Hkp_Error\", \"OBC1_InterComm_Obc2_Cfg_Error\",\r\n      \"OBC1_InterComm_Obc2_Met_Error\", \"OBC1_InterComm_Obc2_Etc_Error\", \"OBC1_InterComm_Obc2_Uhf_Error\"\r\n    ];\r\n    \r\n    const canSetting = [\"OBC1_Intercomm_PriSec_Cfg\"];\r\n    \r\n    try {\r\n      // Read initial CAN values\r\n      const canBeforeResults = await mccifRead(sock, canVars);\r\n      \r\n      // Store before values\r\n      const canBeforeValues: string[] = canBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.before.tx.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.before.ack.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.before.timeout.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.before.error.push(canBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canBeforeValues);\r\n      \r\n      // Read CAN configuration\r\n      const canSettingResult = await mccifRead(sock, canSetting);\r\n      const canSettingValue = safeParseValue(canSettingResult[0]);\r\n      allResults.push(canSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canAfterResults = await mccifRead(sock, canVars);\r\n      const canAfterValues: string[] = canAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.after.tx.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.after.ack.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.after.timeout.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.after.error.push(canAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canAfterValues);\r\n      \r\n      // Check primary CAN result\r\n      results.can.primary.result = canCheck(canBeforeValues, canAfterValues, 5);\r\n      passFailResults.push(results.can.primary.result);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing primary CAN:\", error);\r\n      results.can.primary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n    }\r\n\r\n    // Step 5: CAN communication test - secondary (50%)\r\n    onProgress('Testing Secondary CAN Communication', 50);\r\n    try {\r\n      // Set to secondary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 31);\r\n      \r\n      // Read initial CAN values for secondary\r\n      const canSecBeforeResults = await mccifRead(sock, canVars);\r\n      const canSecBeforeValues: string[] = canSecBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.before.tx.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.before.ack.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.before.timeout.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.before.error.push(canSecBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecBeforeValues);\r\n      \r\n      // Read secondary CAN configuration\r\n      const canSecSettingResult = await mccifRead(sock, canSetting);\r\n      const canSecSettingValue = safeParseValue(canSecSettingResult[0]);\r\n      allResults.push(canSecSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canSecAfterResults = await mccifRead(sock, canVars);\r\n      const canSecAfterValues: string[] = canSecAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.after.tx.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.after.ack.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.after.timeout.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.after.error.push(canSecAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecAfterValues);\r\n      \r\n      // Check secondary CAN result\r\n      results.can.secondary.result = canCheck(canSecBeforeValues, canSecAfterValues, 5);\r\n      passFailResults.push(results.can.secondary.result);\r\n      \r\n      // Reset to primary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing secondary CAN:\", error);\r\n      results.can.secondary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n      \r\n      // Try to reset to primary CAN\r\n      try {\r\n        await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      } catch (error) {\r\n        console.error(\"Error resetting to primary CAN:\", error);\r\n      }\r\n    }\r\n\r\n    // Step 6: Read voltage and current values (65%)\r\n    onProgress('Reading OBC-2 Voltage and Current', 65);\r\n    const viVars = [\r\n      \"OBC2_SDCard_3V3_V\", \"OBC2_Flash_3v3_V\", \"OBC2_EEPROM_3V3_V\", \"OBC2_Payload_3V3_V\",\r\n      \"OBC2_Payload_3V3_I\", \"OBC2_UHF_3V3_V\", \"OBC2_UHF_3V3_I\", \"OBC2_PP_3V3_V\", \"OBC2_PP_3V3_I\",\r\n      \"OBC2_GPS_3V3_V\", \"OBC2_LNA_V\", \"OBC2_LNA_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      const viValues: string[] = viResults.map(safeParseValue);\r\n      \r\n      // Update voltage results\r\n      results.voltage.sdCard.value = viValues[0];\r\n      results.voltage.flash.value = viValues[1];\r\n      results.voltage.eeprom.value = viValues[2];\r\n      results.voltage.payload.value = viValues[3];\r\n      results.voltage.payload.current = viValues[4];\r\n      results.voltage.uhf.value = viValues[5];\r\n      results.voltage.uhf.current = viValues[6];\r\n      results.voltage.pp.value = viValues[7];\r\n      results.voltage.pp.current = viValues[8];\r\n      results.voltage.gps.value = viValues[9];\r\n      results.voltage.lna.value = viValues[10];\r\n      results.voltage.lna.current = viValues[11];\r\n      \r\n      // Check voltage results\r\n      results.voltage.sdCard.result = check3V3(viValues[0]);\r\n      results.voltage.flash.result = check3V3(viValues[1]);\r\n      results.voltage.eeprom.result = check3V3(viValues[2]);\r\n      results.voltage.payload.result = check3V3(viValues[3]);\r\n      results.voltage.uhf.result = check3V3(viValues[5]);\r\n      \r\n      // Add to passFailResults\r\n      passFailResults.push(results.voltage.sdCard.result);\r\n      passFailResults.push(results.voltage.flash.result);\r\n      passFailResults.push(results.voltage.eeprom.result);\r\n      passFailResults.push(results.voltage.payload.result);\r\n      passFailResults.push(results.voltage.uhf.result);\r\n      \r\n      // Add to allResults\r\n      allResults.push(...viValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      \r\n      // Add placeholder values\r\n      const errorValues = Array(12).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n      \r\n      // Add fail results\r\n      const failResults = Array(5).fill(\"[FAIL]\");\r\n      passFailResults.push(...failResults);\r\n    }\r\n\r\n    // Step 7: SD Card test if enabled (80%)\r\n    if (options.sdCard) {\r\n      onProgress('Testing OBC-2 SD Card', 80);\r\n      \r\n      try {\r\n        // Read SD Card voltage\r\n        const sdVoltageResult = await mccifRead(sock, [\"OBC2_SDCard_3V3_V\"]);\r\n        const sdVoltage = safeParseValue(sdVoltageResult[0]);\r\n        allResults.push(sdVoltage);\r\n        \r\n        // Read SD Card counters before test\r\n        const sdVars = [\"OBC2_SD_WriteSuccess\", \"OBC2_SD_ReadSuccess\", \"OBC2_SD_WriteFail\", \"OBC2_SD_ReadFail\"];\r\n        const sdBeforeResults = await mccifRead(sock, sdVars);\r\n        const sdBeforeValues = sdBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.sdCard.before.writeSuccess = sdBeforeValues[0];\r\n        results.memory.sdCard.before.readSuccess = sdBeforeValues[1];\r\n        results.memory.sdCard.before.writeFail = sdBeforeValues[2];\r\n        results.memory.sdCard.before.readFail = sdBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdBeforeValues);\r\n        \r\n        // Run SD Card test\r\n        await mccifSet(sock, \"OBC2_SD_Control\", 6);\r\n        \r\n        // Read SD Card counters after test\r\n        const sdAfterResults = await mccifRead(sock, sdVars);\r\n        const sdAfterValues = sdAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.sdCard.after.writeSuccess = sdAfterValues[0];\r\n        results.memory.sdCard.after.readSuccess = sdAfterValues[1];\r\n        results.memory.sdCard.after.writeFail = sdAfterValues[2];\r\n        results.memory.sdCard.after.readFail = sdAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdAfterValues);\r\n        \r\n        // Check SD Card test result\r\n        const sdTestValues = [...sdBeforeValues, ...sdAfterValues];\r\n        results.memory.sdCard.result = memCheck(sdTestValues);\r\n        passFailResults.push(results.memory.sdCard.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing SD Card:\", error);\r\n        results.memory.sdCard.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // SD Card test not enabled\r\n      results.memory.sdCard.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 8: EEPROM test if enabled (90%)\r\n    if (options.eeprom) {\r\n      onProgress('Testing OBC-2 EEPROM', 90);\r\n      \r\n      try {\r\n        // Read EEPROM voltage\r\n        const eepromVoltageResult = await mccifRead(sock, [\"OBC2_EEPROM_3V3_V\"]);\r\n        const eepromVoltage = safeParseValue(eepromVoltageResult[0]);\r\n        allResults.push(eepromVoltage);\r\n        \r\n        // Read EEPROM counters before test\r\n        const eepromVars = [\"OBC2_EEPROM_WriteSuccess\", \"OBC2_EEPROM_ReadSuccess\", \r\n                          \"OBC2_EEPROM_WriteFail\", \"OBC2_EEPROM_ReadFail\"];\r\n        const eepromBeforeResults = await mccifRead(sock, eepromVars);\r\n        const eepromBeforeValues = eepromBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.eeprom.before.writeSuccess = eepromBeforeValues[0];\r\n        results.memory.eeprom.before.readSuccess = eepromBeforeValues[1];\r\n        results.memory.eeprom.before.writeFail = eepromBeforeValues[2];\r\n        results.memory.eeprom.before.readFail = eepromBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromBeforeValues);\r\n        \r\n        // Run EEPROM test\r\n        await mccifSet(sock, \"OBC2_EEPROM_Control\", 7);\r\n        \r\n        // Read EEPROM counters after test\r\n        const eepromAfterResults = await mccifRead(sock, eepromVars);\r\n        const eepromAfterValues = eepromAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.eeprom.after.writeSuccess = eepromAfterValues[0];\r\n        results.memory.eeprom.after.readSuccess = eepromAfterValues[1];\r\n        results.memory.eeprom.after.writeFail = eepromAfterValues[2];\r\n        results.memory.eeprom.after.readFail = eepromAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromAfterValues);\r\n        \r\n        // Check EEPROM test result\r\n        const eepromTestValues = [...eepromBeforeValues, ...eepromAfterValues];\r\n        results.memory.eeprom.result = memCheck(eepromTestValues);\r\n        passFailResults.push(results.memory.eeprom.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing EEPROM:\", error);\r\n        results.memory.eeprom.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // EEPROM test not enabled\r\n      results.memory.eeprom.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 9: Final time reading (100%)\r\n    onProgress('Final OBC-2 Time Check', 100);\r\n    try {\r\n      const finalTimeResults = await mccifRead(sock, timeVars);\r\n      const finalTimeValues = finalTimeResults.map(safeParseValue);\r\n      \r\n      // Update final time values\r\n      results.time.final = {\r\n        current: finalTimeValues[0],\r\n        uptime: {\r\n          total: finalTimeValues[1],\r\n          session: finalTimeValues[3]\r\n        },\r\n        storePeriod: finalTimeValues[2],\r\n        resetCount: finalTimeValues[4],\r\n        resetSource: finalTimeValues[5]\r\n      };\r\n      \r\n      // Add to allResults\r\n      allResults.push(...finalTimeValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading final time information:\", error);\r\n      \r\n      // Add placeholder values to allResults\r\n      const errorValues = Array(6).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n    }\r\n\r\n    // Store all results arrays in the results object\r\n    results.allResults = allResults;\r\n    results.passFailResults = passFailResults;\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-2 checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1397, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc2Report.ts"],"sourcesContent":["// src/services/reports/obc2Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-2 checkout results\r\n * \r\n * @param results The OBC-2 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC2Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-2_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-2 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-2 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Time Sync section\r\n        new Paragraph({\r\n          text: \"* Time Sync:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `BEFORE update OBC-2 Time: ${results.time.before} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `AFTER update OBC-2 Time: ${results.time.after} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Test Summary section\r\n        new Paragraph({\r\n          text: \"* Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN             : ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN           : ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card Voltage         : ${results.voltage.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Flash Voltage           : ${results.voltage.flash.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM Voltage          : ${results.voltage.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Payload Voltage         : ${results.voltage.payload.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `UHF Voltage             : ${results.voltage.uhf.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card                 : ${results.memory.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM                  : ${results.memory.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // OBC-2 Checkout Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Primary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN : -- ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createPrimaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Secondary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN : -- ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createSecondaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createVoltageCurrentSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Memory Test Summary section\r\n        new Paragraph({\r\n          text: \"* Memory Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createMemoryTestSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Final checkout time information\r\n        new Paragraph({\r\n          text: \"* OBC-2 Final Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createFinalCheckoutSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function for Primary CAN section\r\nfunction createPrimaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.primary) {\r\n    const section = results.can.primary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"0\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Secondary CAN section\r\nfunction createSecondaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.secondary) {\r\n    const section = results.can.secondary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"31\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Voltage Current section\r\nfunction createVoltageCurrentSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.voltage) {\r\n      const v = results.voltage;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 SDCard 3V3 V  : ${padString(v.sdCard.value, 4)} mV    ${v.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Flash 3v3 V   : ${padString(v.flash.value, 4)} mV    ${v.flash.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 EEPROM 3V3 V  : ${padString(v.eeprom.value, 4)} mV    ${v.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 V : ${padString(v.payload.value, 4)} mV    ${v.payload.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 I : ${padString(v.payload.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 V     : ${padString(v.uhf.value, 4)} mV    ${v.uhf.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 I     : ${padString(v.uhf.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 V      : ${padString(v.pp.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 I      : ${padString(v.pp.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 GPS V         : ${padString(v.gps.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA V         : ${padString(v.lna.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA I         : ${padString(v.lna.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for Memory Test section\r\n  function createMemoryTestSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.memory) {\r\n      // SD Card Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `SD Card : -- ${results.memory.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.sdCard.result !== \"Not tested\") {\r\n        const sdCard = results.memory.sdCard;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 SDCard 3V3 V          : ${padString(results.voltage.sdCard.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(sdCard.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(sdCard.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(sdCard.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(sdCard.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(sdCard.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(sdCard.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(sdCard.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(sdCard.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `SD Card test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `--------------------------------------------------------------------`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // EEPROM Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `EEPROM : -- ${results.memory.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.eeprom.result !== \"Not tested\") {\r\n        const eeprom = results.memory.eeprom;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 EEPROM 3V3 V          : ${padString(results.voltage.eeprom.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(eeprom.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(eeprom.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(eeprom.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(eeprom.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(eeprom.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(eeprom.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(eeprom.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(eeprom.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `EEPROM test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for final checkout section\r\n  function createFinalCheckoutSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.time && results.time.final) {\r\n      const final = results.time.final;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${final.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${final.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${final.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${final.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${final.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${final.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    } else {\r\n      // Use the initial time readings if final time readings are not available\r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  /**\r\n   * Utility function to pad a string to a specific length\r\n   * \r\n   * @param value The string value to pad\r\n   * @param length The desired length\r\n   * @returns The padded string\r\n   */\r\n  function padString(value: string | number | undefined, length: number): string {\r\n    if (value === undefined || value === null) return ''.padStart(length, ' ');\r\n    return String(value).padStart(length, ' ');\r\n  }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2716, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/sbandCheckout.ts"],"sourcesContent":["// src/services/checkout/sbandCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the S-Band checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (additional S-Band specific options)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runSBandCheckout(\r\n  sock: any, \r\n  options: { testTX: boolean; testRX: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      fpga: { \r\n        version: '',\r\n        build: '',\r\n        type: '',\r\n        option: ''\r\n      },\r\n      hardware: {\r\n        idYear: '',\r\n        idMonth: '',\r\n        orderNumber: ''\r\n      },\r\n      status: {\r\n        lclStatus: ''\r\n      },\r\n      receiver: {\r\n        status: '',\r\n        sensitivity: '',\r\n        frequencyShift: '',\r\n        iqPower: '',\r\n        agcValue: '',\r\n        demodEb: '',\r\n        demodN0: '',\r\n        dataRate: ''\r\n      },\r\n      transmitter: {\r\n        status: '',\r\n        convDiff: '',\r\n        convFilter: '',\r\n        waveform: '',\r\n        pcmIndex: '',\r\n        agcValue: ''\r\n      },\r\n      modes: {\r\n        coherentMode: '',\r\n        rangingMode: ''\r\n      },\r\n      temperature: {\r\n        adc0: '',\r\n        adc1: ''\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n\r\n    // Step 1: Initialize the test (5%)\r\n    onProgress('Initializing S-Band Checkout', 5);\r\n    \r\n    // Define all telemetry parameters to query\r\n    const sbandTlm = [\r\n      \"OBC1_SBand_FPGA_version\", \r\n      \"OBC1_SBand_FPGA_build\", \r\n      \"OBC1_SBand_hardware_id_year\",\r\n      \"OBC1_SBand_hardware_id_month\", \r\n      \"OBC1_SBand_hardware_id_order_n\", \r\n      \"OBC1_SBand_FPGA_type\",\r\n      \"OBC1_SBand_LCL_status\", \r\n      \"OBC1_SBand_FPGA_option\", \r\n      \"OBC1_SBand_RX_status\",\r\n      \"OBC1_SBand_RX_sensitivity\", \r\n      \"OBC1_SBand_RX_frequency_shift\", \r\n      \"OBC1_SBand_RX_IQ_power\",\r\n      \"OBC1_SBand_RX_AGC_value\", \r\n      \"OBC1_SBand_RX_demod_Eb\", \r\n      \"OBC1_SBand_RX_demod_N0\",\r\n      \"OBC1_SBand_RX_data_rate\", \r\n      \"OBC1_SBand_TX_status\", \r\n      \"OBC1_SBand_TX_conv_diff\",\r\n      \"OBC1_SBand_TX_conv_filter\", \r\n      \"OBC1_SBand_TX_waveform\", \r\n      \"OBC1_SBand_TX_pcm_index\",\r\n      \"OBC1_SBand_TX_agc_value\", \r\n      \"OBC1_SBand_coherent_mode\", \r\n      \"OBC1_SBand_ranging_mode\",\r\n      \"OBC1_SBand_adc_reg_00\", \r\n      \"OBC1_SBand_adc_reg_04\"\r\n    ];\r\n\r\n    // Step 2: Activate S-Band hardware (if needed) (10%)\r\n    onProgress('Activating S-Band Hardware', 10);\r\n    \r\n    try {\r\n      // Send activation command (value 5 corresponds to S-Band activation)\r\n      if (options.testTX || options.testRX) {\r\n        await mccifSet(sock, \"OBC1_Command\", 5);\r\n        \r\n        // Wait for activation (60 seconds in the original Python script)\r\n        onProgress('Waiting for S-Band hardware to initialize', 15);\r\n        \r\n        // Simulate waiting with multiple progress updates\r\n        for (let i = 0; i < 6; i++) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          onProgress(`Waiting for S-Band hardware to initialize (${(i+1)*10}s)`, 15 + i*5);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error activating S-Band hardware:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n    \r\n    // Step 3: Read all S-Band telemetry parameters (50%)\r\n    onProgress('Reading S-Band Telemetry', 50);\r\n    \r\n    try {\r\n      const tlmResults = await mccifRead(sock, sbandTlm);\r\n      \r\n      // Process and store the results\r\n      const tlmValues = tlmResults.map(safeParseValue);\r\n      allResults.push(...tlmValues);\r\n      \r\n      // FPGA information\r\n      results.fpga.version = tlmValues[0];\r\n      results.fpga.build = tlmValues[1];\r\n      results.fpga.type = tlmValues[5];\r\n      results.fpga.option = tlmValues[7];\r\n      \r\n      // Hardware information\r\n      results.hardware.idYear = tlmValues[2];\r\n      results.hardware.idMonth = tlmValues[3];\r\n      results.hardware.orderNumber = tlmValues[4];\r\n      \r\n      // Status information\r\n      results.status.lclStatus = tlmValues[6];\r\n      \r\n      // Receiver information\r\n      results.receiver.status = tlmValues[8];\r\n      results.receiver.sensitivity = tlmValues[9];\r\n      results.receiver.frequencyShift = tlmValues[10];\r\n      results.receiver.iqPower = tlmValues[11];\r\n      results.receiver.agcValue = tlmValues[12];\r\n      results.receiver.demodEb = tlmValues[13];\r\n      results.receiver.demodN0 = tlmValues[14];\r\n      results.receiver.dataRate = tlmValues[15];\r\n      \r\n      // Transmitter information\r\n      results.transmitter.status = tlmValues[16];\r\n      results.transmitter.convDiff = tlmValues[17];\r\n      results.transmitter.convFilter = tlmValues[18];\r\n      results.transmitter.waveform = tlmValues[19];\r\n      results.transmitter.pcmIndex = tlmValues[20];\r\n      results.transmitter.agcValue = tlmValues[21];\r\n      \r\n      // Modes information\r\n      results.modes.coherentMode = tlmValues[22];\r\n      results.modes.rangingMode = tlmValues[23];\r\n      \r\n      // Temperature information\r\n      results.temperature.adc0 = tlmValues[24];\r\n      results.temperature.adc1 = tlmValues[25];\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading S-Band telemetry:\", error);\r\n      \r\n      // Fill results with N.A. values in case of error\r\n      sbandTlm.forEach(() => allResults.push(\"N.A.\"));\r\n      \r\n      // Set all result values to N.A.\r\n      results.fpga = { version: 'N.A.', build: 'N.A.', type: 'N.A.', option: 'N.A.' };\r\n      results.hardware = { idYear: 'N.A.', idMonth: 'N.A.', orderNumber: 'N.A.' };\r\n      results.status = { lclStatus: 'N.A.' };\r\n      results.receiver = { \r\n        status: 'N.A.', sensitivity: 'N.A.', frequencyShift: 'N.A.', iqPower: 'N.A.',\r\n        agcValue: 'N.A.', demodEb: 'N.A.', demodN0: 'N.A.', dataRate: 'N.A.' \r\n      };\r\n      results.transmitter = { \r\n        status: 'N.A.', convDiff: 'N.A.', convFilter: 'N.A.',\r\n        waveform: 'N.A.', pcmIndex: 'N.A.', agcValue: 'N.A.' \r\n      };\r\n      results.modes = { coherentMode: 'N.A.', rangingMode: 'N.A.' };\r\n      results.temperature = { adc0: 'N.A.', adc1: 'N.A.' };\r\n    }\r\n    \r\n    // Step 4: Run TX test if requested (75%)\r\n    if (options.testTX) {\r\n      onProgress('Testing S-Band Transmitter', 75);\r\n      \r\n      try {\r\n        // Simulate TX testing\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Additional TX test logic would go here\r\n        results.txTest = { \r\n          completed: true,\r\n          status: 'Success'\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error testing S-Band TX:\", error);\r\n        results.txTest = { \r\n          completed: false,\r\n          status: 'Failed',\r\n          error: error instanceof Error ? error.message : String(error)\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Step 5: Run RX test if requested (90%)\r\n    if (options.testRX) {\r\n      onProgress('Testing S-Band Receiver', 90);\r\n      \r\n      try {\r\n        // Simulate RX testing\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Additional RX test logic would go here\r\n        results.rxTest = { \r\n          completed: true,\r\n          status: 'Success'\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error testing S-Band RX:\", error);\r\n        results.rxTest = { \r\n          completed: false,\r\n          status: 'Failed',\r\n          error: error instanceof Error ? error.message : String(error)\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Step 6: Complete the test (100%)\r\n    onProgress('S-Band Checkout Complete', 100);\r\n    \r\n    // Store raw results\r\n    results.allResults = allResults;\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error during S-Band checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2970, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/sbandReport.ts"],"sourcesContent":["// src/services/reports/sbandReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for S-Band checkout results\r\n * \r\n * @param results The S-Band test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateSBandReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `S-Band_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create all document paragraphs in one array\r\n  const paragraphs = [\r\n    // Title\r\n    new Paragraph({\r\n      text: \"S-Band Automated Self Check Out Test\",\r\n      heading: HeadingLevel.HEADING_1,\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // Test metadata\r\n    new Paragraph({\r\n      text: `Test Version: 24.3.21`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test Date: ${now.toLocaleDateString()}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test Time: ${now.toLocaleTimeString()}`,\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // Separator\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // S-Band Telemetry Section\r\n    new Paragraph({\r\n      text: \"* S-Band Telemetry :\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // FPGA Information\r\n    new Paragraph({\r\n      text: `FPGA version on the FPGA software                   : ${results.fpga.version}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `FPGA build on the FPGA software                     : ${results.fpga.build}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Year of the baseband board manufacture              : ${results.hardware.idYear}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Week of the baseband board manufacture              : ${results.hardware.idMonth}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Ordering number of the baseband board manufacture   : ${results.hardware.orderNumber}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `FPGA type and function                              : ${results.fpga.type}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current configuration of the LCL function           : ${results.status.lclStatus}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Options configured in the FlashROM of the FPGA      : ${results.fpga.option}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Receiver Information\r\n    new Paragraph({\r\n      text: `State of the receiver                               : ${results.receiver.status}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current configuration of receiver sensitivity level : ${results.receiver.sensitivity}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Frequency shift measured by receiver                : ${results.receiver.frequencyShift} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `IQ input power measured on the digital signal       : ${results.receiver.iqPower}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current DAC to control the RF gain of RX frontend   : ${results.receiver.agcValue}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Eb information measured by the receiver             : ${results.receiver.demodEb}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `N0 information measured by the receiver             : ${results.receiver.demodN0}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Receiver data rate configuration                    : ${results.receiver.dataRate}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Transmitter Information\r\n    new Paragraph({\r\n      text: `Status of the transmitter                           : ${results.transmitter.status}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Encoder configuration                               : ${results.transmitter.convDiff}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Filter configuration                                : ${results.transmitter.convFilter}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Configuration of output waveform of modulated signal: ${results.transmitter.waveform}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `PCM/PM modulation index                             : ${results.transmitter.pcmIndex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current DAC used to control the gain of the TX RF   : ${results.transmitter.agcValue}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Modes Information\r\n    new Paragraph({\r\n      text: `Coherent mode status                                : ${results.modes.coherentMode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Ranging mode status                                 : ${results.modes.rangingMode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Temperature Information\r\n    new Paragraph({\r\n      text: `Value read on the input 0 of the ADC                : ${results.temperature.adc0} deg C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Value read on the input 1 of the ADC                : ${results.temperature.adc1} deg C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Separator\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    }),\r\n  ];\r\n  \r\n  // Add a page break before the TX/RX test sections\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"\",\r\n      pageBreakBefore: true\r\n    })\r\n  );\r\n  \r\n  // Add TX test section if performed\r\n  if (results.txTest) {\r\n    const txTestParagraphs = createTxTestSection(results);\r\n    paragraphs.push(...txTestParagraphs);\r\n  }\r\n  \r\n  // Add RX test section if performed\r\n  if (results.rxTest) {\r\n    const rxTestParagraphs = createRxTestSection(results);\r\n    paragraphs.push(...rxTestParagraphs);\r\n  }\r\n  \r\n  // Create the document with all the paragraphs\r\n  const doc = new Document({\r\n    sections: [\r\n      {\r\n        properties: {},\r\n        children: paragraphs\r\n      }\r\n    ]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create TX test section\r\nfunction createTxTestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [\r\n    new Paragraph({\r\n      text: \"* S-Band Transmitter Test Results:\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test completed: ${results.txTest.completed ? \"Yes\" : \"No\"}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test status: ${results.txTest.status}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n  \r\n  // Add error message if the test failed\r\n  if (results.txTest.error) {\r\n    paragraphs.push(\r\n      new Paragraph({\r\n        text: `Error: ${results.txTest.error}`,\r\n        spacing: { after: 100 }\r\n      })\r\n    );\r\n  }\r\n  \r\n  // Add separator\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    })\r\n  );\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function to create RX test section\r\nfunction createRxTestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [\r\n    new Paragraph({\r\n      text: \"* S-Band Receiver Test Results:\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test completed: ${results.rxTest.completed ? \"Yes\" : \"No\"}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test status: ${results.rxTest.status}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n  \r\n  // Add error message if the test failed\r\n  if (results.rxTest.error) {\r\n    paragraphs.push(\r\n      new Paragraph({\r\n        text: `Error: ${results.rxTest.error}`,\r\n        spacing: { after: 100 }\r\n      })\r\n    );\r\n  }\r\n  \r\n  // Add separator\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    })\r\n  );\r\n  \r\n  return paragraphs;\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3371, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/uhfCheckout.ts"],"sourcesContent":["// src/services/checkout/uhfCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the UHF checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (enables specific UHF tests)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runUHFCheckout(\r\n  sock: any, \r\n  options: { testTransmitter: boolean; testReceiver: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      telemetry: {\r\n        boardTemperature: '',\r\n        paTemperature: '',\r\n        lastRssi: '',\r\n        lastRferr: '',\r\n        txCount: '',\r\n        rxCount: '',\r\n        txBytes: '',\r\n        rxBytes: '',\r\n        activeConf: '',\r\n        bootCount: '',\r\n        bootCause: '',\r\n        lastContact: '',\r\n        bgndRssi: '',\r\n        txDuty: '',\r\n        totalTxCount: '',\r\n        totalRxCount: '',\r\n        totalTxBytes: '',\r\n        totalRxBytes: ''\r\n      },\r\n      system: {\r\n        rssiOffset: '',\r\n        maxTemp: '',\r\n        bgndrssiEma: '',\r\n        cspNode: '',\r\n        i2cEn: '',\r\n        canEn: '',\r\n        extpptEn: '',\r\n        ledEn: '',\r\n        kissUsart: '',\r\n        goshUsart: '',\r\n        i2cAddr: '',\r\n        i2cKhz: '',\r\n        canKhz: '',\r\n        rebootIn: '',\r\n        txInhibit: '',\r\n        logStore: '',\r\n        txPwr: '',\r\n        maxTxTime: '',\r\n        maxIdleTime: ''\r\n      },\r\n      receiver: {\r\n        frequency: '',\r\n        baudrate: '',\r\n        modindex: '',\r\n        guard: '',\r\n        pllrang: '',\r\n        mode: '',\r\n        cspHmac: '',\r\n        cspRs: '',\r\n        cspCrc: '',\r\n        cspRand: '',\r\n        hmacKeys: ['', '', '', ''],\r\n        ax25Call: ['', '', ''],\r\n        bandwidth: '',\r\n        afcrange: ''\r\n      },\r\n      transmitter: {\r\n        frequency: '',\r\n        baudrate: '',\r\n        modindex: '',\r\n        guard: '',\r\n        pllrang: '',\r\n        mode: '',\r\n        cspHmac: '',\r\n        cspRs: '',\r\n        cspCrc: '',\r\n        cspRand: '',\r\n        hmacKeys: ['', '', '', ''],\r\n        ax25Call: ['', '', ''],\r\n        preamb: '',\r\n        preamblen: '',\r\n        preambflags: '',\r\n        intfrm: '',\r\n        intfrmlen: '',\r\n        intfrmflags: '',\r\n        rssibusy: '',\r\n        kupDelay: '',\r\n        paLevel: '',\r\n        ber: ''\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n\r\n    // Step 1: Initialize test (5%)\r\n    onProgress('Initializing UHF Checkout', 5);\r\n    \r\n    // Define all telemetry variables based on the Python script\r\n    const telemetryVars = [\r\n      \"OBC2_Uhf_BoardTemperature\", \"OBC2_Uhf_PaTemperature\", \"OBC2_Uhf_LastRssi\",\r\n      \"OBC2_Uhf_LastRferr\", \"OBC2_Uhf_TxCount\", \"OBC2_Uhf_RxCount\", \"OBC2_Uhf_TxBytes\",\r\n      \"OBC2_Uhf_RxBytes\", \"OBC2_Uhf_ActiveConf\", \"OBC2_Uhf_BootCount\", \"OBC2_Uhf_BootCause\",\r\n      \"OBC2_Uhf_LastContact\", \"OBC2_Uhf_BgndRssi\", \"OBC2_Uhf_TxDuty\", \"OBC2_Uhf_TotalTxCount\",\r\n      \"OBC2_Uhf_TotalRxCount\", \"OBC2_Uhf_TotalTxBytes\", \"OBC2_Uhf_TotalRxBytes\"\r\n    ];\r\n\r\n    const sysVars = [\r\n      \"UHF_rssi_offset\", \"UHF_max_temp\", \"UHF_bgndrssi_ema\", \"UHF_csp_node\", \"UHF_i2c_en\", \"UHF_can_en\",\r\n      \"UHF_extppt_en\", \"UHF_led_en\", \"UHF_kiss_usart\", \"UHF_gosh_usart\", \"UHF_i2c_addr\", \"UHF_i2c_khz\",\r\n      \"UHF_can_khz\", \"UHF_reboot_in\", \"UHF_tx_inhibit\", \"UHF_log_store\", \"UHF_tx_pwr\", \"UHF_max_tx_time\",\r\n      \"UHF_max_idle_time\"\r\n    ];\r\n\r\n    const rxVars = [\r\n      \"UHF_rx_freq\", \"UHF_rx_baud\", \"UHF_rx_modindex\", \"UHF_rx_guard\", \"UHF_rx_pllrang\", \"UHF_rx_mode\",\r\n      \"UHF_rx_csp_hmac\", \"UHF_rx_csp_rs\", \"UHF_rx_csp_crc\", \"UHF_rx_csp_rand\", \"UHF_rx_csp_hmac_key_0\",\r\n      \"UHF_rx_csp_hmac_key_1\", \"UHF_rx_csp_hmac_key_2\", \"UHF_rx_csp_hmac_key_3\", \"UHF_rx_ax25_call_0\",\r\n      \"UHF_rx_ax25_call_1\", \"UHF_rx_ax25_call_2\", \"UHF_rx_bw\", \"UHF_rx_afcrange\"\r\n    ];\r\n\r\n    const txVars = [\r\n      \"UHF_tx_freq\", \"UHF_tx_baud\", \"UHF_tx_modindex\", \"UHF_tx_guard\", \"UHF_tx_pllrang\", \"UHF_tx_mode\",\r\n      \"UHF_tx_csp_hmac\", \"UHF_tx_csp_rs\", \"UHF_tx_csp_crc\", \"UHF_tx_csp_rand\", \"UHF_tx_csp_hmac_key_0\",\r\n      \"UHF_tx_csp_hmac_key_1\", \"UHF_tx_csp_hmac_key_2\", \"UHF_tx_csp_hmac_key_3\", \"UHF_tx_ax25_call_0\",\r\n      \"UHF_tx_ax25_call_1\", \"UHF_tx_ax25_call_2\", \"UHF_tx_preamb\", \"UHF_tx_preamblen\", \"UHF_tx_preambflags\",\r\n      \"UHF_tx_intfrm\", \"UHF_tx_intfrmlen\", \"UHF_tx_intfrmflags\", \"UHF_tx_rssibusy\", \"UHF_tx_kup_delay\",\r\n      \"UHF_tx_pa_level\", \"UHF_tx_ber\"\r\n    ];\r\n    \r\n    // Step 2: Send downlink type command (20%)\r\n    onProgress('Setting UHF Downlink Type', 20);\r\n\r\n    try {\r\n      // Similar to the Python implementation, we need to send the same command multiple times\r\n      for (let i = 0; i < 4; i++) {\r\n        await mccifSet(sock, \"OBC2_Downlink_Type\", 3);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds between commands\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error setting downlink type:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read telemetry data (40%)\r\n    onProgress('Reading UHF Telemetry', 40);\r\n\r\n    try {\r\n      const telemetryResults = await mccifRead(sock, telemetryVars);\r\n      \r\n      // Process and store results in the structured format\r\n      const telemetryValues = telemetryResults.map(safeParseValue);\r\n      allResults.push(...telemetryValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.telemetry.boardTemperature = telemetryValues[0];\r\n      results.telemetry.paTemperature = telemetryValues[1];\r\n      results.telemetry.lastRssi = telemetryValues[2];\r\n      results.telemetry.lastRferr = telemetryValues[3];\r\n      results.telemetry.txCount = telemetryValues[4];\r\n      results.telemetry.rxCount = telemetryValues[5];\r\n      results.telemetry.txBytes = telemetryValues[6];\r\n      results.telemetry.rxBytes = telemetryValues[7];\r\n      results.telemetry.activeConf = telemetryValues[8];\r\n      results.telemetry.bootCount = telemetryValues[9];\r\n      results.telemetry.bootCause = telemetryValues[10];\r\n      results.telemetry.lastContact = telemetryValues[11];\r\n      results.telemetry.bgndRssi = telemetryValues[12];\r\n      results.telemetry.txDuty = telemetryValues[13];\r\n      results.telemetry.totalTxCount = telemetryValues[14];\r\n      results.telemetry.totalRxCount = telemetryValues[15];\r\n      results.telemetry.totalTxBytes = telemetryValues[16];\r\n      results.telemetry.totalRxBytes = telemetryValues[17];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF telemetry:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      telemetryVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 4: Read system configuration (60%)\r\n    onProgress('Reading UHF System Configuration', 60);\r\n\r\n    try {\r\n      const sysResults = await mccifRead(sock, sysVars);\r\n      \r\n      // Process and store results\r\n      const sysValues = sysResults.map(safeParseValue);\r\n      allResults.push(...sysValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.system.rssiOffset = sysValues[0];\r\n      results.system.maxTemp = sysValues[1];\r\n      results.system.bgndrssiEma = sysValues[2];\r\n      results.system.cspNode = sysValues[3];\r\n      results.system.i2cEn = sysValues[4];\r\n      results.system.canEn = sysValues[5];\r\n      results.system.extpptEn = sysValues[6];\r\n      results.system.ledEn = sysValues[7];\r\n      results.system.kissUsart = sysValues[8];\r\n      results.system.goshUsart = sysValues[9];\r\n      results.system.i2cAddr = sysValues[10];\r\n      results.system.i2cKhz = sysValues[11];\r\n      results.system.canKhz = sysValues[12];\r\n      results.system.rebootIn = sysValues[13];\r\n      results.system.txInhibit = sysValues[14];\r\n      results.system.logStore = sysValues[15];\r\n      results.system.txPwr = sysValues[16];\r\n      results.system.maxTxTime = sysValues[17];\r\n      results.system.maxIdleTime = sysValues[18];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF system configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      sysVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 5: Read receiver configuration (80%)\r\n    onProgress('Reading UHF Receiver Configuration', 80);\r\n\r\n    try {\r\n      const rxResults = await mccifRead(sock, rxVars);\r\n      \r\n      // Process and store results\r\n      const rxValues = rxResults.map(safeParseValue);\r\n      allResults.push(...rxValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.receiver.frequency = rxValues[0];\r\n      results.receiver.baudrate = rxValues[1];\r\n      results.receiver.modindex = rxValues[2];\r\n      results.receiver.guard = rxValues[3];\r\n      results.receiver.pllrang = rxValues[4];\r\n      results.receiver.mode = rxValues[5];\r\n      results.receiver.cspHmac = rxValues[6];\r\n      results.receiver.cspRs = rxValues[7];\r\n      results.receiver.cspCrc = rxValues[8];\r\n      results.receiver.cspRand = rxValues[9];\r\n      results.receiver.hmacKeys[0] = rxValues[10];\r\n      results.receiver.hmacKeys[1] = rxValues[11];\r\n      results.receiver.hmacKeys[2] = rxValues[12];\r\n      results.receiver.hmacKeys[3] = rxValues[13];\r\n      results.receiver.ax25Call[0] = rxValues[14];\r\n      results.receiver.ax25Call[1] = rxValues[15];\r\n      results.receiver.ax25Call[2] = rxValues[16];\r\n      results.receiver.bandwidth = rxValues[17];\r\n      results.receiver.afcrange = rxValues[18];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF receiver configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      rxVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 6: Read transmitter configuration (100%)\r\n    onProgress('Reading UHF Transmitter Configuration', 100);\r\n\r\n    try {\r\n      const txResults = await mccifRead(sock, txVars);\r\n      \r\n      // Process and store results\r\n      const txValues = txResults.map(safeParseValue);\r\n      allResults.push(...txValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.transmitter.frequency = txValues[0];\r\n      results.transmitter.baudrate = txValues[1];\r\n      results.transmitter.modindex = txValues[2];\r\n      results.transmitter.guard = txValues[3];\r\n      results.transmitter.pllrang = txValues[4];\r\n      results.transmitter.mode = txValues[5];\r\n      results.transmitter.cspHmac = txValues[6];\r\n      results.transmitter.cspRs = txValues[7];\r\n      results.transmitter.cspCrc = txValues[8];\r\n      results.transmitter.cspRand = txValues[9];\r\n      results.transmitter.hmacKeys[0] = txValues[10];\r\n      results.transmitter.hmacKeys[1] = txValues[11];\r\n      results.transmitter.hmacKeys[2] = txValues[12];\r\n      results.transmitter.hmacKeys[3] = txValues[13];\r\n      results.transmitter.ax25Call[0] = txValues[14];\r\n      results.transmitter.ax25Call[1] = txValues[15];\r\n      results.transmitter.ax25Call[2] = txValues[16];\r\n      results.transmitter.preamb = txValues[17];\r\n      results.transmitter.preamblen = txValues[18];\r\n      results.transmitter.preambflags = txValues[19];\r\n      results.transmitter.intfrm = txValues[20];\r\n      results.transmitter.intfrmlen = txValues[21];\r\n      results.transmitter.intfrmflags = txValues[22];\r\n      results.transmitter.rssibusy = txValues[23];\r\n      results.transmitter.kupDelay = txValues[24];\r\n      results.transmitter.paLevel = txValues[25];\r\n      results.transmitter.ber = txValues[26];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF transmitter configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      txVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Store all raw results\r\n    results.allResults = allResults;\r\n    \r\n    // Return the processed results\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error during UHF checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3749, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/uhfReport.ts"],"sourcesContent":["// src/services/reports/uhfReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for UHF checkout results\r\n * \r\n * @param results The UHF test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateUHFReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `UHF_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"UHF Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // UHF Telemetry section\r\n        new Paragraph({\r\n          text: \"* UHF Telemetry :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createTelemetrySection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF System Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF System Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createSystemSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF Receiver Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF Receiver Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createReceiverSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF Transmitter Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF Transmitter Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createTransmitterSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function for the telemetry section\r\nfunction createTelemetrySection(results: any): Paragraph[] {\r\n  const telemetry = results.telemetry;\r\n  return [\r\n    new Paragraph({\r\n      text: `Board temperature (near MCU)                : ${telemetry.boardTemperature} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `PA temperature (near PA)                    : ${telemetry.paTemperature} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Last received RSSI                          : ${telemetry.lastRssi}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Last received RF error                      : ${telemetry.lastRferr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx packets since reboot           : ${telemetry.txCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx packets since reboot           : ${telemetry.rxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx bytes since reboot             : ${telemetry.txBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx bytes since reboot             : ${telemetry.rxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The currently active system configuration   : ${telemetry.activeConf}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The number of reboots                       : ${telemetry.bootCount}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The cause of the reboot                     : ${telemetry.bootCause}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The timestamp of the last valid packet      : ${telemetry.lastContact}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The current background RSSI level           : ${telemetry.bgndRssi}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Total TX duty time since reboot             : ${telemetry.txDuty}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx packets (total)                : ${telemetry.totalTxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx packets (total)                : ${telemetry.totalRxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx bytes (total)                  : ${telemetry.totalTxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx bytes (total)                  : ${telemetry.totalRxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the system configuration section\r\nfunction createSystemSection(results: any): Paragraph[] {\r\n  const system = results.system;\r\n  return [\r\n    new Paragraph({\r\n      text: `Sets the RSSI indicator offset              : ${system.rssiOffset}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Maximum temperature                         : ${system.maxTemp} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Exponential moving average (alpha value)    : ${system.bgndrssiEma}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `CSP address of the AX100 module             : ${system.cspNode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables I2C                                 : ${system.i2cEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables CAN                                 : ${system.canEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables push-to-talk driver (GS100 only)    : ${system.extpptEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set to zero to disable the on-board leds    : ${system.ledEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set which USART to use for KISS interface   : ${system.kissUsart}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set which USART to use for GOSH interface   : ${system.goshUsart}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The non-shifted I2C address of the system   : ${system.i2cAddr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The speed of the I2C master                 : ${system.i2cKhz}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The speed of the CAN bus                    : ${system.canKhz}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds before automatic reboot   : ${system.rebootIn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds the transmitter shutdown  : ${system.txInhibit}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable log-system FRAM storage backend      : ${system.logStore}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `TX power level                              : ${system.txPwr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Maximum seconds to key up the transmitter   : ${system.maxTxTime} seconds`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds the receiver can be idle  : ${system.maxIdleTime} seconds`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the receiver configuration section\r\nfunction createReceiverSection(results: any): Paragraph[] {\r\n  const receiver = results.receiver;\r\n  return [\r\n    new Paragraph({\r\n      text: `Frequency in [Hz]                           : ${receiver.frequency} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Baudrate                                    : ${receiver.baudrate} bps`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Same as the tx_modindex                     : ${receiver.modindex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `RX guard in [ms]                            : ${receiver.guard} ms`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Startup value of the PLLRANGE register      : ${receiver.pllrang}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Framing mode                                : ${receiver.mode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable HMAC (checksum and authentication)   : ${receiver.cspHmac}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable Reed-Solomon                         : ${receiver.cspRs}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CRC-32                               : ${receiver.cspCrc}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CCSDS randomization                  : ${receiver.cspRand}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `HMAC key (needs to match transmitter)       : ${receiver.hmacKeys[0]}${receiver.hmacKeys[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The call sign                               : ${receiver.ax25Call[0]}${receiver.ax25Call[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Receiver bandwidth in Hz                    : ${receiver.bandwidth} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Sets the AFC pull-in range in Hz            : ${receiver.afcrange} Hz`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the transmitter configuration section\r\nfunction createTransmitterSection(results: any): Paragraph[] {\r\n  const transmitter = results.transmitter;\r\n  return [\r\n    new Paragraph({\r\n      text: `Frequency in [Hz]                           : ${transmitter.frequency} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Baudrate                                    : ${transmitter.baudrate} bps`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Same as the tx_modindex                     : ${transmitter.modindex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `RX guard in [ms]                            : ${transmitter.guard} ms`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Startup value of the PLLRANGE register      : ${transmitter.pllrang}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Framing mode                                : ${transmitter.mode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable HMAC (checksum and authentication)   : ${transmitter.cspHmac}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable Reed-Solomon                         : ${transmitter.cspRs}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CRC-32                               : ${transmitter.cspCrc}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CCSDS randomization                  : ${transmitter.cspRand}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `HMAC key (needs to match transmitter)       : ${transmitter.hmacKeys[0]}${transmitter.hmacKeys[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The call sign                               : ${transmitter.ax25Call[0]}${transmitter.ax25Call[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The byte to use as preamble                 : ${transmitter.preamb}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The length of the preamble in bytes         : ${transmitter.preamblen} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The flags to use for the preamble           : ${transmitter.preambflags}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The byte to use between two frames          : ${transmitter.intfrm}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The number of bytes put between two frames  : ${transmitter.intfrmlen} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The flags to use for the intfrm bytes       : ${transmitter.intfrmflags}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Busy when the RSSI is above this value      : ${transmitter.rssibusy}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `An additional delay of the first frame      : ${transmitter.kupDelay}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The input level for the PA                  : ${transmitter.paLevel}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Injects random bit-errors                   : ${transmitter.ber}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4387, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/hepsCheckout.ts"],"sourcesContent":["// src/services/checkout/hepsCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Check if CAN communication is working by comparing before/after values\r\n * @param valuesBefore Array of values before test\r\n * @param valuesAfter Array of values after test\r\n * @param packetOffset Offset for acknowledgement packets\r\n * @returns Pass/Fail string\r\n */\r\nfunction canCheck(valuesBefore: string[], valuesAfter: string[], packetOffset: number): string {\r\n  if (valuesBefore.length < packetOffset + 5 || valuesAfter.length < packetOffset + 5) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Calculate differences in transmitted packets\r\n  const pcmTxDiff = parseInt(valuesAfter[0]) - parseInt(valuesBefore[0]);\r\n  const psm1TxDiff = parseInt(valuesAfter[1]) - parseInt(valuesBefore[1]);\r\n  const psm2TxDiff = parseInt(valuesAfter[2]) - parseInt(valuesBefore[2]);\r\n  const pdm1TxDiff = parseInt(valuesAfter[3]) - parseInt(valuesBefore[3]);\r\n  const pdm2TxDiff = parseInt(valuesAfter[4]) - parseInt(valuesBefore[4]);\r\n  \r\n  // Calculate differences in acknowledged packets\r\n  const pcmAckDiff = parseInt(valuesAfter[packetOffset + 0]) - parseInt(valuesBefore[packetOffset + 0]);\r\n  const psm1AckDiff = parseInt(valuesAfter[packetOffset + 1]) - parseInt(valuesBefore[packetOffset + 1]);\r\n  const psm2AckDiff = parseInt(valuesAfter[packetOffset + 2]) - parseInt(valuesBefore[packetOffset + 2]);\r\n  const pdm1AckDiff = parseInt(valuesAfter[packetOffset + 3]) - parseInt(valuesBefore[packetOffset + 3]);\r\n  const pdm2AckDiff = parseInt(valuesAfter[packetOffset + 4]) - parseInt(valuesBefore[packetOffset + 4]);\r\n  \r\n  // Check if all values increased\r\n  if (pcmTxDiff > 0 && pcmAckDiff > 0 &&\r\n      psm1TxDiff > 0 && psm1AckDiff > 0 &&\r\n      psm2TxDiff > 0 && psm2AckDiff > 0 &&\r\n      pdm1TxDiff > 0 && pdm1AckDiff > 0 &&\r\n      pdm2TxDiff > 0 && pdm2AckDiff > 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check if battery voltage is within acceptable range\r\n * @param value Voltage value as string\r\n * @returns Pass/Fail string\r\n */\r\nfunction checkBatt(value: string): string {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Check if voltage is within acceptable range (7.0-8.5V)\r\n  return numValue >= 7.0 && numValue <= 8.5 ? \"[PASS]\" : \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check if voltage is within acceptable range based on expected value\r\n * @param value Voltage value as string\r\n * @param expected Expected voltage value\r\n * @returns Pass/Fail string\r\n */\r\nfunction checkVFloat(value: string, expected: number): string {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Allow 10% tolerance\r\n  const min = expected * 0.9;\r\n  const max = expected * 1.1;\r\n  \r\n  // Check if voltage is within acceptable range\r\n  return numValue >= min && numValue <= max ? \"[PASS]\" : \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Run the HEPS checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (enableHeaters)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runHEPSCheckout(\r\n  sock: any, \r\n  options: { enableHeaters: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize results object to store all test data\r\n    const results: any = {\r\n      can: {\r\n        primary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        },\r\n        secondary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        }\r\n      },\r\n      battery: {\r\n        voltage: { bat1: '', bat2: '', bat3: '', result1: '', result2: '', result3: '' },\r\n        current: { bat1: '', bat2: '', bat3: '' },\r\n        temperature: { bat1: '', bat2: '', bat3: '' }\r\n      },\r\n      solarArray: {\r\n        voltage: { sa1: '', sa2: '', sa3: '' },\r\n        temperature: { \r\n          sa1Yneg: '', sa2Yneg: '', sa3Yneg: '', \r\n          bodyMount: '', sa1Ypos: '', sa2Ypos: '', sa3Ypos: '' \r\n        },\r\n        hdrmStatus: { hdrm1: '', hdrm2: '' }\r\n      },\r\n      obn: {\r\n        obn1: { voltage: '', current: '', result: '' },\r\n        obn2: { voltage: '', current: '', result: '' },\r\n        aux12v: { voltage: '', result: '' }\r\n      },\r\n      bcr: {\r\n        current: { bcr1: '', bcr2: '', bcr3: '' },\r\n        temperature: { bcr1: '', bcr2: '', bcr3: '' }\r\n      },\r\n      pcb: {\r\n        temperature: { pdm1: '', pdm2: '' }\r\n      },\r\n      converters: {\r\n        conv1: {\r\n          hdrm12v: { voltage: '', result: '' },\r\n          conv5v: { voltage: '', result: '' },\r\n          conv12v: { voltage: '', result: '' },\r\n          conv15v: { voltage: '', result: '' },\r\n          temperature: { hdrm12v: '', conv5v: '', conv12v: '', conv15v: '' }\r\n        },\r\n        conv2: {\r\n          hdrm12v: { voltage: '', result: '' },\r\n          conv5v: { voltage: '', result: '' },\r\n          conv12v: { voltage: '', result: '' },\r\n          temperature: { hdrm12v: '', conv5v: '', conv12v: '' }\r\n        }\r\n      },\r\n      rlcl: {\r\n        obc1: { voltage: '', current: '', result: '' },\r\n        obc2: { voltage: '', current: '', result: '' },\r\n        sband: { voltage: '', current: '', result: '' },\r\n        uhf: { voltage: '', current: '', result: '' }\r\n      },\r\n      lcl: {}, // Will be populated with many LCL values\r\n      hdrm: {}, // Will be populated with HDRM values\r\n      heater: {\r\n        heater1: {\r\n          status: '',\r\n          battery: { voltage: '', current: '' },\r\n          thruster: { voltage: '', current: '' },\r\n          leocam: { voltage: '', current: '' },\r\n          test: {} // Will be populated during heater test\r\n        },\r\n        heater2: {\r\n          status: '',\r\n          battery: { voltage: '', current: '' },\r\n          thruster: { voltage: '', current: '' },\r\n          leocam: { voltage: '', current: '' },\r\n          test: {} // Will be populated during heater test\r\n        }\r\n      },\r\n      allResults: [], // Store all raw results for reporting\r\n      passFailResults: [] // Store pass/fail results for reporting\r\n    };\r\n\r\n    // Define all parameter groups\r\n    const canVars = [\"OBC1_InterComm_Heps1_Pcm_Tx\", \"OBC1_InterComm_Heps1_Psm1_Tx\", \"OBC1_InterComm_Heps1_Psm2_Tx\",\r\n                     \"OBC1_InterComm_Heps1_Pdm1_Tx\", \"OBC1_InterComm_Heps1_Pdm2_Tx\", \"OBC1_InterComm_Heps1_Pcm_Ack\",\r\n                     \"OBC1_InterComm_Heps1_Psm1_Ack\", \"OBC1_InterComm_Heps1_Psm2_Ack\", \"OBC1_InterComm_Heps1_Pdm1_Ack\",\r\n                     \"OBC1_InterComm_Heps1_Pdm2_Ack\", \"OBC1_InterComm_Heps1_Pcm_Timeout\",\r\n                     \"OBC1_InterComm_Heps1_Psm1_Timeout\", \"OBC1_InterComm_Heps1_Psm2_Timeout\",\r\n                     \"OBC1_InterComm_Heps1_Pdm1_Timeout\", \"OBC1_InterComm_Heps1_Pdm2_Timeout\",\r\n                     \"OBC1_InterComm_Heps1_Pcm_Error\", \"OBC1_InterComm_Heps1_Psm1_Error\",\r\n                     \"OBC1_InterComm_Heps1_Psm2_Error\", \"OBC1_InterComm_Heps1_Pdm1_Error\",\r\n                     \"OBC1_InterComm_Heps1_Pdm2_Error\"];\r\n    \r\n    const canSetting = [\"OBC1_Intercomm_PriSec_Cfg\"];\r\n    \r\n    const batVI = [\"HEPS1_PCM_BAT_V_1\", \"HEPS1_PCM_BAT_V_2\", \"HEPS1_PCM_BAT_V_3\", \"HEPS1_PCM_BAT_I_CHAR_1\",\r\n                   \"HEPS1_PCM_BAT_I_CHAR_2\", \"HEPS1_PCM_BAT_I_CHAR_3\"];\r\n    \r\n    const batT = [\"HEPS1_PSM1_BAT_TEMP1\", \"HEPS1_PSM1_BAT_TEMP2\", \"HEPS1_PSM1_BAT_TEMP3\"];\r\n    \r\n    const saV = [\"HEPS1_PCM_SA_V_1\", \"HEPS1_PCM_SA_V_2\", \"HEPS1_PCM_SA_V_3\"];\r\n    \r\n    const saT1 = [\"HEPS1_PSM1_SA1_Y-_TEMP\", \"HEPS1_PSM1_SA2_Y-_TEMP\"];\r\n    \r\n    const saT2 = [\"HEPS1_PSM2_SA3_Y-_TEMP\", \"HEPS1_PSM2_SA_BM_TEMP\", \"HEPS1_PSM2_SA1_Y+_TEMP\", \"HEPS1_PSM2_SA2_Y+_TEMP\",\r\n                  \"HEPS1_PSM2_SA3_Y+_TEMP\"];\r\n    \r\n    const hdrmStatus = [\"HEPS1_PSM1_HDRM_DEPLOY_STATUS1\", \"HEPS1_PSM2_HDRM_DEPLOY_STATUS2\"];\r\n    \r\n    const obnVI = [\"HEPS1_PCM_OBN1_V\", \"HEPS1_PCM_OBN1_I\", \"HEPS1_PCM_OBN2_V\", \"HEPS1_PCM_OBN2_I\", \"HEPS1_PCM_AUX12_V\"];\r\n    \r\n    const bcrIT = [\"HEPS1_PCM_BCR1_I\", \"HEPS1_PCM_BCR2_I\", \"HEPS1_PCM_BCR3_I\", \"HEPS1_PCM_BCR1_TEMP\",\r\n                   \"HEPS1_PCM_BCR2_TEMP\", \"HEPS1_PCM_BCR3_TEMP\"];\r\n    \r\n    const pcbT = [\"HEPS1_PDM1_PCB_TEMP\", \"HEPS1_PDM2_PCB_TEMP\"];\r\n    \r\n    const conv1V = [\"HEPS1_PSM1_HDRM_CON1_V\", \"HEPS1_PSM1_5V_CON1_V\", \"HEPS1_PSM1_12V_CON1_V\", \"HEPS1_PSM1_15V_CON_V\"];\r\n    \r\n    const conv2V = [\"HEPS1_PSM2_HDRM_CON2_V\", \"HEPS1_PSM2_5V_CON2_V\", \"HEPS1_PSM2_12V_CON2_V\"];\r\n    \r\n    const conv1T = [\"HEPS1_PSM1_HDRM_CON1_TEMP\", \"HEPS1_PSM1_5V_CON1_TEMP\", \"HEPS1_PSM1_12V_CON1_TEMP\",\r\n                    \"HEPS1_PSM1_15V_CON1_TEMP\"];\r\n    \r\n    const conv2T = [\"HEPS1_PSM2_HDRM_CON2_TEMP\", \"HEPS1_PSM2_5V_CON2_TEMP\", \"HEPS1_PSM2_12V_CON2_TEMP\"];\r\n    \r\n    const rlclVI = [\"HEPS1_PDM2_OBC1_V\", \"HEPS1_PDM2_OBC1_I\", \"HEPS1_PDM1_OBC2_V\", \"HEPS1_PDM1_OBC2_I\",\r\n                    \"HEPS1_PDM1_S-BAND_V\", \"HEPS1_PDM1_S-BAND_I\", \"HEPS1_PDM2_UHF_V\", \"HEPS1_PDM2_UHF_I\"];\r\n    \r\n    const lclVI = [\"HEPS1_PDM2_ADCS_IF_V\", \"HEPS1_PDM2_ADCS-IF_I\", \"HEPS1_PDM2_ADCD_RW_V\", \"HEPS1_PDM2_ADCD_RW_I\",\r\n                   \"HEPS1_PDM2_GPS_5V_V\", \"HEPS1_PDM2_GPS_5V_I\", \"HEPS1_PDM1_ECU1_V\", \"HEPS1_PDM1_ECU1_I\",\r\n                   \"HEPS1_PDM1_THRU1_V\", \"HEPS1_PDM1_THRU1_I\", \"HEPS1_PDM2_ECU2_V\", \"HEPS1_PDM2_ECU2_I\",\r\n                   \"HEPS1_PDM2_THRU2_V\", \"HEPS1_PDM2_THRU2_I\", \"HEPS1_PDM2_PCS_V\", \"HEPS1_PDM2_PCS_I\",\r\n                   \"HEPS1_PDM1_OPT_CAM_V\", \"HEPS1_PDM1_OPT_CAM_I\", \"HEPS1_PDM1_X-BAND_V\", \"HEPS1_PDM1_X-BAND_I\",\r\n                   \"HEPS1_PDM1_AOD1_V\", \"HEPS1_PDM1_AOD1_I\", \"HEPS1_PDM2_AOD2_V\", \"HEPS1_PDM2_AOD2_I\",\r\n                   \"HEPS1_PDM1_CIP_V\", \"HEPS1_PDM1_CIP_I\"];\r\n    \r\n    const hdrmVI = [\"HEPS1_PDM1_HDRM1_ARM_V\", \"HEPS1_PDM1_HDRM1_SW01_V\", \"HEPS1_PDM1_HDRM1_SW01_I\",\r\n                    \"HEPS1_PDM1_HDRM1_SW02_V\", \"HEPS1_PDM1_HDRM1_SW03_V\", \"HEPS1_PDM1_HDRM1_SW02_I\",\r\n                    \"HEPS1_PDM1_HDRM1_SW03_I\", \"HEPS1_PDM2_HDRM2_ARM_V\", \"HEPS1_PDM2_HDRM2_SW01_V\",\r\n                    \"HEPS1_PDM2_HDRM2_SW01_I\", \"HEPS1_PDM2_HDRM2_SW02_V\", \"HEPS1_PDM2_HDRM2_SW03_V\",\r\n                    \"HEPS1_PDM2_HDRM2_SW02_I\", \"HEPS1_PDM2_HDRM2_SW03_I\"];\r\n    \r\n    const heater1VI = [\"HEPS1_PSM1_HT1_LCL\", \"HEPS1_PSM1_BAT_HT1_V\", \"HEPS1_PSM1_BAT_HT1_I\", \"HEPS1_PSM1_THRU_HT1_V\",\r\n                       \"HEPS1_PSM1_THRU_HT1_I\", \"HEPS1_PSM1_CAM_HT1_V\", \"HEPS1_PSM1_CAM_HT1_I\"];\r\n    \r\n    const heater2VI = [\"HEPS1_PSM2_HT2_LCL\", \"HEPS1_PSM2_BAT_HT2_V\", \"HEPS1_PSM2_BAT_HT2_I\", \"HEPS1_PSM2_THRU_HT2_V\",\r\n                       \"HEPS1_PSM2_THRU_HT2_I\", \"HEPS1_PSM2_CAM_HT2_V\", \"HEPS1_PSM2_CAM_HT2_I\"];\r\n\r\n    // Step 1: Test Primary CAN (5%)\r\n    onProgress('Testing Primary CAN Communication', 5);\r\n    \r\n    try {\r\n      // Read initial CAN values\r\n      const canBeforeResults = await mccifRead(sock, canVars);\r\n      const canBeforeValues: string[] = canBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.before.tx.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.before.ack.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.before.timeout.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.before.error.push(canBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...canBeforeValues);\r\n      \r\n      // Read CAN configuration\r\n      const canSettingResult = await mccifRead(sock, canSetting);\r\n      const canSettingValue = safeParseValue(canSettingResult[0]);\r\n      results.allResults.push(canSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canAfterResults = await mccifRead(sock, canVars);\r\n      const canAfterValues: string[] = canAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.after.tx.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.after.ack.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.after.timeout.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.after.error.push(canAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...canAfterValues);\r\n      \r\n      // Check primary CAN result\r\n      results.can.primary.result = canCheck(canBeforeValues, canAfterValues, 5);\r\n      results.passFailResults.push(results.can.primary.result);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing primary CAN:\", error);\r\n      results.can.primary.result = \"[FAIL]\";\r\n      results.passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        results.allResults.push(\"error\");\r\n      }\r\n    }\r\n\r\n    // Step 2: Test Secondary CAN (10%)\r\n    onProgress('Testing Secondary CAN Communication', 10);\r\n    \r\n    try {\r\n      // Set to secondary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 31);\r\n      \r\n      // Read initial CAN values for secondary\r\n      const canSecBeforeResults = await mccifRead(sock, canVars);\r\n      const canSecBeforeValues: string[] = canSecBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.before.tx.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.before.ack.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.before.timeout.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.before.error.push(canSecBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...canSecBeforeValues);\r\n      \r\n      // Read secondary CAN configuration\r\n      const canSecSettingResult = await mccifRead(sock, canSetting);\r\n      const canSecSettingValue = safeParseValue(canSecSettingResult[0]);\r\n      results.allResults.push(canSecSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canSecAfterResults = await mccifRead(sock, canVars);\r\n      const canSecAfterValues: string[] = canSecAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.after.tx.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.after.ack.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.after.timeout.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.after.error.push(canSecAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...canSecAfterValues);\r\n      \r\n      // Check secondary CAN result\r\n      results.can.secondary.result = canCheck(canSecBeforeValues, canSecAfterValues, 5);\r\n      results.passFailResults.push(results.can.secondary.result);\r\n      \r\n      // Reset to primary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing secondary CAN:\", error);\r\n      results.can.secondary.result = \"[FAIL]\";\r\n      results.passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        results.allResults.push(\"error\");\r\n      }\r\n      \r\n      // Try to reset to primary CAN\r\n      try {\r\n        await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      } catch (error) {\r\n        console.error(\"Error resetting to primary CAN:\", error);\r\n      }\r\n    }\r\n\r\n    // Step 3: Battery checks (20%)\r\n    onProgress('Reading Battery Parameters', 20);\r\n    \r\n    try {\r\n      // Read battery voltage and current\r\n      const batVIResults = await mccifRead(sock, batVI);\r\n      const batVIValues: string[] = batVIResults.map(safeParseValue);\r\n      \r\n      // Store battery voltage values\r\n      results.battery.voltage.bat1 = batVIValues[0];\r\n      results.battery.voltage.bat2 = batVIValues[1];\r\n      results.battery.voltage.bat3 = batVIValues[2];\r\n      \r\n      // Store battery current values\r\n      results.battery.current.bat1 = batVIValues[3];\r\n      results.battery.current.bat2 = batVIValues[4];\r\n      results.battery.current.bat3 = batVIValues[5];\r\n      \r\n      // Check battery voltages\r\n      results.battery.voltage.result1 = checkBatt(batVIValues[0]);\r\n      results.battery.voltage.result2 = checkBatt(batVIValues[1]);\r\n      results.battery.voltage.result3 = checkBatt(batVIValues[2]);\r\n      \r\n      // Add to passFailResults\r\n      results.passFailResults.push(results.battery.voltage.result1);\r\n      results.passFailResults.push(results.battery.voltage.result2);\r\n      results.passFailResults.push(results.battery.voltage.result3);\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...batVIValues);\r\n      \r\n      // Read battery temperature\r\n      const batTResults = await mccifRead(sock, batT);\r\n      const batTValues: string[] = batTResults.map(safeParseValue);\r\n      \r\n      // Store battery temperature values\r\n      results.battery.temperature.bat1 = batTValues[0];\r\n      results.battery.temperature.bat2 = batTValues[1];\r\n      results.battery.temperature.bat3 = batTValues[2];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...batTValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading battery parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(9).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n      \r\n      // Add fail results to passFailResults\r\n      results.passFailResults.push(\"[FAIL]\", \"[FAIL]\", \"[FAIL]\");\r\n    }\r\n\r\n    // Step 4: Solar Array checks (30%)\r\n    onProgress('Reading Solar Array Parameters', 30);\r\n    \r\n    try {\r\n      // Read solar array voltage\r\n      const saVResults = await mccifRead(sock, saV);\r\n      const saVValues: string[] = saVResults.map(safeParseValue);\r\n      \r\n      // Store solar array voltage values\r\n      results.solarArray.voltage.sa1 = saVValues[0];\r\n      results.solarArray.voltage.sa2 = saVValues[1];\r\n      results.solarArray.voltage.sa3 = saVValues[2];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...saVValues);\r\n      \r\n      // Read solar array temperature (first group)\r\n      const saT1Results = await mccifRead(sock, saT1);\r\n      const saT1Values: string[] = saT1Results.map(safeParseValue);\r\n      \r\n      // Store solar array temperature values (first group)\r\n      results.solarArray.temperature.sa1Yneg = saT1Values[0];\r\n      results.solarArray.temperature.sa2Yneg = saT1Values[1];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...saT1Values);\r\n      \r\n      // Read solar array temperature (second group)\r\n      const saT2Results = await mccifRead(sock, saT2);\r\n      const saT2Values: string[] = saT2Results.map(safeParseValue);\r\n      \r\n      // Store solar array temperature values (second group)\r\n      results.solarArray.temperature.sa3Yneg = saT2Values[0];\r\n      results.solarArray.temperature.bodyMount = saT2Values[1];\r\n      results.solarArray.temperature.sa1Ypos = saT2Values[2];\r\n      results.solarArray.temperature.sa2Ypos = saT2Values[3];\r\n      results.solarArray.temperature.sa3Ypos = saT2Values[4];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...saT2Values);\r\n      \r\n      // Read HDRM deploy status\r\n      const hdrmStatusResults = await mccifRead(sock, hdrmStatus);\r\n      const hdrmStatusValues: string[] = hdrmStatusResults.map(safeParseValue);\r\n      \r\n      // Store HDRM deploy status\r\n      results.solarArray.hdrmStatus.hdrm1 = hdrmStatusValues[0];\r\n      results.solarArray.hdrmStatus.hdrm2 = hdrmStatusValues[1];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...hdrmStatusValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading solar array parameters:\", error);\r\n      \r\n// Set default error values for Solar Array parameters\r\n      const errorVals = Array(12).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n    }\r\n\r\n    // Step 5: OBN checks (40%)\r\n    onProgress('Reading OBN Parameters', 40);\r\n    \r\n    try {\r\n      // Read OBN voltage and current\r\n      const obnVIResults = await mccifRead(sock, obnVI);\r\n      const obnVIValues: string[] = obnVIResults.map(safeParseValue);\r\n      \r\n      // Store OBN values\r\n      results.obn.obn1.voltage = obnVIValues[0];\r\n      results.obn.obn1.current = obnVIValues[1];\r\n      results.obn.obn2.voltage = obnVIValues[2];\r\n      results.obn.obn2.current = obnVIValues[3];\r\n      results.obn.aux12v.voltage = obnVIValues[4];\r\n      \r\n      // Check OBN voltages\r\n      results.obn.obn1.result = checkVFloat(obnVIValues[0], 3.3);\r\n      results.obn.obn2.result = checkVFloat(obnVIValues[2], 3.3);\r\n      results.obn.aux12v.result = checkVFloat(obnVIValues[4], 12.0);\r\n      \r\n      // Add to passFailResults\r\n      results.passFailResults.push(results.obn.obn1.result);\r\n      results.passFailResults.push(results.obn.obn2.result);\r\n      results.passFailResults.push(results.obn.aux12v.result);\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...obnVIValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading OBN parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(5).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n      \r\n      // Add fail results to passFailResults\r\n      results.passFailResults.push(\"[FAIL]\", \"[FAIL]\", \"[FAIL]\");\r\n    }\r\n\r\n    // Step 6: Battery Charging Regulator checks (50%)\r\n    onProgress('Reading BCR Parameters', 50);\r\n    \r\n    try {\r\n      // Read BCR current and temperature\r\n      const bcrITResults = await mccifRead(sock, bcrIT);\r\n      const bcrITValues: string[] = bcrITResults.map(safeParseValue);\r\n      \r\n      // Store BCR values\r\n      results.bcr.current.bcr1 = bcrITValues[0];\r\n      results.bcr.current.bcr2 = bcrITValues[1];\r\n      results.bcr.current.bcr3 = bcrITValues[2];\r\n      results.bcr.temperature.bcr1 = bcrITValues[3];\r\n      results.bcr.temperature.bcr2 = bcrITValues[4];\r\n      results.bcr.temperature.bcr3 = bcrITValues[5];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...bcrITValues);\r\n      \r\n      // Read PCB temperature\r\n      const pcbTResults = await mccifRead(sock, pcbT);\r\n      const pcbTValues: string[] = pcbTResults.map(safeParseValue);\r\n      \r\n      // Store PCB temperature values\r\n      results.pcb.temperature.pdm1 = pcbTValues[0];\r\n      results.pcb.temperature.pdm2 = pcbTValues[1];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...pcbTValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading BCR and PCB parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(8).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n    }\r\n\r\n    // Step 7: Converters checks (60%)\r\n    onProgress('Reading Converter Parameters', 60);\r\n    \r\n    try {\r\n      // Read Converter 1 voltage\r\n      const conv1VResults = await mccifRead(sock, conv1V);\r\n      const conv1VValues: string[] = conv1VResults.map(safeParseValue);\r\n      \r\n      // Store Converter 1 voltage values\r\n      results.converters.conv1.hdrm12v.voltage = conv1VValues[0];\r\n      results.converters.conv1.conv5v.voltage = conv1VValues[1];\r\n      results.converters.conv1.conv12v.voltage = conv1VValues[2];\r\n      results.converters.conv1.conv15v.voltage = conv1VValues[3];\r\n      \r\n      // Check converter voltages\r\n      results.converters.conv1.hdrm12v.result = checkVFloat(conv1VValues[0], 12.0);\r\n      results.converters.conv1.conv5v.result = checkVFloat(conv1VValues[1], 5.0);\r\n      results.converters.conv1.conv12v.result = checkVFloat(conv1VValues[2], 12.0);\r\n      results.converters.conv1.conv15v.result = checkVFloat(conv1VValues[3], 15.0);\r\n      \r\n      // Add to passFailResults\r\n      results.passFailResults.push(results.converters.conv1.hdrm12v.result);\r\n      results.passFailResults.push(results.converters.conv1.conv5v.result);\r\n      results.passFailResults.push(results.converters.conv1.conv12v.result);\r\n      results.passFailResults.push(results.converters.conv1.conv15v.result);\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...conv1VValues);\r\n      \r\n      // Read Converter 2 voltage\r\n      const conv2VResults = await mccifRead(sock, conv2V);\r\n      const conv2VValues: string[] = conv2VResults.map(safeParseValue);\r\n      \r\n      // Store Converter 2 voltage values\r\n      results.converters.conv2.hdrm12v.voltage = conv2VValues[0];\r\n      results.converters.conv2.conv5v.voltage = conv2VValues[1];\r\n      results.converters.conv2.conv12v.voltage = conv2VValues[2];\r\n      \r\n      // Check converter voltages\r\n      results.converters.conv2.hdrm12v.result = checkVFloat(conv2VValues[0], 12.0);\r\n      results.converters.conv2.conv5v.result = checkVFloat(conv2VValues[1], 5.0);\r\n      results.converters.conv2.conv12v.result = checkVFloat(conv2VValues[2], 12.0);\r\n      \r\n      // Add to passFailResults\r\n      results.passFailResults.push(results.converters.conv2.hdrm12v.result);\r\n      results.passFailResults.push(results.converters.conv2.conv5v.result);\r\n      results.passFailResults.push(results.converters.conv2.conv12v.result);\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...conv2VValues);\r\n      \r\n      // Read Converter 1 temperature\r\n      const conv1TResults = await mccifRead(sock, conv1T);\r\n      const conv1TValues: string[] = conv1TResults.map(safeParseValue);\r\n      \r\n      // Store Converter 1 temperature values\r\n      results.converters.conv1.temperature.hdrm12v = conv1TValues[0];\r\n      results.converters.conv1.temperature.conv5v = conv1TValues[1];\r\n      results.converters.conv1.temperature.conv12v = conv1TValues[2];\r\n      results.converters.conv1.temperature.conv15v = conv1TValues[3];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...conv1TValues);\r\n      \r\n      // Read Converter 2 temperature\r\n      const conv2TResults = await mccifRead(sock, conv2T);\r\n      const conv2TValues: string[] = conv2TResults.map(safeParseValue);\r\n      \r\n      // Store Converter 2 temperature values\r\n      results.converters.conv2.temperature.hdrm12v = conv2TValues[0];\r\n      results.converters.conv2.temperature.conv5v = conv2TValues[1];\r\n      results.converters.conv2.temperature.conv12v = conv2TValues[2];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...conv2TValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading converter parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(14).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n      \r\n      // Add fail results to passFailResults\r\n      const failResults = Array(7).fill(\"[FAIL]\");\r\n      results.passFailResults.push(...failResults);\r\n    }\r\n\r\n    // Step 8: RLCL checks (70%)\r\n    onProgress('Reading RLCL Parameters', 70);\r\n    \r\n    try {\r\n      // Read RLCL voltage and current\r\n      const rlclVIResults = await mccifRead(sock, rlclVI);\r\n      const rlclVIValues: string[] = rlclVIResults.map(safeParseValue);\r\n      \r\n      // Store RLCL values\r\n      results.rlcl.obc1.voltage = rlclVIValues[0];\r\n      results.rlcl.obc1.current = rlclVIValues[1];\r\n      results.rlcl.obc2.voltage = rlclVIValues[2];\r\n      results.rlcl.obc2.current = rlclVIValues[3];\r\n      results.rlcl.sband.voltage = rlclVIValues[4];\r\n      results.rlcl.sband.current = rlclVIValues[5];\r\n      results.rlcl.uhf.voltage = rlclVIValues[6];\r\n      results.rlcl.uhf.current = rlclVIValues[7];\r\n      \r\n      // Check RLCL voltages\r\n      results.rlcl.obc1.result = checkVFloat(rlclVIValues[0], 12.0);\r\n      results.rlcl.obc2.result = checkVFloat(rlclVIValues[2], 12.0);\r\n      results.rlcl.sband.result = checkVFloat(rlclVIValues[4], 12.0);\r\n      results.rlcl.uhf.result = checkVFloat(rlclVIValues[6], 12.0);\r\n      \r\n      // Add to passFailResults\r\n      results.passFailResults.push(results.rlcl.obc1.result);\r\n      results.passFailResults.push(results.rlcl.obc2.result);\r\n      results.passFailResults.push(results.rlcl.sband.result);\r\n      results.passFailResults.push(results.rlcl.uhf.result);\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...rlclVIValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading RLCL parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(8).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n      \r\n      // Add fail results to passFailResults\r\n      const failResults = Array(4).fill(\"[FAIL]\");\r\n      results.passFailResults.push(...failResults);\r\n    }\r\n\r\n    // Step 9: LCL, HDRM, Heater parameters (85%)\r\n    onProgress('Reading LCL, HDRM, and Heater Parameters', 85);\r\n    \r\n    try {\r\n      // Read LCL voltage and current\r\n      const lclVIResults = await mccifRead(sock, lclVI);\r\n      const lclVIValues: string[] = lclVIResults.map(safeParseValue);\r\n      \r\n      // Store LCL values in the results object\r\n      for (let i = 0; i < lclVIValues.length; i += 2) {\r\n        const key = lclVI[i].replace('HEPS1_PDM1_', '').replace('HEPS1_PDM2_', '').replace('_V', '');\r\n        results.lcl[key] = {\r\n          voltage: lclVIValues[i],\r\n          current: lclVIValues[i+1]\r\n        };\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...lclVIValues);\r\n      \r\n      // Read HDRM voltage and current\r\n      const hdrmVIResults = await mccifRead(sock, hdrmVI);\r\n      const hdrmVIValues: string[] = hdrmVIResults.map(safeParseValue);\r\n      \r\n      // Store HDRM values in the results object\r\n      for (let i = 0; i < hdrmVIValues.length; i++) {\r\n        const key = hdrmVI[i].replace('HEPS1_PDM1_', '').replace('HEPS1_PDM2_', '');\r\n        results.hdrm[key] = hdrmVIValues[i];\r\n      }\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...hdrmVIValues);\r\n      \r\n      // Read Heater 1 values\r\n      const heater1VIResults = await mccifRead(sock, heater1VI);\r\n      const heater1VIValues: string[] = heater1VIResults.map(safeParseValue);\r\n      \r\n      // Store Heater 1 values\r\n      results.heater.heater1.status = heater1VIValues[0];\r\n      results.heater.heater1.battery.voltage = heater1VIValues[1];\r\n      results.heater.heater1.battery.current = heater1VIValues[2];\r\n      results.heater.heater1.thruster.voltage = heater1VIValues[3];\r\n      results.heater.heater1.thruster.current = heater1VIValues[4];\r\n      results.heater.heater1.leocam.voltage = heater1VIValues[5];\r\n      results.heater.heater1.leocam.current = heater1VIValues[6];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...heater1VIValues);\r\n      \r\n      // Read Heater 2 values\r\n      const heater2VIResults = await mccifRead(sock, heater2VI);\r\n      const heater2VIValues: string[] = heater2VIResults.map(safeParseValue);\r\n      \r\n      // Store Heater 2 values\r\n      results.heater.heater2.status = heater2VIValues[0];\r\n      results.heater.heater2.battery.voltage = heater2VIValues[1];\r\n      results.heater.heater2.battery.current = heater2VIValues[2];\r\n      results.heater.heater2.thruster.voltage = heater2VIValues[3];\r\n      results.heater.heater2.thruster.current = heater2VIValues[4];\r\n      results.heater.heater2.leocam.voltage = heater2VIValues[5];\r\n      results.heater.heater2.leocam.current = heater2VIValues[6];\r\n      \r\n      // Add to allResults\r\n      results.allResults.push(...heater2VIValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading LCL, HDRM, and Heater parameters:\", error);\r\n      \r\n      // Set default error values\r\n      const errorVals = Array(47).fill(\"error\");\r\n      results.allResults.push(...errorVals);\r\n    }\r\n\r\n    // Step 10: Heater testing if enabled (95-100%)\r\n    if (options.enableHeaters) {\r\n      onProgress('Testing Heaters', 95);\r\n      \r\n      try {\r\n        // Initialize heater test results\r\n        results.heater.heater1.test = {\r\n          lclOn: [],\r\n          batteryOn: [],\r\n          batteryOff: [],\r\n          thrusterOn: [],\r\n          thrusterOff: [],\r\n          leocamOn: [],\r\n          leocamOff: [],\r\n          lclOff: []\r\n        };\r\n        \r\n        results.heater.heater2.test = {\r\n          lclOn: [],\r\n          batteryOn: [],\r\n          batteryOff: [],\r\n          thrusterOn: [],\r\n          thrusterOff: [],\r\n          leocamOn: [],\r\n          leocamOff: [],\r\n          lclOff: []\r\n        };\r\n        \r\n        // Test Heater 1\r\n        // Turn on Heater 1 LCL\r\n        await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 18);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on LCL\r\n        const heater1LclOnResults = await mccifRead(sock, heater1VI);\r\n        const heater1LclOnValues = heater1LclOnResults.map(safeParseValue);\r\n        results.heater.heater1.test.lclOn = heater1LclOnValues;\r\n        results.allResults.push(...heater1LclOnValues);\r\n        \r\n        // Turn on Battery Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 1);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on Battery Heater\r\n        const heater1BattOnResults = await mccifRead(sock, heater1VI);\r\n        const heater1BattOnValues = heater1BattOnResults.map(safeParseValue);\r\n        results.heater.heater1.test.batteryOn = heater1BattOnValues;\r\n        results.allResults.push(...heater1BattOnValues);\r\n        \r\n        // Turn off Battery Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 1);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off Battery Heater\r\n        const heater1BattOffResults = await mccifRead(sock, heater1VI);\r\n        const heater1BattOffValues = heater1BattOffResults.map(safeParseValue);\r\n        results.heater.heater1.test.batteryOff = heater1BattOffValues;\r\n        results.allResults.push(...heater1BattOffValues);\r\n        \r\n        // Turn on Thruster Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 2);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on Thruster Heater\r\n        const heater1ThruOnResults = await mccifRead(sock, heater1VI);\r\n        const heater1ThruOnValues = heater1ThruOnResults.map(safeParseValue);\r\n        results.heater.heater1.test.thrusterOn = heater1ThruOnValues;\r\n        results.allResults.push(...heater1ThruOnValues);\r\n        \r\n        // Turn off Thruster Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 2);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off Thruster Heater\r\n        const heater1ThruOffResults = await mccifRead(sock, heater1VI);\r\n        const heater1ThruOffValues = heater1ThruOffResults.map(safeParseValue);\r\n        results.heater.heater1.test.thrusterOff = heater1ThruOffValues;\r\n        results.allResults.push(...heater1ThruOffValues);\r\n        \r\n        // Turn on LEOCAM Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 3);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on LEOCAM Heater\r\n        const heater1LeocamOnResults = await mccifRead(sock, heater1VI);\r\n        const heater1LeocamOnValues = heater1LeocamOnResults.map(safeParseValue);\r\n        results.heater.heater1.test.leocamOn = heater1LeocamOnValues;\r\n        results.allResults.push(...heater1LeocamOnValues);\r\n        \r\n        // Turn off LEOCAM Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 3);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off LEOCAM Heater\r\n        const heater1LeocamOffResults = await mccifRead(sock, heater1VI);\r\n        const heater1LeocamOffValues = heater1LeocamOffResults.map(safeParseValue);\r\n        results.heater.heater1.test.leocamOff = heater1LeocamOffValues;\r\n        results.allResults.push(...heater1LeocamOffValues);\r\n        \r\n        // Turn off Heater 1 LCL\r\n        await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 18);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off LCL\r\n        const heater1LclOffResults = await mccifRead(sock, heater1VI);\r\n        const heater1LclOffValues = heater1LclOffResults.map(safeParseValue);\r\n        results.heater.heater1.test.lclOff = heater1LclOffValues;\r\n        results.allResults.push(...heater1LclOffValues);\r\n        \r\n        // Test Heater 2\r\n        // Turn on Heater 2 LCL\r\n        await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 19);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on LCL\r\n        const heater2LclOnResults = await mccifRead(sock, heater2VI);\r\n        const heater2LclOnValues = heater2LclOnResults.map(safeParseValue);\r\n        results.heater.heater2.test.lclOn = heater2LclOnValues;\r\n        results.allResults.push(...heater2LclOnValues);\r\n        \r\n        // Turn on Battery Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 4);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on Battery Heater\r\n        const heater2BattOnResults = await mccifRead(sock, heater2VI);\r\n        const heater2BattOnValues = heater2BattOnResults.map(safeParseValue);\r\n        results.heater.heater2.test.batteryOn = heater2BattOnValues;\r\n        results.allResults.push(...heater2BattOnValues);\r\n        \r\n        // Turn off Battery Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 4);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off Battery Heater\r\n        const heater2BattOffResults = await mccifRead(sock, heater2VI);\r\n        const heater2BattOffValues = heater2BattOffResults.map(safeParseValue);\r\n        results.heater.heater2.test.batteryOff = heater2BattOffValues;\r\n        results.allResults.push(...heater2BattOffValues);\r\n        \r\n        // Turn on Thruster Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 5);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on Thruster Heater\r\n        const heater2ThruOnResults = await mccifRead(sock, heater2VI);\r\n        const heater2ThruOnValues = heater2ThruOnResults.map(safeParseValue);\r\n        results.heater.heater2.test.thrusterOn = heater2ThruOnValues;\r\n        results.allResults.push(...heater2ThruOnValues);\r\n        \r\n        // Turn off Thruster Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 5);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off Thruster Heater\r\n        const heater2ThruOffResults = await mccifRead(sock, heater2VI);\r\n        const heater2ThruOffValues = heater2ThruOffResults.map(safeParseValue);\r\n        results.heater.heater2.test.thrusterOff = heater2ThruOffValues;\r\n        results.allResults.push(...heater2ThruOffValues);\r\n        \r\n        // Turn on LEOCAM Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOn\", 6);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning on LEOCAM Heater\r\n        const heater2LeocamOnResults = await mccifRead(sock, heater2VI);\r\n        const heater2LeocamOnValues = heater2LeocamOnResults.map(safeParseValue);\r\n        results.heater.heater2.test.leocamOn = heater2LeocamOnValues;\r\n        results.allResults.push(...heater2LeocamOnValues);\r\n        \r\n        // Turn off LEOCAM Heater\r\n        await mccifSet(sock, \"OBC1_Ch_HeaterSwReqOff\", 6);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off LEOCAM Heater\r\n        const heater2LeocamOffResults = await mccifRead(sock, heater2VI);\r\n        const heater2LeocamOffValues = heater2LeocamOffResults.map(safeParseValue);\r\n        results.heater.heater2.test.leocamOff = heater2LeocamOffValues;\r\n        results.allResults.push(...heater2LeocamOffValues);\r\n        \r\n        // Turn off Heater 2 LCL\r\n        await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 19);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Read values after turning off LCL\r\n        const heater2LclOffResults = await mccifRead(sock, heater2VI);\r\n        const heater2LclOffValues = heater2LclOffResults.map(safeParseValue);\r\n        results.heater.heater2.test.lclOff = heater2LclOffValues;\r\n        results.allResults.push(...heater2LclOffValues);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing heaters:\", error);\r\n        \r\n        // Set default error values for heater tests - 2 heaters * 8 test states * 7 parameters = 112 values\r\n        const errorVals = Array(112).fill(\"0.000\");\r\n        results.allResults.push(...errorVals);\r\n      }\r\n    } else {\r\n      // Skip heater test but fill in dummy values\r\n      const dummyValues = Array(112).fill(\"0.000\");\r\n      results.allResults.push(...dummyValues);\r\n    }\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('HEPS Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during HEPS checkout:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5460, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/hepsReport.ts"],"sourcesContent":["// src/services/reports/hepsReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for HEPS checkout results\r\n * \r\n * @param results The HEPS test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateHEPSReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `HEPS_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"HEPS Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test Summary section\r\n        new Paragraph({\r\n          text: \"* Test Summary :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN                     : ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN                   : ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Battery 1 Voltage               : ${results.battery.voltage.result1}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Battery 2 Voltage               : ${results.battery.voltage.result2}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n            text: `Battery 3 Voltage               : ${results.battery.voltage.result3}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `OBN 1 Voltage                   : ${results.obn.obn1.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `OBN 2 Voltage                   : ${results.obn.obn2.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `AUX Voltage                     : ${results.obn.aux12v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `HDRM 12V Converter 1 Voltage    : ${results.converters.conv1.hdrm12v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `5V Converter 1 Voltage          : ${results.converters.conv1.conv5v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `12V Converter 1 Voltage         : ${results.converters.conv1.conv12v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `15V Converter Voltage           : ${results.converters.conv1.conv15v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `HDRM 12V Converter 2 Voltage    : ${results.converters.conv2.hdrm12v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `5V Converter 2 Voltage          : ${results.converters.conv2.conv5v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `12V Converter 2 Voltage         : ${results.converters.conv2.conv12v.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `OBC-1 Voltage                   : ${results.rlcl.obc1.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `OBC-2 Voltage                   : ${results.rlcl.obc2.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `S-Band Voltage                  : ${results.rlcl.sband.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `UHF Voltage                     : ${results.rlcl.uhf.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // HEPS-1 CAN Check Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* HEPS-1 CAN Check Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `Primary CAN : -- ${results.can.primary.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createPrimaryCanSection(results),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // OBC-2 CAN Check Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* OBC-2 CAN Check Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: `Secondary CAN : -- ${results.can.secondary.result}`,\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createSecondaryCanSection(results),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // Battery Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* Battery Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createBatterySection(results),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // Solar Array Summary section\r\n          new Paragraph({\r\n            text: \"* Solar Array Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createSolarArraySection(results),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // OBN Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* OBN Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createOBNSection(results),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // Battery Charging Regulator Summary section\r\n          new Paragraph({\r\n            text: \"* Battery Charging Regulator Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createBCRSection(results),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          \r\n          // PCB Temperature Summary section\r\n          new Paragraph({\r\n            text: \"* PCB Temperature Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createPCBSection(results),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // Converter Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* Converter Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createConverterSection(results),\r\n          \r\n          // Page break\r\n          new Paragraph({\r\n            text: \"\",\r\n            pageBreakBefore: true\r\n          }),\r\n          \r\n          // Load Summary section\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"* Load Summary :\",\r\n            heading: HeadingLevel.HEADING_2,\r\n            spacing: { after: 100 }\r\n          }),\r\n          new Paragraph({\r\n            text: \"--------------------------------------------------------------------\",\r\n            spacing: { after: 100 }\r\n          }),\r\n          ...createLoadSection(results),\r\n          \r\n          // If heater tests were enabled, add heater test results\r\n          ...(hasHeaterTestResults(results) ? [\r\n              // Page break before heater test results\r\n              new Paragraph({\r\n                text: \"\",\r\n                pageBreakBefore: true\r\n              }),\r\n              \r\n              // Heater 1 Test Summary section\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              }),\r\n              new Paragraph({\r\n                text: \"* Heater 1 Test Summary :\",\r\n                heading: HeadingLevel.HEADING_2,\r\n                spacing: { after: 100 }\r\n              }),\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              }),\r\n              ...createHeater1TestSection(results),\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              }),\r\n              \r\n              // Page break\r\n              new Paragraph({\r\n                text: \"\",\r\n                pageBreakBefore: true\r\n              }),\r\n              \r\n              // Heater 2 Test Summary section\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              }),\r\n              new Paragraph({\r\n                text: \"* Heater 2 Test Summary :\",\r\n                heading: HeadingLevel.HEADING_2,\r\n                spacing: { after: 100 }\r\n              }),\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              }),\r\n              ...createHeater2TestSection(results),\r\n              new Paragraph({\r\n                text: \"--------------------------------------------------------------------\",\r\n                spacing: { after: 100 }\r\n              })\r\n          ] : [])\r\n        ]\r\n      }]\r\n    });\r\n    \r\n    // Generate the document\r\n    const buffer = await Packer.toBuffer(doc);\r\n    \r\n    // Save the file\r\n    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n    saveAs(blob, filename);\r\n    \r\n    // Mark the report as generated\r\n    results.reportGenerated = true;\r\n    \r\n    return filename;\r\n  }\r\n  \r\n  /**\r\n   * Check if heater test results are present\r\n   */\r\n  function hasHeaterTestResults(results: any): boolean {\r\n    return results.heater &&\r\n           results.heater.heater1 &&\r\n           results.heater.heater1.test &&\r\n           results.heater.heater1.test.lclOn &&\r\n           results.heater.heater1.test.lclOn.length > 0;\r\n  }\r\n  \r\n  /**\r\n   * Helper function to create Primary CAN section\r\n   */\r\n  function createPrimaryCanSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.can && results.can.primary) {\r\n      const primary = results.can.primary;\r\n      \r\n      // Before test values\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Transmit before test            : ${formatString(primary.before.tx[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Transmit before test           : ${formatString(primary.before.tx[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Transmit before test           : ${formatString(primary.before.tx[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Transmit before test           : ${formatString(primary.before.tx[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Transmit before test           : ${formatString(primary.before.tx[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Acknowledgement before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Acknowledgement before test     : ${formatString(primary.before.ack[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Acknowledgement before test    : ${formatString(primary.before.ack[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Acknowledgement before test    : ${formatString(primary.before.ack[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Acknowledgement before test    : ${formatString(primary.before.ack[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Acknowledgement before test    : ${formatString(primary.before.ack[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Timeout before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Timeout before test             : ${formatString(primary.before.timeout[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Timeout before test            : ${formatString(primary.before.timeout[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Timeout before test            : ${formatString(primary.before.timeout[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Timeout before test            : ${formatString(primary.before.timeout[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Timeout before test            : ${formatString(primary.before.timeout[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Error before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Error before test               : ${formatString(primary.before.error[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Error before test              : ${formatString(primary.before.error[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Error before test              : ${formatString(primary.before.error[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Error before test              : ${formatString(primary.before.error[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Error before test              : ${formatString(primary.before.error[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Empty line and CAN config\r\n      paragraphs.push(new Paragraph({\r\n        text: ``,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `CAN Primary Secondary Config        : 0`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: ``,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // After test values\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Transmit after test             : ${formatString(primary.after.tx[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Transmit after test            : ${formatString(primary.after.tx[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Transmit after test            : ${formatString(primary.after.tx[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Transmit after test            : ${formatString(primary.after.tx[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Transmit after test            : ${formatString(primary.after.tx[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Acknowledgement after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Acknowledgement after test      : ${formatString(primary.after.ack[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Acknowledgement after test     : ${formatString(primary.after.ack[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Acknowledgement after test     : ${formatString(primary.after.ack[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Acknowledgement after test     : ${formatString(primary.after.ack[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Acknowledgement after test     : ${formatString(primary.after.ack[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Timeout after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Timeout after test              : ${formatString(primary.after.timeout[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Timeout after test             : ${formatString(primary.after.timeout[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Timeout after test             : ${formatString(primary.after.timeout[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Timeout after test             : ${formatString(primary.after.timeout[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Timeout after test             : ${formatString(primary.after.timeout[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Error after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Error after test                : ${formatString(primary.after.error[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Error after test               : ${formatString(primary.after.error[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Error after test               : ${formatString(primary.after.error[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Error after test               : ${formatString(primary.after.error[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Error after test               : ${formatString(primary.after.error[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  /**\r\n   * Helper function to create Secondary CAN section\r\n   */\r\n  function createSecondaryCanSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.can && results.can.secondary) {\r\n      const secondary = results.can.secondary;\r\n      \r\n      // Before test values\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Transmit before test            : ${formatString(secondary.before.tx[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Transmit before test           : ${formatString(secondary.before.tx[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Transmit before test           : ${formatString(secondary.before.tx[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Transmit before test           : ${formatString(secondary.before.tx[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Transmit before test           : ${formatString(secondary.before.tx[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Acknowledgement before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Acknowledgement before test     : ${formatString(secondary.before.ack[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Acknowledgement before test    : ${formatString(secondary.before.ack[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Acknowledgement before test    : ${formatString(secondary.before.ack[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Acknowledgement before test    : ${formatString(secondary.before.ack[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Acknowledgement before test    : ${formatString(secondary.before.ack[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Timeout before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Timeout before test             : ${formatString(secondary.before.timeout[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Timeout before test            : ${formatString(secondary.before.timeout[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Timeout before test            : ${formatString(secondary.before.timeout[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Timeout before test            : ${formatString(secondary.before.timeout[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Timeout before test            : ${formatString(secondary.before.timeout[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Error before test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Error before test               : ${formatString(secondary.before.error[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Error before test              : ${formatString(secondary.before.error[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Error before test              : ${formatString(secondary.before.error[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Error before test              : ${formatString(secondary.before.error[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Error before test              : ${formatString(secondary.before.error[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Empty line and CAN config\r\n      paragraphs.push(new Paragraph({\r\n        text: ``,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `CAN Primary Secondary Config        : 31`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: ``,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // After test values\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Transmit after test             : ${formatString(secondary.after.tx[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Transmit after test            : ${formatString(secondary.after.tx[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Transmit after test            : ${formatString(secondary.after.tx[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Transmit after test            : ${formatString(secondary.after.tx[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Transmit after test            : ${formatString(secondary.after.tx[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Acknowledgement after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Acknowledgement after test      : ${formatString(secondary.after.ack[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Acknowledgement after test     : ${formatString(secondary.after.ack[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Acknowledgement after test     : ${formatString(secondary.after.ack[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Acknowledgement after test     : ${formatString(secondary.after.ack[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Acknowledgement after test     : ${formatString(secondary.after.ack[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Timeout after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Timeout after test              : ${formatString(secondary.after.timeout[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Timeout after test             : ${formatString(secondary.after.timeout[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Timeout after test             : ${formatString(secondary.after.timeout[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Timeout after test             : ${formatString(secondary.after.timeout[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Timeout after test             : ${formatString(secondary.after.timeout[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // Error after test\r\n      paragraphs.push(new Paragraph({\r\n        text: `PCM Error after test                : ${formatString(secondary.after.error[0])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM1 Error after test               : ${formatString(secondary.after.error[1])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PSM2 Error after test               : ${formatString(secondary.after.error[2])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM1 Error after test               : ${formatString(secondary.after.error[3])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `PDM2 Error after test               : ${formatString(secondary.after.error[4])}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  /**\r\n   * Helper function to create Battery section\r\n   */\r\n  function createBatterySection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.battery) {\r\n      const battery = results.battery;\r\n      \r\n      // Battery voltage\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery 1 Voltage           : ${formatNumber(battery.voltage.bat1)} V    ${battery.voltage.result1}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery 2 Voltage           : ${formatNumber(battery.voltage.bat2)} V    ${battery.voltage.result2}`,\r\n        spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 3 Voltage           : ${formatNumber(battery.voltage.bat3)} V    ${battery.voltage.result3}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Battery current\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 1 Charging Current  : ${formatNumber(battery.current.bat1)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 2 Charging Current  : ${formatNumber(battery.current.bat2)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 3 Charging Current  : ${formatNumber(battery.current.bat3)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Battery temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 1 Temperature       : ${formatNumber(battery.temperature.bat1)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 2 Temperature       : ${formatNumber(battery.temperature.bat2)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery 3 Temperature       : ${formatNumber(battery.temperature.bat3)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create Solar Array section\r\n */\r\nfunction createSolarArraySection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.solarArray) {\r\n    const solarArray = results.solarArray;\r\n    \r\n    // Solar Array voltage\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 1 Voltage               : ${formatNumber(solarArray.voltage.sa1)} V`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 2 Voltage               : ${formatNumber(solarArray.voltage.sa2)} V`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 3 Voltage               : ${formatNumber(solarArray.voltage.sa3)} V`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Solar Array temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 1 Y- Temperature        : ${formatNumber(solarArray.temperature.sa1Yneg)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 2 Y- Temperature        : ${formatNumber(solarArray.temperature.sa2Yneg)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 3 Y- Temperature        : ${formatNumber(solarArray.temperature.sa3Yneg)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array Body Mount Temperature  : ${formatNumber(solarArray.temperature.bodyMount)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 1 Y+ Temperature        : ${formatNumber(solarArray.temperature.sa1Ypos)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 2 Y+ Temperature        : ${formatNumber(solarArray.temperature.sa2Ypos)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `Solar Array 3 Y+ Temperature        : ${formatNumber(solarArray.temperature.sa3Ypos)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // HDRM deploy status\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 1 Deploy Status                : ${formatNumber(solarArray.hdrmStatus.hdrm1)} V`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 2 Deploy Status                : ${formatNumber(solarArray.hdrmStatus.hdrm2)} V`,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create OBN section\r\n */\r\nfunction createOBNSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.obn) {\r\n    const obn = results.obn;\r\n    \r\n    // OBN 1\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBN 1 Voltage   : ${formatNumber(obn.obn1.voltage)} V    ${obn.obn1.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBN 1 Current   : ${formatNumber(obn.obn1.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // OBN 2\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBN 2 Voltage   : ${formatNumber(obn.obn2.voltage)} V    ${obn.obn2.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBN 2 Current   : ${formatNumber(obn.obn2.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // AUX 12V\r\n    paragraphs.push(new Paragraph({\r\n      text: `AUX 12V Voltage : ${formatNumber(obn.aux12v.voltage)} V    ${obn.aux12v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create BCR section\r\n */\r\nfunction createBCRSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.bcr) {\r\n    const bcr = results.bcr;\r\n    \r\n    // BCR Current\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 1 Current       : ${formatNumber(bcr.current.bcr1)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 2 Current       : ${formatNumber(bcr.current.bcr2)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 3 Current       : ${formatNumber(bcr.current.bcr3)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // BCR Temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 1 Temperature   : ${formatNumber(bcr.temperature.bcr1)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 2 Temperature   : ${formatNumber(bcr.temperature.bcr2)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `BCR 3 Temperature   : ${formatNumber(bcr.temperature.bcr3)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create PCB section\r\n */\r\nfunction createPCBSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.pcb && results.pcb.temperature) {\r\n    const pcb = results.pcb;\r\n    \r\n    // PCB Temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `PDM 1 Temperature   : ${formatNumber(pcb.temperature.pdm1)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `PDM 2 Temperature   : ${formatNumber(pcb.temperature.pdm2)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create Converter section\r\n */\r\nfunction createConverterSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.converters) {\r\n    const converters = results.converters;\r\n    \r\n    // Converter 1 Voltage\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 12V Converter 1 Voltage    : ${formatNumber(converters.conv1.hdrm12v.voltage)} V    ${converters.conv1.hdrm12v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `5 V Converter 1 Voltage         : ${formatNumber(converters.conv1.conv5v.voltage)} V    ${converters.conv1.conv5v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `12 V Converter 1 Voltage        : ${formatNumber(converters.conv1.conv12v.voltage)} V    ${converters.conv1.conv12v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `15 V Converter Voltage          : ${formatNumber(converters.conv1.conv15v.voltage)} V    ${converters.conv1.conv15v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Converter 2 Voltage\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 12V Converter 2 Voltage    : ${formatNumber(converters.conv2.hdrm12v.voltage)} V    ${converters.conv2.hdrm12v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `5 V Converter 2 Voltage         : ${formatNumber(converters.conv2.conv5v.voltage)} V    ${converters.conv2.conv5v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `12 V Converter 2 Voltage        : ${formatNumber(converters.conv2.conv12v.voltage)} V    ${converters.conv2.conv12v.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Converter 1 Temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 12V Converter 1 Temperature    : ${formatNumber(converters.conv1.temperature.hdrm12v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `5 V Converter 1 Temperature         : ${formatNumber(converters.conv1.temperature.conv5v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `12 V Converter 1 Temperature        : ${formatNumber(converters.conv1.temperature.conv12v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `15 V Converter Temperature          : ${formatNumber(converters.conv1.temperature.conv15v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Converter 2 Temperature\r\n    paragraphs.push(new Paragraph({\r\n      text: `HDRM 12V Converter 2 Temperature    : ${formatNumber(converters.conv2.temperature.hdrm12v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `5 V Converter 2 Temperature         : ${formatNumber(converters.conv2.temperature.conv5v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `12 V Converter 2 Temperature        : ${formatNumber(converters.conv2.temperature.conv12v)} deg C`,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create Load section\r\n */\r\nfunction createLoadSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.rlcl) {\r\n    const rlcl = results.rlcl;\r\n    \r\n    // OBC-1\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBC-1 Voltage   : ${formatNumber(rlcl.obc1.voltage)} V    ${rlcl.obc1.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBC-1 Current   : ${formatNumber(rlcl.obc1.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // OBC-2\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBC-2 Voltage   : ${formatNumber(rlcl.obc2.voltage)} V    ${rlcl.obc2.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `OBC-2 Current   : ${formatNumber(rlcl.obc2.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // S-Band\r\n    paragraphs.push(new Paragraph({\r\n      text: `SBand Voltage   : ${formatNumber(rlcl.sband.voltage)} V    ${rlcl.sband.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `SBand Current   : ${formatNumber(rlcl.sband.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // UHF\r\n    paragraphs.push(new Paragraph({\r\n      text: `UHF Voltage     : ${formatNumber(rlcl.uhf.voltage)} V    ${rlcl.uhf.result}`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    paragraphs.push(new Paragraph({\r\n      text: `UHF Current     : ${formatNumber(rlcl.uhf.current)} A`,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    // Empty line\r\n    paragraphs.push(new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }));\r\n  }\r\n  \r\n  // LCL, HDRM and other loads could be added here in a similar fashion\r\n  // but we'll skip them for brevity since they follow the same pattern\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create Heater 1 Test section\r\n */\r\nfunction createHeater1TestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.heater && results.heater.heater1 && results.heater.heater1.test) {\r\n    const test = results.heater.heater1.test;\r\n    \r\n    // LCL On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Heater 1 LCL On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.lclOn && test.lclOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.lclOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.lclOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.lclOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.lclOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.lclOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.lclOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.lclOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Battery HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.batteryOn && test.batteryOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.batteryOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.batteryOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.batteryOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.batteryOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.batteryOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.batteryOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.batteryOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Battery HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.batteryOff && test.batteryOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.batteryOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.batteryOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.batteryOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.batteryOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.batteryOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.batteryOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.batteryOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Thruster HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Thruster HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.thrusterOn && test.thrusterOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.thrusterOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.thrusterOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.thrusterOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.thrusterOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.thrusterOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.thrusterOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.thrusterOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Thruster HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Thruster HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.thrusterOff && test.thrusterOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.thrusterOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.thrusterOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.thrusterOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.thrusterOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.thrusterOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.thrusterOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.thrusterOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // LEOCAM HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `LEOCAM HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.leocamOn && test.leocamOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.leocamOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.leocamOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.leocamOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.leocamOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.leocamOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.leocamOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.leocamOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // LEOCAM HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `LEOCAM HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.leocamOff && test.leocamOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.leocamOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.leocamOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.leocamOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.leocamOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.leocamOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.leocamOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.leocamOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Heater 1 LCL Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Heater 1 LCL Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.lclOff && test.lclOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 1 Voltage        : ${formatNumber(test.lclOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Voltage     : ${formatNumber(test.lclOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT1 Current     : ${formatNumber(test.lclOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Voltage    : ${formatNumber(test.lclOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT1 Current    : ${formatNumber(test.lclOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Voltage      : ${formatNumber(test.lclOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT1 Current      : ${formatNumber(test.lclOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Helper function to create Heater 2 Test section\r\n */\r\nfunction createHeater2TestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.heater && results.heater.heater2 && results.heater.heater2.test) {\r\n    const test = results.heater.heater2.test;\r\n    \r\n    // LCL On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Heater 2 LCL On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.lclOn && test.lclOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.lclOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.lclOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.lclOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.lclOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.lclOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.lclOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.lclOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Battery HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.batteryOn && test.batteryOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.batteryOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.batteryOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.batteryOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.batteryOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.batteryOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.batteryOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.batteryOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Battery HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Battery HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.batteryOff && test.batteryOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.batteryOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.batteryOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.batteryOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.batteryOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.batteryOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.batteryOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.batteryOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Thruster HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Thruster HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.thrusterOn && test.thrusterOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.thrusterOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.thrusterOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.thrusterOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.thrusterOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.thrusterOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.thrusterOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.thrusterOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Thruster HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Thruster HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.thrusterOff && test.thrusterOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.thrusterOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.thrusterOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.thrusterOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.thrusterOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.thrusterOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.thrusterOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.thrusterOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // LEOCAM HT Switch On Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `LEOCAM HT Switch On Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.leocamOn && test.leocamOn.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.leocamOn[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.leocamOn[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.leocamOn[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.leocamOn[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.leocamOn[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.leocamOn[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.leocamOn[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // LEOCAM HT Switch Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `LEOCAM HT Switch Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.leocamOff && test.leocamOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.leocamOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.leocamOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.leocamOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.leocamOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.leocamOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.leocamOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.leocamOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    // Heater 2 LCL Off Record\r\n    paragraphs.push(new Paragraph({\r\n      text: `Heater 2 LCL Off Record: - `,\r\n      spacing: { after: 100 }\r\n    }));\r\n    \r\n    if (test.lclOff && test.lclOff.length >= 7) {\r\n      paragraphs.push(new Paragraph({\r\n        text: `Heater 2 Voltage        : ${formatNumber(test.lclOff[0])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Voltage     : ${formatNumber(test.lclOff[1])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Battery HT2 Current     : ${formatNumber(test.lclOff[2])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Voltage    : ${formatNumber(test.lclOff[3])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `Thruster HT2 Current    : ${formatNumber(test.lclOff[4])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Voltage      : ${formatNumber(test.lclOff[5])} V`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      paragraphs.push(new Paragraph({\r\n        text: `LEOCAM HT2 Current      : ${formatNumber(test.lclOff[6])} A`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Utility function to format string values\r\n */\r\nfunction formatString(value: string | undefined): string {\r\n  if (!value) return '';\r\n  return value;\r\n}\r\n\r\n/**\r\n * Utility function to format numeric values\r\n */\r\nfunction formatNumber(value: string | undefined): string {\r\n  if (!value) return '0.000';\r\n  \r\n  try {\r\n    const numValue = parseFloat(value);\r\n    return numValue.toFixed(3);\r\n  } catch {\r\n    return '0.000';\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}