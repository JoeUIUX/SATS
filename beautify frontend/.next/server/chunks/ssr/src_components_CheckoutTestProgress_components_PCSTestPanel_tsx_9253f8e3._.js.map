{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/PCSTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/PCSTestPanel.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same CSS\r\n\r\n// Import the PCS-specific functions\r\nimport { runPCSCheckout } from '@/services/checkout/pcsCheckout';\r\nimport { generatePCSReport } from '@/services/reports/pcsReport';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface PCSTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n}\r\n\r\n\r\n// Helper function to safely parse integers\r\nconst safeParseInt = (value: string): number => {\r\n    if (!value || value === 'undefined' || value === 'null') return 0;\r\n    const parsed = parseInt(value);\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  };\r\n  \r\n  // Helper function to safely calculate changes between values\r\n  const calculateChange = (before: string, after: string): string => {\r\n    const beforeVal = safeParseInt(before);\r\n    const afterVal = safeParseInt(after);\r\n    const difference = afterVal - beforeVal;\r\n    return difference.toString(); // Convert back to string for display\r\n  };\r\n\r\nexport const PCSTestPanel: React.FC<PCSTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Determine if SD Card test option is enabled\r\n  const enableSDTest = options.includes('SD Card');\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting PCS Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for common parameters\r\n              if (param.includes(\"FW_Ver\")) {\r\n                const version = param.includes(\"Major\") ? \"1\" : \r\n                               param.includes(\"Minor\") ? \"2\" : \"3\";\r\n                return `${param}=${version}`;\r\n              } else if (param.includes(\"PCS_V\")) {\r\n                // Voltage values in V for PCS\r\n                return `${param}=${12.0 + Math.random() * 0.5}`;\r\n              } else if (param.includes(\"PCS_I\")) {\r\n                // Current values in A for PCS\r\n                return `${param}=${0.2 + Math.random() * 0.1}`;\r\n              } else if (param.includes(\"Time\")) {\r\n                // Time values\r\n                return `${param}=${new Date().toISOString()}`;\r\n              } else if (param.includes(\"Uptime\")) {\r\n                return `${param}=${Math.floor(Math.random() * 10000)}`;\r\n              } else if (param.includes(\"PS_3V3\")) {\r\n                return `${param}=${Math.floor(Math.random() * 100)}`;\r\n              } else if (param.includes(\"PS_5\")) {\r\n                return `${param}=${Math.floor(Math.random() * 100)}`;\r\n              } else if (param.includes(\"SD_Write\")) {\r\n                return `${param}=${Math.floor(Math.random() * 10)}`;\r\n              } else if (param.includes(\"SD_Read\")) {\r\n                return `${param}=${Math.floor(Math.random() * 10)}`;\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n      }\r\n      \r\n      // Run the PCS checkout test with progress updates\r\n      const results = await runPCSCheckout(sock, enableSDTest, (step, percent) => {\r\n        setCurrentStep(step);\r\n        setProgress(percent);\r\n      });\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running PCS checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generatePCSReport(results);\r\n      alert(`PCS report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div \r\n        className={styles.card}\r\n        style={{\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n        }}\r\n      >\r\n        <div \r\n          className={styles.cardHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n              <path fillRule=\"evenodd\" d=\"M10 1.944A11.954 11.954 0 012.166 5C2.056 5.649 2 6.319 2 7c0 5.225 3.34 9.67 8 11.317C14.66 16.67 18 12.225 18 7c0-.682-.057-1.35-.166-2.001A11.954 11.954 0 0110 1.944zM11 14a1 1 0 11-2 0 1 1 0 012 0zm0-7a1 1 0 10-2 0v3a1 1 0 102 0V7z\" clipRule=\"evenodd\" />\r\n            </svg>\r\n            PCS Test Status\r\n          </h3>\r\n        </div>\r\n        \r\n        <div className={styles.cardContent}>\r\n          <div className={styles.progressContainer}>\r\n            <div className={styles.progressLabel}>\r\n              <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                {currentStep || 'Waiting to start test...'}\r\n              </span>\r\n              <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                {progress}%\r\n              </span>\r\n            </div>\r\n            <div \r\n              className={styles.progressBar}\r\n              style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n            >\r\n              <div \r\n                className={styles.progressBarFill}\r\n                style={{ \r\n                  width: `${progress}%`,\r\n                  background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Display the testing options */}\r\n          <div style={{ marginBottom: '20px' }}>\r\n            <h4 style={{ \r\n              fontSize: '14px', \r\n              marginBottom: '10px',\r\n              color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n            }}>\r\n              Selected Test Options:\r\n            </h4>\r\n            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n              {options.map((option, index) => (\r\n                <div key={index} style={{ \r\n                  padding: '6px 10px', \r\n                  backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                  borderRadius: '4px',\r\n                  fontSize: '13px',\r\n                  color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '6px'\r\n                }}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  {option}\r\n                </div>\r\n              ))}\r\n              {options.length === 0 && (\r\n                <div style={{ \r\n                  color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                  fontStyle: 'italic',\r\n                  fontSize: '13px'\r\n                }}>\r\n                  No specific options selected. Running with defaults.\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Connection Status */}\r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n              <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n              </svg>\r\n              Connection Mode\r\n            </div>\r\n            <span className={`${styles.statusBadge} ${\r\n              isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n            }`}>\r\n              {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n            </span>\r\n          </div>\r\n          \r\n          <div \r\n            className={styles.parameterBox}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div className={styles.parameterLabel}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                <path d=\"M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z\" />\r\n              </svg>\r\n              SD Card Testing\r\n            </div>\r\n            <span className={`${styles.statusBadge} ${\r\n              enableSDTest ? styles.colorCompleted : styles.colorWaiting\r\n            }`}>\r\n              {enableSDTest ? 'ENABLED' : 'DISABLED'}\r\n            </span>\r\n          </div>\r\n          \r\n          {/* Run/Re-run Test Button */}\r\n          <button \r\n            onClick={startTest} \r\n            className={styles.button}\r\n            disabled={isRunning}\r\n            style={{ \r\n              backgroundColor: isRunning ? '#9ca3af' :\r\n                hasRunTest ? '#4f46e5' : '#10b981',\r\n              color: 'white'\r\n            }}\r\n          >\r\n            {isRunning ? (\r\n              <>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                Running Test...\r\n              </>\r\n            ) : hasRunTest ? (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Re-run Test\r\n              </>\r\n            ) : (\r\n              <>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Run Test\r\n              </>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      {results && (\r\n        <div className=\"space-y-4 mt-4\">\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                  : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Firmware Information\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div \r\n                className={styles.infoCard}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div className={styles.infoIcon}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"#059669\" width=\"20\" height=\"20\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 00-1 1v1a1 1 0 002 0V3a1 1 0 00-1-1zM4 4h3a3 3 0 006 0h3a2 2 0 012 2v9a2 2 0 01-2 2H4a2 2 0 01-2-2V6a2 2 0 012-2zm2.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm2.45 4a2.5 2.5 0 10-4.9 0h4.9zM12 9a1 1 0 100 2h3a1 1 0 100-2h-3zm-1 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div className={styles.infoContent}>\r\n                  <div \r\n                    className={styles.infoLabel}\r\n                    style={{ color: isDarkMode ? \"#9ca3af\" : \"#6b7280\" }}\r\n                  >\r\n                    PCS Firmware Version\r\n                  </div>\r\n                  <div \r\n                    className={styles.infoValue}\r\n                    style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}\r\n                  >\r\n                    {results.firmware.major}.{results.firmware.minor}.{results.firmware.patch}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #1e3a8a, #1d4ed8)\" \r\n                  : \"linear-gradient(to right, #eff6ff, #dbeafe)\",\r\n                color: isDarkMode ? \"#dbeafe\" : \"#1d4ed8\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                Power Measurements\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Value</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Status</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS Voltage (On)</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{parseFloat(results.on.voltage).toFixed(3)} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      <span className={`${styles.statusBadge} ${\r\n                        results.on.pass ? styles.colorCompleted : styles.colorError\r\n                      }`}>\r\n                        {results.on.pass ? \"PASS\" : \"FAIL\"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS Current (On)</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{parseFloat(results.on.current).toFixed(3)} A</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}></td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS PS 3V3 I</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.ps3v3I} mA</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}></td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS PS 5V I</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.vi.ps5I} mA</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}></td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS Voltage (Off)</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{parseFloat(results.off.voltage).toFixed(3)} V</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>\r\n                      <span className={`${styles.statusBadge} ${\r\n                        results.off.pass ? styles.colorCompleted : styles.colorError\r\n                      }`}>\r\n                        {results.off.pass ? \"PASS\" : \"FAIL\"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Display the System status section */}\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader} \r\n              style={{ \r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #0e7490, #0ea5e9)\" \r\n                  : \"linear-gradient(to right, #e0f2fe, #bae6fd)\",\r\n                color: isDarkMode ? \"#bae6fd\" : \"#0369a1\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                System Status\r\n              </h3>\r\n              \r\n              {/* Add simulation badge */}\r\n              <SimulationBadge isSimulation={isForceSimulation} />\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <table \r\n                className={styles.table}\r\n                style={{\r\n                  color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                }}\r\n              >\r\n                <thead \r\n                  className={styles.tableHeader}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                    color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Parameter</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Initial Value</th>\r\n                    <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Final Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS Time</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.time}</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.time}</td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>PCS Uptime</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.uptime} sec</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.uptime} sec</td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Store Period</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.storePeriod} sec</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.storePeriod} sec</td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Uptime Session</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.uptimeSession} sec</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.uptimeSession} sec</td>\r\n                  </tr>\r\n                  \r\n                  <tr>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Reset Count</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.resetCount}</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.resetCount}</td>\r\n                  </tr>\r\n                  \r\n                  <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Reset Source</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.status.resetSource}</td>\r\n                    <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.statusAfterTest.resetSource}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            </div>\r\n          \r\n          {/* Display the SD Card test section only if the SD Card option was checked */}\r\n          {enableSDTest && (\r\n            <div \r\n              className={styles.card}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <div \r\n                className={styles.cardHeader} \r\n                style={{ \r\n                  background: isDarkMode \r\n                    ? \"linear-gradient(to right, #4c1d95, #6d28d9)\" \r\n                    : \"linear-gradient(to right, #f5f3ff, #ede9fe)\",\r\n                  color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\"\r\n                }}\r\n              >\r\n                <h3 className={styles.cardTitle}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                    <path d=\"M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z\" />\r\n                  </svg>\r\n                  SD Card Test Results\r\n                </h3>\r\n                \r\n                {/* Add simulation badge */}\r\n                <SimulationBadge isSimulation={isForceSimulation} />\r\n              </div>\r\n              \r\n              <div className={styles.cardContent}>\r\n                <div style={{ \r\n                  marginBottom: '16px',\r\n                  padding: '12px',\r\n                  borderRadius: '8px',\r\n                  backgroundColor: results.sdCard.pass ? \r\n                    (isDarkMode ? 'rgba(4, 120, 87, 0.2)' : '#ecfdf5') :\r\n                    (isDarkMode ? 'rgba(185, 28, 28, 0.2)' : '#fef2f2'),\r\n                  color: results.sdCard.pass ? \r\n                    (isDarkMode ? '#a7f3d0' : '#047857') : \r\n                    (isDarkMode ? '#fee2e2' : '#b91c1c'),\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '8px'\r\n                }}>\r\n                  {results.sdCard.pass ? (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  ) : (\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  )}\r\n                  SD Card Test: {results.sdCard.pass ? 'PASS' : 'FAIL'}\r\n                </div>\r\n               \r\n                <table \r\n                  className={styles.table}\r\n                  style={{\r\n                    color: isDarkMode ? \"#e5e7eb\" : \"inherit\"\r\n                  }}\r\n                >\r\n                  <thead \r\n                    className={styles.tableHeader}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                      color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n                    }}\r\n                  >\r\n                    <tr>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Counter</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Before Test</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>After Test</th>\r\n                      <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Change</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className={styles.tableBody}>\r\n                  <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Write Success</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.before.writeSuccess}</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.after.writeSuccess}</td>\r\n                      <td style={{ \r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                        color: safeParseInt(results.sdCard.after.writeSuccess) > safeParseInt(results.sdCard.before.writeSuccess) ? \r\n                          (isDarkMode ? \"#a7f3d0\" : \"#047857\") : \r\n                          (isDarkMode ? \"#fee2e2\" : \"#b91c1c\")\r\n                      }}>\r\n                        {calculateChange(results.sdCard.before.writeSuccess, results.sdCard.after.writeSuccess)}\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Read Success</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.before.readSuccess}</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.after.readSuccess}</td>\r\n                      <td style={{ \r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                        color: safeParseInt(results.sdCard.after.readSuccess) > safeParseInt(results.sdCard.before.readSuccess) ? \r\n                          (isDarkMode ? \"#a7f3d0\" : \"#047857\") : \r\n                          (isDarkMode ? \"#fee2e2\" : \"#b91c1c\")\r\n                      }}>\r\n                        {calculateChange(results.sdCard.before.readSuccess, results.sdCard.after.readSuccess)}\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Write Fail</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.before.writeFail}</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.after.writeFail}</td>\r\n                      <td style={{ \r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                        color: safeParseInt(results.sdCard.after.writeFail) === safeParseInt(results.sdCard.before.writeFail) ? \r\n                          (isDarkMode ? \"#a7f3d0\" : \"#047857\") : \r\n                          (isDarkMode ? \"#fee2e2\" : \"#b91c1c\")\r\n                      }}>\r\n                        {calculateChange(results.sdCard.before.writeFail, results.sdCard.after.writeFail)}\r\n                      </td>\r\n                    </tr>\r\n                    \r\n                    <tr className={styles.tableRowAlt} style={{ backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\" }}>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>Read Fail</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.before.readFail}</td>\r\n                      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}>{results.sdCard.after.readFail}</td>\r\n                      <td style={{ \r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                        color: safeParseInt(results.sdCard.after.readFail) === safeParseInt(results.sdCard.before.readFail) ? \r\n                          (isDarkMode ? \"#a7f3d0\" : \"#047857\") : \r\n                          (isDarkMode ? \"#fee2e2\" : \"#b91c1c\")\r\n                      }}>\r\n                        {calculateChange(results.sdCard.before.readFail, results.sdCard.after.readFail)}\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n            \r\n          <div>\r\n            <button \r\n              onClick={generateReport}\r\n              className={styles.reportButton}\r\n              style={{\r\n                backgroundColor: \"#10b981\",\r\n                color: \"white\"\r\n              }}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              Generate Report\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}