{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/CheckoutTestProgress.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/CheckoutTestProgress.tsx\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Button } from \"@/components/ui\";\r\nimport { OBC1TestPanel } from \"./components/OBC1TestPanel\";\r\nimport { OBC2TestPanel } from \"./components/OBC2TestPanel\";\r\nimport { SBandTestPanel } from \"./components/SBandTestPanel\";\r\nimport { UHFTestPanel } from \"./components/UHFTestPanel\";\r\nimport { HEPSTestPanel } from \"./components/HEPSTestPanel\";\r\nimport { ADCSTestPanel } from './components/ADCSTestPanel';\r\nimport { GPSTestPanel } from \"./components/GPSTestPanel\";\r\nimport { PropulsionTestPanel } from \"./components/PropulsionTestPanel\";\r\nimport { PCSTestPanel } from \"./components/PCSTestPanel\";\r\nimport { XBandTestPanel } from \"./components/XBandTestPanel\";\r\nimport { LEOCAMTestPanel } from \"./components/LEOCAMTestPanel\";\r\n\r\nimport styles from \"./CheckoutTestProgress.module.css\";\r\nimport { setSimulationMode } from '@/utils/mccUtils';\r\n\r\n// Updated interface to include checkedOptions\r\ninterface CheckoutItem {\r\n  id: string;\r\n  header: string;\r\n  options: string[];\r\n  checkedOptions?: Record<string, boolean>; // Optional to maintain backward compatibility\r\n}\r\n\r\ninterface TestResult {\r\n  component: string;\r\n  status: 'running' | 'completed' | 'error' | 'waiting';\r\n  results: any;\r\n  message?: string;\r\n}\r\n\r\ninterface CheckoutTestProgressProps {\r\n  droppedItems: CheckoutItem[];\r\n  onClose: () => void;\r\n  zIndex: number;\r\n  onMouseDown: () => void;\r\n  sock: any;\r\n}\r\n\r\nconst CheckoutTestProgress: React.FC<CheckoutTestProgressProps> = ({\r\n  droppedItems,\r\n  onClose,\r\n  zIndex,\r\n  onMouseDown,\r\n  sock\r\n}) => {\r\n  const [overallProgress, setOverallProgress] = useState<number>(0);\r\n  const [testResults, setTestResults] = useState<Record<string, TestResult>>({});\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isComplete, setIsComplete] = useState(false);\r\n  const [isSavingReport, setIsSavingReport] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<string>(\"\");\r\n  const [initialRunDone, setInitialRunDone] = useState(false);\r\n  const [currentlyRunningTest, setCurrentlyRunningTest] = useState<string | null>(null);\r\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\r\n  const [filteredDroppedItems, setFilteredDroppedItems] = useState<CheckoutItem[]>([]);\r\n  const [showScrollButtons, setShowScrollButtons] = useState(false);\r\n  const [selectedProfile, setSelectedProfile] = useState<string | null>(null);\r\n  \r\n  const tabsListRef = useRef<HTMLDivElement>(null);\r\n  // Use non-null assertion to ensure TypeScript knows this ref will be assigned\r\n  const nodeRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n  const runNextTestTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const [portalElement] = useState(() => {\r\n    const element = document.createElement(\"div\");\r\n    element.id = \"checkoutTestProgress-root\";\r\n    document.body.appendChild(element);\r\n    return element;\r\n  });\r\n\r\nuseEffect(() => {\r\n  // Try multiple sources for profile ID\r\n  const currentProfileId = \r\n    localStorage.getItem('currentProfileId') || \r\n    sessionStorage.getItem('currentProfileId');\r\n  \r\n  if (currentProfileId) {\r\n    console.log(\"Found profile ID:\", currentProfileId);\r\n    setSelectedProfile(currentProfileId);\r\n  } else {\r\n    console.warn(\"No profile ID found in storage\");\r\n  }\r\n}, []);\r\n\r\n  // Load the filtered items with checked options from localStorage\r\n  useEffect(() => {\r\n    const filteredItemsJson = localStorage.getItem('checkoutTestItems');\r\n    \r\n    if (filteredItemsJson) {\r\n      try {\r\n        const parsedItems = JSON.parse(filteredItemsJson);\r\n        \r\n        if (Array.isArray(parsedItems) && parsedItems.length > 0) {\r\n          console.log(\"📋 Using filtered items with checked options:\", parsedItems);\r\n          setFilteredDroppedItems(parsedItems);\r\n        } else {\r\n          console.log(\"⚠️ No valid filtered items found, using original dropped items\");\r\n          setFilteredDroppedItems(droppedItems);\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing filtered items:\", e);\r\n        setFilteredDroppedItems(droppedItems);\r\n      }\r\n    } else {\r\n      // If no filtered items in localStorage, use the original droppedItems\r\n      // but try to only include options that are checked\r\n      console.log(\"⚠️ No filtered items in localStorage, using original items\");\r\n      \r\n      // For backward compatibility - try to filter based on checkedOptions if available\r\n      const backwardCompatibleItems = droppedItems.map(item => {\r\n        if (item.checkedOptions) {\r\n          // Get the list of options that are checked\r\n          const checkedOptionsList = Object.entries(item.checkedOptions)\r\n            .filter(([_, isChecked]) => isChecked)\r\n            .map(([option]) => option);\r\n          \r\n          // Only include checked options if any exist, otherwise keep all options\r\n          return {\r\n            ...item,\r\n            options: checkedOptionsList.length > 0 ? checkedOptionsList : item.options\r\n          };\r\n        }\r\n        \r\n        return item;\r\n      });\r\n      \r\n      setFilteredDroppedItems(backwardCompatibleItems);\r\n    }\r\n  }, [droppedItems]);\r\n\r\n  // Also, let's add a small optimization to make the scroll buttons look better\r\n// and handle tab overflow more intelligently\r\n\r\n// Add these utility functions inside your component\r\nconst canScrollLeft = () => {\r\n  const tabsList = tabsListRef.current;\r\n  return tabsList ? tabsList.scrollLeft > 0 : false;\r\n};\r\n\r\nconst canScrollRight = () => {\r\n  const tabsList = tabsListRef.current;\r\n  return tabsList ? tabsList.scrollLeft + tabsList.clientWidth < tabsList.scrollWidth : false;\r\n};\r\n\r\nconst [canScrollStart, setCanScrollStart] = useState(false);\r\nconst [canScrollEnd, setCanScrollEnd] = useState(false);\r\n\r\n// Add this function to update scroll button states\r\nconst updateScrollButtonStates = () => {\r\n  setCanScrollStart(canScrollLeft());\r\n  setCanScrollEnd(canScrollRight());\r\n};\r\n\r\n  // Generate component map for easy lookups\r\n  const componentMap = filteredDroppedItems.reduce((acc, item) => {\r\n    acc[item.header] = item;\r\n    return acc;\r\n  }, {} as Record<string, CheckoutItem>);\r\n\r\n  // Set initial active tab to the first filtered item\r\n  useEffect(() => {\r\n    if (filteredDroppedItems.length > 0 && !activeTab) {\r\n      setActiveTab(filteredDroppedItems[0].header);\r\n    }\r\n  }, [filteredDroppedItems, activeTab]);\r\n\r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  // Update progress when test results change\r\n  useEffect(() => {\r\n    updateOverallProgress();\r\n  }, [testResults]);\r\n\r\n  // Run initial tests for all filtered components\r\nuseEffect(() => {\r\n  if (!initialRunDone && filteredDroppedItems.length > 0) {\r\n    console.log(\"Setting up initial tests for:\", filteredDroppedItems.map(item => item.header).join(\", \"));\r\n    \r\n    // Mark as done\r\n    setInitialRunDone(true);\r\n    \r\n    // Set up all filtered components with initial waiting status\r\n    const initialResults: Record<string, TestResult> = {};\r\n    filteredDroppedItems.forEach(item => {\r\n      initialResults[item.header] = {\r\n        component: item.header,\r\n        status: 'waiting',\r\n        results: null\r\n      };\r\n    });\r\n    \r\n    setTestResults(initialResults);\r\n    \r\n    // Explicitly start the first test\r\n    if (filteredDroppedItems.length > 0) {\r\n      const firstComponent = filteredDroppedItems[0];\r\n      console.log(\"Starting first test:\", firstComponent.header);\r\n      \r\n      // Start the first test\r\n      setCurrentlyRunningTest(firstComponent.header);\r\n      setTestResults(prev => ({\r\n        ...prev,\r\n        [firstComponent.header]: {\r\n          ...(prev[firstComponent.header] || { component: firstComponent.header, results: null }),\r\n          status: 'running'\r\n        }\r\n      }));\r\n      setActiveTab(firstComponent.header);\r\n    }\r\n  }\r\n}, [filteredDroppedItems, initialRunDone]);\r\n\r\n  // Update window size on mount\r\n  useEffect(() => {\r\n    // Calculate available screen space (80% of viewport)\r\n    const maxWidth = Math.min(1600, window.innerWidth * 0.8);\r\n    const maxHeight = Math.min(900, window.innerHeight * 0.8);\r\n    \r\n    setWindowSize({\r\n      width: maxWidth,\r\n      height: maxHeight\r\n    });\r\n    \r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      const maxWidth = Math.min(1600, window.innerWidth * 0.8);\r\n      const maxHeight = Math.min(900, window.innerHeight * 0.8);\r\n      \r\n      setWindowSize({\r\n        width: maxWidth,\r\n        height: maxHeight\r\n      });\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  // Calculate overall progress based on filtered items\r\n  const updateOverallProgress = () => {\r\n    if (filteredDroppedItems.length === 0) return;\r\n\r\n    const completedCount = Object.values(testResults).filter(\r\n      result => result.status === 'completed' || result.status === 'error'\r\n    ).length;\r\n    \r\n    const newProgress = Math.floor((completedCount / filteredDroppedItems.length) * 100);\r\n    setOverallProgress(newProgress);\r\n    \r\n    // Check if all tests are complete\r\n    if (completedCount === filteredDroppedItems.length) {\r\n      setIsComplete(true);\r\n      setCurrentlyRunningTest(null);\r\n    }\r\n  };\r\n\r\nconst updateTestResult = (component: string, result: Partial<TestResult>) => {\r\n  console.log(`Updating test result for ${component} with status: ${result.status}`);\r\n\r\n  setTestResults(prev => {\r\n    const updatedResults = {\r\n      ...prev,\r\n      [component]: {\r\n        ...(prev[component] || { component, status: 'waiting', results: null }),\r\n        ...result\r\n      }\r\n    };\r\n    \r\n    // If a test just completed, check if we should run the next one\r\n    if (result.status === 'completed' || result.status === 'error') {\r\n      console.log(`Test ${component} completed with status: ${result.status}`);\r\n      \r\n      // Clear the currently running test\r\n      if (currentlyRunningTest === component) {\r\n        console.log(`Clearing currentlyRunningTest: ${component}`);\r\n        \r\n        // Clear the current test immediately\r\n        setCurrentlyRunningTest(null);\r\n        \r\n        // Schedule the next test with a delay\r\n        if (runNextTestTimeoutRef.current) {\r\n          clearTimeout(runNextTestTimeoutRef.current);\r\n        }\r\n        \r\n        console.log(\"Scheduling next test to run in 1000ms\");\r\n        runNextTestTimeoutRef.current = setTimeout(() => {\r\n          console.log(\"Timeout expired, running next test\");\r\n          runNextTest(updatedResults);\r\n          runNextTestTimeoutRef.current = null;\r\n        }, 1000);\r\n      }\r\n    }\r\n    \r\n    return updatedResults;\r\n  });\r\n};\r\n\r\n  // Find and run the next pending test from filtered items\r\n// In CheckoutTestProgress.tsx\r\nconst runNextTest = (currentResults: Record<string, TestResult>) => {\r\n  // Clear any existing timeout to prevent multiple calls\r\n  if (runNextTestTimeoutRef.current) {\r\n    clearTimeout(runNextTestTimeoutRef.current);\r\n    runNextTestTimeoutRef.current = null;\r\n  }\r\n  \r\n  console.log(\"Attempting to run next test. Current running test:\", currentlyRunningTest);\r\n  \r\n  // Force a fresh check of the current running test (avoid stale closures)\r\n  let isTestRunning = false;\r\n  setCurrentlyRunningTest(current => {\r\n    isTestRunning = current !== null;\r\n    return current;\r\n  });\r\n  \r\n  // Don't try to run another test if one is already running\r\n  if (isTestRunning || currentlyRunningTest) {\r\n    console.log(\"Can't run next test - a test is already running:\", currentlyRunningTest);\r\n    return;\r\n  }\r\n  \r\n  // Find the next waiting component from filtered items\r\n  const nextComponent = filteredDroppedItems.find(item => \r\n    currentResults[item.header]?.status === 'waiting'\r\n  );\r\n  \r\n  if (nextComponent) {\r\n    console.log(\"Found next test to run:\", nextComponent.header);\r\n    \r\n    // Set as currently running\r\n    setCurrentlyRunningTest(nextComponent.header);\r\n    \r\n    // Mark it as running in the results\r\n    setTestResults(prev => ({\r\n      ...prev,\r\n      [nextComponent.header]: {\r\n        ...(prev[nextComponent.header] || { component: nextComponent.header, results: null }),\r\n        status: 'running'\r\n      }\r\n    }));\r\n    \r\n    // Automatically switch to the tab with the running test\r\n    setActiveTab(nextComponent.header);\r\n  } else {\r\n    console.log(\"No more tests to run.\");\r\n  }\r\n};\r\n  // Generate and save test report\r\n  const saveTestReport = async () => {\r\n    setIsSavingReport(true);\r\n    \r\n    try {\r\n      // Call report generation for each completed test\r\n      for (const item of filteredDroppedItems) {\r\n        const result = testResults[item.header];\r\n        if (result && result.status === 'completed') {\r\n          // Here you would call the appropriate report generator for each component\r\n          console.log(`Generating report for ${item.header}...`);\r\n          // For example: await generateOBC1Report(result.results);\r\n        }\r\n      }\r\n      \r\n      alert(\"Test reports have been generated and saved successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error generating report:\", error);\r\n      alert(\"Failed to generate test reports.\");\r\n    } finally {\r\n      setIsSavingReport(false);\r\n    }\r\n  };\r\n\r\n  // Run all tests again (reset and restart)\r\n  const runAllTests = () => {\r\n    // Reset all test results to waiting\r\n    const resetResults: Record<string, TestResult> = {};\r\n    filteredDroppedItems.forEach(item => {\r\n      resetResults[item.header] = {\r\n        component: item.header,\r\n        status: 'waiting',\r\n        results: null\r\n      };\r\n    });\r\n    \r\n    setTestResults(resetResults);\r\n    setIsComplete(false);\r\n    setCurrentlyRunningTest(null);\r\n    \r\n    // Start running tests\r\n    runNextTest(resetResults);\r\n  };\r\n\r\n  // Calculate test stage status for each filtered component\r\n  const getTestStatusSummary = () => {\r\n    return filteredDroppedItems.map(item => ({\r\n      component: item.header,\r\n      status: testResults[item.header]?.status || 'waiting',\r\n      isActive: currentlyRunningTest === item.header\r\n    }));\r\n  };\r\n\r\n  // When a tab has a OBC1/OBC2TestPanel that requires options, only pass the filtered options\r\n  const getComponentOptions = (header: string): string[] => {\r\n    const component = filteredDroppedItems.find(item => item.header === header);\r\n    return component?.options || [];\r\n  };\r\n  \r\n  // Safely reuse position from session storage or use defaults\r\n  const savedPosition = (() => {\r\n    try {\r\n      const saved = sessionStorage.getItem('checkoutTestPositionPosition');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        \r\n        // Validate the saved position - ensure it's within reasonable bounds\r\n        const viewportHeight = window.innerHeight;\r\n        const viewportWidth = window.innerWidth;\r\n        \r\n        return {\r\n          x: Math.min(Math.max(parsed.x, -400), viewportWidth - 450),\r\n          y: Math.min(Math.max(parsed.y, 0), viewportHeight - 100)\r\n        };\r\n      }\r\n      \r\n      // Default center position if no saved position\r\n      return {\r\n        x: Math.max(0, (window.innerWidth - windowSize.width) / 2), \r\n        y: Math.max(0, (window.innerHeight - windowSize.height) / 2)\r\n      };\r\n    } catch (e) {\r\n      // Default center position in case of error\r\n      return {\r\n        x: Math.max(0, (window.innerWidth - windowSize.width) / 2),\r\n        y: Math.max(0, (window.innerHeight - windowSize.height) / 2)\r\n      };\r\n    }\r\n  })();\r\n\r\n  const [position, setPosition] = useState(savedPosition);\r\n\r\n  // Save position to sessionStorage when it changes\r\n  useEffect(() => {\r\n    sessionStorage.setItem('checkoutTestPositionPosition', JSON.stringify(position));\r\n  }, [position]);\r\n\r\n  const getStatusClassName = (status: string): string => {\r\n    switch (status) {\r\n      case 'completed': return styles.colorCompleted;\r\n      case 'error': return styles.colorError;\r\n      case 'running': return `${styles.colorRunning} ${styles.pulseAnimation}`;\r\n      default: return styles.colorWaiting;\r\n    }\r\n  };\r\n\r\n// Near the beginning of your component\r\nuseEffect(() => {\r\n  // Check if we have real socket info saved\r\n  const socketInfo = localStorage.getItem('mccSocketInfo');\r\n  let shouldUseSimulation = true; // Default to simulation\r\n\r\n  if (socketInfo) {\r\n    try {\r\n      const parsed = JSON.parse(socketInfo);\r\n      if (parsed && parsed.isReal) {\r\n        console.log(\"📡 Using real socket based on stored configuration\");\r\n        shouldUseSimulation = false;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error parsing socket info:\", e);\r\n    }\r\n  }\r\n\r\n  // Set simulation mode based on availability of real connection\r\n  setSimulationMode(shouldUseSimulation);\r\n  console.log(`🔧 Setting simulation mode to: ${shouldUseSimulation}`);\r\n}, []);\r\n\r\nconst scrollTabs = (direction: 'left' | 'right') => {\r\n  const tabsList = tabsListRef.current;\r\n  if (!tabsList) return;\r\n\r\n  const scrollAmount = 200; // Adjust scroll amount as needed\r\n  const currentScroll = tabsList.scrollLeft;\r\n  \r\n  tabsList.scrollTo({\r\n    left: direction === 'left' ? currentScroll - scrollAmount : currentScroll + scrollAmount,\r\n    behavior: 'smooth'\r\n  });\r\n};\r\n\r\n// Add this useEffect to check if scrolling is needed\r\nuseEffect(() => {\r\n  const checkScrollable = () => {\r\n    const tabsList = tabsListRef.current;\r\n    if (!tabsList) return;\r\n    \r\n    // Show scroll buttons if content width exceeds container width\r\n    setShowScrollButtons(tabsList.scrollWidth > tabsList.clientWidth);\r\n  };\r\n  \r\n  // Run on initial render\r\n  checkScrollable();\r\n  \r\n  // Add resize listener\r\n  window.addEventListener('resize', checkScrollable);\r\n  \r\n  // Also check when droppedItems changes as it might affect tab width\r\n  setTimeout(checkScrollable, 100);\r\n  \r\n  return () => {\r\n    window.removeEventListener('resize', checkScrollable);\r\n  };\r\n}, [filteredDroppedItems, activeTab]);\r\n\r\nuseEffect(() => {\r\n  // Scroll to active tab when it changes\r\n  if (activeTab && tabsListRef.current) {\r\n    const tabsList = tabsListRef.current;\r\n    const activeTabElement = tabsList.querySelector(`button[class*=\"tabButtonActive\"]`);\r\n    \r\n    if (activeTabElement) {\r\n      // Calculate the position to scroll to\r\n      const tabRect = activeTabElement.getBoundingClientRect();\r\n      const containerRect = tabsList.getBoundingClientRect();\r\n      \r\n      // Check if the active tab is outside the visible area\r\n      const isTabVisible = (\r\n        tabRect.left >= containerRect.left &&\r\n        tabRect.right <= containerRect.right\r\n      );\r\n      \r\n      if (!isTabVisible) {\r\n        // Get the center position\r\n        const centerPosition = \r\n          tabRect.left + tabRect.width / 2 - \r\n          containerRect.left - \r\n          containerRect.width / 2;\r\n        \r\n        // Scroll to center the active tab\r\n        tabsList.scrollBy({\r\n          left: centerPosition,\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n    }\r\n  }\r\n}, [activeTab]);\r\n\r\nuseEffect(() => {\r\n  const tabsList = tabsListRef.current;\r\n  if (!tabsList) return;\r\n  \r\n  const handleScroll = () => {\r\n    updateScrollButtonStates();\r\n  };\r\n  \r\n  // Update scroll button states\r\n  updateScrollButtonStates();\r\n  \r\n  // Add scroll event listener\r\n  tabsList.addEventListener('scroll', handleScroll);\r\n  \r\n  return () => {\r\n    tabsList.removeEventListener('scroll', handleScroll);\r\n  };\r\n}, []);\r\n\r\n// Add this useEffect to ensure any pending timers are cleaned up\r\nuseEffect(() => {\r\n  return () => {\r\n    if (runNextTestTimeoutRef.current) {\r\n      clearTimeout(runNextTestTimeoutRef.current);\r\n    }\r\n  };\r\n}, []);\r\n\r\n\r\n  // Modified component to specifically pass only checked options to the test panels\r\n  return createPortal(\r\n    <Draggable\r\n      nodeRef={nodeRef}\r\n      handle=\".drag-handle\"\r\n      position={position}\r\n      onStop={(e, data) => {\r\n        setPosition({ x: data.x, y: data.y });\r\n      }}\r\n    >\r\n      <div ref={nodeRef} className={styles.checkoutWindow} style={{/* styles */}}>\r\n        {/* Header - Fixed */}\r\n        <div className={`${styles.windowHeader} drag-handle`}>\r\n          <h2 className={styles.windowTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={styles.titleIcon}>\r\n              <path d=\"M20 6v10a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z\"/>\r\n              <path d=\"m10 10 5 3-5 3v-6Z\"/>\r\n            </svg>\r\n            Satellite Checkout Test Control Centre\r\n          </h2>\r\n          \r\n          <button \r\n            className={styles.resetButton}\r\n            onClick={() => {\r\n              setPosition({\r\n                x: (window.innerWidth - windowSize.width) / 2,\r\n                y: (window.innerHeight - windowSize.height) / 2\r\n              });\r\n            }}\r\n          >\r\n            Reset Position\r\n          </button>\r\n          \r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onClose();\r\n            }}\r\n            className={styles.closeButton}\r\n          >\r\n            ✖\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content area with Test Panels */}\r\n        <div className={styles.contentArea}>\r\n{/* Test tabs */}\r\n{filteredDroppedItems.length > 0 ? (\r\n  <div className={styles.tabsContainer}>\r\n    <div className={styles.tabsList} ref={tabsListRef}>\r\n    {showScrollButtons && canScrollStart && (\r\n  <button \r\n    className={`${styles.scrollButton} ${styles.scrollButtonLeft}`}\r\n    onClick={() => scrollTabs('left')}\r\n    aria-label=\"Scroll tabs left\"\r\n  >\r\n    ←\r\n  </button>\r\n)}\r\n      \r\n      {filteredDroppedItems.map(item => (\r\n        <button\r\n          key={item.header} \r\n          onClick={() => setActiveTab(item.header)}\r\n          className={`${styles.tabButton} ${activeTab === item.header ? styles.tabButtonActive : ''}`}\r\n        >\r\n          {item.header}\r\n          {testResults[item.header]?.status === 'completed' && (\r\n            <span className={styles.tabIcon}>✓</span>\r\n          )}\r\n          {testResults[item.header]?.status === 'error' && (\r\n            <span className={styles.tabIcon}>✗</span>\r\n          )}\r\n          {testResults[item.header]?.status === 'running' && (\r\n            <span className={`${styles.tabIcon} ${styles.pulseAnimation}`}>⟳</span>\r\n          )}\r\n        </button>\r\n      ))}\r\n      \r\n      {showScrollButtons && canScrollEnd && (\r\n  <button \r\n    className={`${styles.scrollButton} ${styles.scrollButtonRight}`}\r\n    onClick={() => scrollTabs('right')}\r\n    aria-label=\"Scroll tabs right\"\r\n  >\r\n    →\r\n  </button>\r\n)}\r\n    </div>\r\n  </div>\r\n) : (\r\n  <div className=\"p-6 text-center\">\r\n    <p>No test items with checked options found. Please check at least one option in the Checkout Section and try again.</p>\r\n  </div>\r\n)}\r\n\r\n          {/* Test Content Grid Layout */}\r\n          {filteredDroppedItems.length > 0 && (\r\n            <div style={{ flex: 1, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', padding: '0 16px 16px 16px', overflow: 'hidden' }}>\r\n              {/* Left Panel - Active test component */}\r\n              <div style={{ overflow: 'auto', height: '100%', display: activeTab ? 'block' : 'none' }}>\r\n                {filteredDroppedItems.map(item => (\r\n                  <div \r\n                    key={item.header} \r\n                    style={{ \r\n                      display: activeTab === item.header ? 'block' : 'none',\r\n                      height: '100%',\r\n                      overflow: 'auto'\r\n                    }}\r\n                  >\r\n                    {/* Render the appropriate test panel based on component type */}\r\n                    {item.header === \"OBC-1\" && (\r\n                      <OBC1TestPanel\r\n                        options={getComponentOptions(item.header)} // Pass only the filtered/checked options\r\n                        sock={sock}\r\n                        onTestComplete={(results) => \r\n                          updateTestResult(item.header, { \r\n                            status: 'completed', \r\n                            results \r\n                          })\r\n                        }\r\n                        onTestError={(error: Error | string | unknown) => \r\n                          updateTestResult(item.header, { \r\n                            status: 'error', \r\n                            message: error instanceof Error ? error.message : String(error) \r\n                          })\r\n                        }\r\n                        onTestStart={() => \r\n                          updateTestResult(item.header, { \r\n                            status: 'running' \r\n                          })\r\n                        }\r\n                        isInitialRun={currentlyRunningTest === item.header}\r\n                        profileId={selectedProfile ?? undefined}\r\n                      />\r\n                    )}\r\n                    \r\n                    {item.header === \"OBC-2\" && (\r\n  <OBC2TestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"S-Band\" && (\r\n  <SBandTestPanel\r\n    options={getComponentOptions(item.header)} // Pass only the filtered/checked options\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"UHF\" && (\r\n  <UHFTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"LEOCAM\" && (\r\n  <LEOCAMTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"HEPS\" && (\r\n  <HEPSTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"ADCS\" && (\r\n  <ADCSTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"GPS\" && (\r\n  <GPSTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"Propulsion\" && (\r\n  <PropulsionTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"PCS\" && (\r\n  <PCSTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n{item.header === \"X-Band\" && (\r\n  <XBandTestPanel\r\n    options={getComponentOptions(item.header)}\r\n    sock={sock}\r\n    onTestComplete={(results) => \r\n      updateTestResult(item.header, { \r\n        status: 'completed', \r\n        results \r\n      })\r\n    }\r\n    onTestError={(error: Error | string | unknown) => \r\n      updateTestResult(item.header, { \r\n        status: 'error', \r\n        message: error instanceof Error ? error.message : String(error) \r\n      })\r\n    }\r\n    onTestStart={() => \r\n      updateTestResult(item.header, { \r\n        status: 'running' \r\n      })\r\n    }\r\n    isInitialRun={currentlyRunningTest === item.header}\r\n    profileId={selectedProfile ?? undefined}\r\n  />\r\n)}\r\n\r\n                    {/* Add implementations for other component types here */}\r\n                    {/* For now, show a placeholder for unimplemented components */}\r\n                    {![\"OBC-1\", \"OBC-2\", \"S-Band\",\"UHF\", \"LEOCAM\", \"HEPS\", \"ADCS\", \"GPS\", \"Propulsion\", \"PCS\", \"X-Band\"].includes(item.header) && (\r\n                      <div className=\"p-6\">\r\n                        <div style={{\r\n                          padding: '20px',\r\n                          borderRadius: '8px',\r\n                          backgroundColor: isDarkMode ? '#1e1e1e' : '#f9fafb',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                          marginBottom: '16px',\r\n                          textAlign: 'center'\r\n                        }}>\r\n                          <h3 style={{ marginBottom: '16px', color: isDarkMode ? '#d1d5db' : '#374151' }}>\r\n                            {item.header} Test Panel\r\n                          </h3>\r\n                          <p style={{ marginBottom: '16px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                            Testing options: {getComponentOptions(item.header).join(', ')}\r\n                          </p>\r\n                          <button \r\n                            className={styles.runAllButton}\r\n                            style={{\r\n                              backgroundColor: \"#3b82f6\",\r\n                              color: \"white\",\r\n                              margin: \"16px auto\"\r\n                            }}\r\n                            onClick={() => {\r\n                              // Update status to running\r\n                              updateTestResult(item.header, { status: 'running' });\r\n                              \r\n                              // Simulate a test run\r\n                              setTimeout(() => {\r\n                                updateTestResult(item.header, { \r\n                                  status: 'completed',\r\n                                  results: { \r\n                                    simulated: true,\r\n                                    testedOptions: getComponentOptions(item.header)\r\n                                  }\r\n                                });\r\n                              }, 2000);\r\n                            }}\r\n                          >\r\n                            {testResults[item.header]?.status === 'completed' || \r\n                             testResults[item.header]?.status === 'error' \r\n                              ? \"Re-run Test\" : \"Run Test\"}\r\n                          </button>\r\n                          \r\n                          {/* Show options available for this component */}\r\n                          {item.options.length > 0 && (\r\n                            <div style={{ \r\n                              marginTop: '24px', \r\n                              padding: '12px', \r\n                              backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                              borderRadius: '6px',\r\n                              textAlign: 'left'\r\n                            }}>\r\n                              <h4 style={{ \r\n                                fontSize: '14px', \r\n                                marginBottom: '8px',\r\n                                color: isDarkMode ? '#d1d5db' : '#4b5563' \r\n                              }}>\r\n                                Options to be tested:\r\n                              </h4>\r\n                              <ul style={{ \r\n                                listStyleType: 'disc', \r\n                                paddingLeft: '20px',\r\n                                color: isDarkMode ? '#9ca3af' : '#6b7280'\r\n                              }}>\r\n                                {getComponentOptions(item.header).map((option, index) => (\r\n                                  <li key={index}>{option}</li>\r\n                                ))}\r\n                              </ul>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        {/* Simulated test results for completed tests */}\r\n                        {testResults[item.header]?.status === 'completed' && (\r\n                          <div style={{\r\n                            padding: '20px',\r\n                            borderRadius: '8px',\r\n                            backgroundColor: isDarkMode ? '#1e1e1e' : '#f9fafb',\r\n                            border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                          }}>\r\n                            <h3 style={{ \r\n                              marginBottom: '16px', \r\n                              color: isDarkMode ? '#d1d5db' : '#374151',\r\n                              display: 'flex',\r\n                              alignItems: 'center',\r\n                              gap: '8px'\r\n                            }}>\r\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                              </svg>\r\n                              {item.header} Test Results\r\n                            </h3>\r\n                            \r\n                            <div style={{\r\n                              backgroundColor: isDarkMode ? '#0d1117' : '#f3f4f6',\r\n                              borderRadius: '6px',\r\n                              padding: '12px',\r\n                              fontFamily: 'monospace',\r\n                              fontSize: '14px',\r\n                              color: isDarkMode ? '#9ca3af' : '#374151'\r\n                            }}>\r\n                              <p>✅ All tests completed successfully</p>\r\n                              <p>⏱️ Test duration: 1.24s</p>\r\n                              <p>🔍 Tested options: {getComponentOptions(item.header).join(', ')}</p>\r\n                            </div>\r\n                            \r\n                            <button \r\n                              style={{\r\n                                marginTop: '16px',\r\n                                padding: '8px 16px',\r\n                                backgroundColor: '#10b981',\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '4px',\r\n                                cursor: 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '6px'\r\n                              }}\r\n                            >\r\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\r\n                              </svg>\r\n                              Generate Report\r\n                            </button>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              \r\n              {/* Right Panel - Test Status Overview */}\r\n              <div style={{ overflow: 'auto', height: '100%' }}>\r\n                {/* Overall Progress Card */}\r\n                <div className={styles.progressContainer}>\r\n                  <h3 className={styles.progressHeading}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.progressHeadingIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Test Progress\r\n                  </h3>\r\n\r\n                  <div className=\"flex justify-between items-center text-sm mb-2\">\r\n                    <span>{overallProgress}% Complete</span>\r\n                    <span className={`${styles.statusBadge} ${\r\n                      isComplete ? styles.colorCompleted : \r\n                      currentlyRunningTest ? styles.colorRunning : \r\n                      styles.colorWaiting\r\n                    }`}>\r\n                      {isComplete ? \"✅ All Tests Completed\" : \r\n                      currentlyRunningTest ? `⚙️ Running: ${currentlyRunningTest}` : \r\n                      \"⏳ Preparing Tests...\"}\r\n                    </span>\r\n                  </div>\r\n\r\n                  <div className={styles.progressBar}>\r\n                    <div \r\n                      className={styles.progressBarFill}\r\n                      style={{ \r\n                        width: `${overallProgress}%`,\r\n                        background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                      }}\r\n                    >\r\n                      {overallProgress}%\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Controls */}\r\n                  <div className=\"flex justify-end mt-4\">\r\n                    <button \r\n                      onClick={runAllTests}\r\n                      disabled={currentlyRunningTest !== null}\r\n                      className={styles.runAllButton}\r\n                      style={{\r\n                        backgroundColor: currentlyRunningTest === null ? \"#3b82f6\" : \"#9ca3af\",\r\n                        color: \"white\"\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles.runAllButtonIcon} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Run All Tests Again\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Test Status Grid */}\r\n                <div className={styles.progressContainer}>\r\n                  <h4 className=\"text-sm font-medium mb-2 flex items-center\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.progressHeadingIcon}>\r\n                      <path d=\"M9 2a1 1 0 000 2h2a1 1 0 100-2H9z\" />\r\n                      <path fillRule=\"evenodd\" d=\"M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Test Status Overview\r\n                  </h4>\r\n                  \r\n                  <div className={styles.statusGrid} style={{ gridTemplateColumns: 'repeat(auto-fill, minmax(140px, 1fr))' }}>\r\n                    {getTestStatusSummary().map((item) => (\r\n                      <div\r\n                        key={item.component}\r\n                        className={`${styles.statusCard} ${item.isActive ? styles.statusCardActive : ''} ${getStatusClassName(item.status)}`}\r\n                        onClick={() => setActiveTab(item.component)}\r\n                      >\r\n                        <div className={styles.statusCardTitle}>{item.component}</div>\r\n                        <div className={`${styles.statusBadge} ${getStatusClassName(item.status)}`}>\r\n                          {item.status === 'completed' && \"✓ Complete\"}\r\n                          {item.status === 'error' && \"✗ Error\"}\r\n                          {item.status === 'running' && \"⟳ Running\"}\r\n                          {item.status === 'waiting' && \"⏱ Waiting\"}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                  {/* Save Report Button */}\r\n                  <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: \"8px\" }}>\r\n                    <button\r\n                      onClick={saveTestReport}\r\n                      disabled={!isComplete || isSavingReport || filteredDroppedItems.length === 0}\r\n                      className={styles.runAllButton}\r\n                      style={{\r\n                        backgroundColor: !isComplete || isSavingReport || filteredDroppedItems.length === 0 \r\n                          ? \"#9ca3af\" : \"#10b981\",\r\n                        color: \"white\"\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" className={styles.runAllButtonIcon} viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {isSavingReport ? \"Saving...\" : \"Save Reports\"}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Component Options Summary */}\r\n                <div \r\n                  style={{ \r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    borderRadius: '8px',\r\n                    backgroundColor: isDarkMode ? '#1e1e1e' : '#ffffff',\r\n                    overflow: 'hidden',\r\n                    marginTop: '16px'\r\n                  }}\r\n                >\r\n                  <div style={{ \r\n                    padding: '12px 16px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    color: isDarkMode ? '#e5e7eb' : '#1f2937',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <h3>Selected Options Summary</h3>\r\n                  </div>\r\n                  \r\n                  <div style={{ padding: '16px' }}>\r\n                    {filteredDroppedItems.map(item => (\r\n                      <div \r\n                        key={item.header}\r\n                        style={{\r\n                          marginBottom: '12px',\r\n                          padding: '12px',\r\n                          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                          borderRadius: '8px',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}\r\n                      >\r\n                        <div style={{ \r\n                          fontSize: '14px', \r\n                          fontWeight: 'bold',\r\n                          marginBottom: '8px',\r\n                          color: isDarkMode ? '#e5e7eb' : '#374151'\r\n                        }}>\r\n                          {item.header}\r\n                        </div>\r\n                        {getComponentOptions(item.header).length > 0 ? (\r\n                          <div style={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                            {getComponentOptions(item.header).map((option, index) => (\r\n                              <div \r\n                                key={index}\r\n                                style={{\r\n                                  padding: '4px 8px',\r\n                                  backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                                  borderRadius: '4px',\r\n                                  display: 'inline-block',\r\n                                  margin: '0 4px 4px 0',\r\n                                  fontSize: '12px'\r\n                                }}\r\n                              >\r\n                                ✓ {option}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        ) : (\r\n                          <div style={{ color: isDarkMode ? '#9ca3af' : '#6b7280', fontStyle: 'italic', fontSize: '12px' }}>\r\n                            No options selected for this component\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Testing Log Output */}\r\n                <div style={{ \r\n                  border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                  borderRadius: '8px',\r\n                  backgroundColor: isDarkMode ? '#1e1e1e' : '#ffffff',\r\n                  overflow: 'hidden',\r\n                  marginTop: '16px'\r\n                }}>\r\n                  <div style={{ \r\n                    padding: '12px 16px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    color: isDarkMode ? '#e5e7eb' : '#1f2937',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <h3>Test Console Output</h3>\r\n                  </div>\r\n                  \r\n                  <div style={{ \r\n                    padding: '12px',\r\n                    maxHeight: '200px',\r\n                    overflowY: 'auto',\r\n                    fontFamily: 'monospace',\r\n                    fontSize: '12px',\r\n                    backgroundColor: isDarkMode ? '#0d1117' : '#f8fafc',\r\n                    color: isDarkMode ? '#d1d5db' : '#374151'\r\n                  }}>\r\n                    {currentlyRunningTest ? (\r\n                      <>\r\n                        <div style={{ color: '#3b82f6' }}>\r\n                          [INFO] {new Date().toLocaleTimeString()} - Starting test for {currentlyRunningTest}\r\n                        </div>\r\n                        <div style={{ color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n                          [DEBUG] {new Date().toLocaleTimeString()} - Initializing test environment\r\n                        </div>\r\n                        <div style={{ color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n                          [DEBUG] {new Date().toLocaleTimeString()} - Testing options: {getComponentOptions(currentlyRunningTest).join(', ')}\r\n                        </div>\r\n                        <div className={styles.pulseAnimation} style={{ color: '#10b981' }}>\r\n                          [INFO] {new Date().toLocaleTimeString()} - Running test procedures...\r\n                        </div>\r\n                      </>\r\n                    ) : isComplete ? (\r\n                      <div style={{ color: '#10b981' }}>\r\n                        [SUCCESS] {new Date().toLocaleTimeString()} - All tests completed successfully!\r\n                      </div>\r\n                    ) : (\r\n                      filteredDroppedItems.length === 0 ? (\r\n                        <div style={{ color: isDarkMode ? '#9ca3af' : '#6b7280', fontStyle: 'italic' }}>\r\n                          No test items with checked options found. Please check options in the Checkout Section.\r\n                        </div>\r\n                      ) : (\r\n                        <div style={{ color: isDarkMode ? '#9ca3af' : '#6b7280', fontStyle: 'italic' }}>\r\n                          Ready to start tests. Click \"Run All Tests Again\" to begin.\r\n                        </div>\r\n                      )\r\n                    )}\r\n                    \r\n                    {/* Display completed test logs */}\r\n                    {Object.entries(testResults)\r\n                      .filter(([_, result]) => result.status === 'completed' || result.status === 'error')\r\n                      .map(([component, result]) => {\r\n                        const options = getComponentOptions(component);\r\n                        return (\r\n                          <div key={component} style={{ \r\n                            color: result.status === 'completed' ? '#10b981' : '#ef4444',\r\n                            marginTop: '4px'\r\n                          }}>\r\n                            [{result.status === 'completed' ? 'SUCCESS' : 'ERROR'}] {new Date().toLocaleTimeString()} - \r\n                            {result.status === 'completed' \r\n                              ? ` ${component} test completed successfully, options: ${options.join(', ')}` \r\n                              : ` ${component} test failed: ${result.message || 'unknown error'}`}\r\n                          </div>\r\n                        );\r\n                      })\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Draggable>,\r\n    portalElement\r\n  );\r\n};\r\n\r\nexport default CheckoutTestProgress;\r\n                "],"names":[],"mappings":"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","debugId":null}}]
}