{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc1Checkout.ts"],"sourcesContent":["// src/services/checkout/obc1Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\nimport { mccifReadWithFlag, isUsingSimulation } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the OBC-1 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param enableEmmc Whether to test the eMMC functionality\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC1Checkout(\r\n  sock: any, \r\n  enableEmmc: boolean,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      kernel: { \r\n        uptime: '', \r\n        loads: { oneMinute: '', fiveMinute: '', fifteenMinute: '' },\r\n        memory: { \r\n          totalRam: '', freeRam: '', sharedRam: '', bufferRam: '', \r\n          totalSwap: '', freeSwap: '', memUnit: '', totalHigh: '', freeHigh: '' \r\n        },\r\n        processes: ''\r\n      },\r\n      fpga: { \r\n        voltages: { \r\n          vccPspll: '', vccPsbatt: '', vccint: '', vccbram: '', vccaux: '' \r\n          // Add others as needed\r\n        },\r\n        temperatures: { psTemp: '', remoteTemp: '', plTemp: '' }\r\n      },\r\n      vi: {\r\n        d3v3: { value: '', pass: false },\r\n        ps3v3Obc2: { value: '', pass: false },\r\n        ps5vObc2: { value: '', pass: false },\r\n        ps5vObc2I: '',\r\n        ps3v3Obc2I: ''\r\n      },\r\n      temperatures: {\r\n        thruster1: '',\r\n        thruster2: '',\r\n        leocam: ['', '', '', ''] \r\n      },\r\n      emmc: {\r\n        emmc0States: [] as string[],  // Define explicit type as string array\r\n        emmc1States: [] as string[]   // Define explicit type as string array\r\n      },\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading Firmware Version', 5);\r\n    const fwVars = [\"OBC1_FW_Ver_Major\", \"OBC1_FW_Ver_Minor\", \"OBC1_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 2: Read kernel info (20%)\r\n    onProgress('Reading Kernel Information', 20);\r\n    const kernelVars = [\r\n      \"OBC1_Sys_uptime\", \"OBC1_Sys_loads_1m\", \"OBC1_Sys_loads_5m\", \"OBC1_Sys_loads_15m\",\r\n      \"OBC1_Sys_totalram\", \"OBC1_Sys_freeram\", \"OBC1_Sys_sharedram\", \"OBC1_Sys_bufferram\",\r\n      \"OBC1_Sys_totalswap\", \"OBC1_Sys_freeswap\", \"OBC1_Sys_procs\", \"OBC1_Sys_pad\",\r\n      \"OBC1_Sys_totalhigh\", \"OBC1_Sys_freehigh\", \"OBC1_Sys_mem_unit\"\r\n    ];\r\n    \r\n    try {\r\n      const kernelResults = await mccifRead(sock, kernelVars);\r\n      results.kernel.uptime = safeParseValue(kernelResults[0]);\r\n      results.kernel.loads.oneMinute = safeParseValue(kernelResults[1]);\r\n      results.kernel.loads.fiveMinute = safeParseValue(kernelResults[2]);\r\n      results.kernel.loads.fifteenMinute = safeParseValue(kernelResults[3]);\r\n      results.kernel.memory.totalRam = safeParseValue(kernelResults[4]);\r\n      results.kernel.memory.freeRam = safeParseValue(kernelResults[5]);\r\n      results.kernel.memory.sharedRam = safeParseValue(kernelResults[6]);\r\n      results.kernel.memory.bufferRam = safeParseValue(kernelResults[7]);\r\n      results.kernel.memory.totalSwap = safeParseValue(kernelResults[8]);\r\n      results.kernel.memory.freeSwap = safeParseValue(kernelResults[9]);\r\n      results.kernel.processes = safeParseValue(kernelResults[10]);\r\n      // Skip pad\r\n      results.kernel.memory.totalHigh = safeParseValue(kernelResults[12]);\r\n      results.kernel.memory.freeHigh = safeParseValue(kernelResults[13]);\r\n      results.kernel.memory.memUnit = safeParseValue(kernelResults[14]);\r\n    } catch (error) {\r\n      console.error(\"Error reading kernel info:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read FPGA values (40%)\r\n    onProgress('Reading FPGA Values', 40);\r\n    const fpgaVars = [\r\n      \"OBC1_vcc_pspll\", \"OBC1_vcc_psbatt\", \"OBC1_vccint\", \"OBC1_vccbram\", \"OBC1_vccaux\",\r\n      \"OBC1_vcc_psddr_pll\", \"OBC1_vccpsintfp_ddr\", \"OBC1_vccint1\", \"OBC1_vccaux1\", \"OBC1_vccvrefp\",\r\n      \"OBC1_vccvrefn\", \"OBC1_vccbram1\", \"OBC1_vccplintlp\", \"OBC1_vccplintfp\", \"OBC1_vccplaux\",\r\n      \"OBC1_vccams\", \"OBC1_vccpsintlp\", \"OBC1_vccpsintfp\", \"OBC1_vccpsaux\", \"OBC1_vccpsddr\",\r\n      \"OBC1_vccpsio3\", \"OBC1_vccpsio0\", \"OBC1_vccpsio1\", \"OBC1_vccpsio2\", \"OBC1_psmgtravcc\",\r\n      \"OBC1_psmgtravtt\", \"OBC1_vccams1\", \"OBC1_ps_temp\", \"OBC1_remote_temp\", \"OBC1_pl_temp\"\r\n    ];\r\n    \r\n    try {\r\n      const fpgaResults = await mccifRead(sock, fpgaVars);\r\n      \r\n      // First 27 are voltages, last 3 are temperatures\r\n      results.fpga.voltages.vccPspll = safeParseValue(fpgaResults[0]);\r\n      results.fpga.voltages.vccPsbatt = safeParseValue(fpgaResults[1]);\r\n      results.fpga.voltages.vccint = safeParseValue(fpgaResults[2]);\r\n      results.fpga.voltages.vccbram = safeParseValue(fpgaResults[3]);\r\n      results.fpga.voltages.vccaux = safeParseValue(fpgaResults[4]);\r\n      // ... Set other voltages\r\n\r\n      results.fpga.temperatures.psTemp = safeParseValue(fpgaResults[27]);\r\n      results.fpga.temperatures.remoteTemp = safeParseValue(fpgaResults[28]);\r\n      results.fpga.temperatures.plTemp = safeParseValue(fpgaResults[29]);\r\n    } catch (error) {\r\n      console.error(\"Error reading FPGA values:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 4: Read voltage and current (60%)\r\n    onProgress('Reading Voltage and Current', 60);\r\n    const viVars = [\r\n      \"OBC1_3V3_D\", \"OBC1_PS_3V3_OBC2_V\", \"OBC1_PS_5V_OBC2_V\", \r\n      \"OBC1_PS_5V_OBC2_I\", \"OBC1_PS_3V3_OBC2_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      \r\n      const d3v3Value = safeParseValue(viResults[0]);\r\n      const ps3v3Obc2Value = safeParseValue(viResults[1]);\r\n      const ps5vObc2Value = safeParseValue(viResults[2]);\r\n      \r\n      results.vi.d3v3 = { \r\n        value: d3v3Value, \r\n        pass: checkVoltage(d3v3Value, true) \r\n      };\r\n      results.vi.ps3v3Obc2 = { \r\n        value: ps3v3Obc2Value, \r\n        pass: checkVoltage(ps3v3Obc2Value, true) \r\n      };\r\n      results.vi.ps5vObc2 = { \r\n        value: ps5vObc2Value, \r\n        pass: checkVoltage(ps5vObc2Value, false) \r\n      };\r\n      results.vi.ps5vObc2I = safeParseValue(viResults[3]);\r\n      results.vi.ps3v3Obc2I = safeParseValue(viResults[4]);\r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 5: Read temperature sensors (80%)\r\n    onProgress('Reading Temperature Sensors', 80);\r\n    const tempVars = [\r\n      \"OBC1_thruster_ch1_T\", \"OBC1_thruster_ch2_T\", \r\n      \"OBC1_leocam_ch1_T\", \"OBC1_leocam_ch2_T\",\r\n      \"OBC1_leocam_ch3_T\", \"OBC1_leocam_ch4_T\"\r\n    ];\r\n    \r\n    try {\r\n      const tempResults = await mccifRead(sock, tempVars);\r\n      \r\n      results.temperatures.thruster1 = safeParseValue(tempResults[0]);\r\n      results.temperatures.thruster2 = safeParseValue(tempResults[1]);\r\n      results.temperatures.leocam[0] = safeParseValue(tempResults[2]);\r\n      results.temperatures.leocam[1] = safeParseValue(tempResults[3]);\r\n      results.temperatures.leocam[2] = safeParseValue(tempResults[4]);\r\n      results.temperatures.leocam[3] = safeParseValue(tempResults[5]);\r\n    } catch (error) {\r\n      console.error(\"Error reading temperature sensors:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n// Step 6: EMMC test if enabled (90-100%)\r\nif (enableEmmc) {\r\n  onProgress('Testing eMMC', 90);\r\n  \r\n  const emmcVars = [\"OBC1_Q8_eMMC0_state\", \"OBC1_Q8_eMMC1_state\"];\r\n  \r\n  try {\r\n    // Initial check\r\n    const emmcResult1 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult1[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult1[1]));\r\n    \r\n    // Modified command format: OBC1_Emmc_Control needs 8 or fewer tokens\r\n    // Test eMMC0 - Use single digit values instead of multi-digit\r\n    // Change from value=1 to value=1 (same in this case but follow the pattern)\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 1);\r\n    const emmcResult2 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult2[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult2[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 3);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 5);\r\n    const emmcResult3 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult3[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult3[1]));\r\n    \r\n    // Test eMMC1\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 2);\r\n    const emmcResult4 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult4[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult4[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 4);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 6);\r\n    const emmcResult5 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult5[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult5[1]));\r\n  } catch (error) {\r\n    console.error(\"Error during eMMC test:\", error);\r\n    // Fill with N/A values if the test fails\r\n    results.emmc.emmc0States = Array(6).fill('N.A.');\r\n    results.emmc.emmc1States = Array(6).fill('N.A.');\r\n  }\r\n} else {\r\n  // If eMMC test is disabled, set empty results\r\n  results.emmc.emmc0States = Array(6).fill('N.A.');\r\n  results.emmc.emmc1States = Array(6).fill('N.A.');\r\n}\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-1 checkout:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if voltage is within acceptable range\r\n * \r\n * @param value Voltage value as a string (in mV)\r\n * @param isThreeVolt Whether this is a 3.3V check (true) or 5V check (false)\r\n * @returns True if the voltage is within acceptable range\r\n */\r\nfunction checkVoltage(value: string, isThreeVolt: boolean): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return false;\r\n  }\r\n  \r\n  if (isThreeVolt) {\r\n    // 3.3V check (typically 3000-3600 mV)\r\n    return numValue >= 3000 && numValue <= 3600;\r\n  } else {\r\n    // 5V check (typically 4750-5250 mV)\r\n    return numValue >= 4750 && numValue <= 5250;\r\n  }\r\n}\r\n\r\n/**\r\n * Run the OBC-1 checkout test suite with enhanced simulation detection\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param enableEmmc Whether to test the eMMC functionality\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results with a simulation flag\r\n */\r\nexport async function runOBC1CheckoutWithDetection(\r\n  sock: any, \r\n  enableEmmc: boolean,\r\n  onProgress: (step: string, percent: number) => void = () => {}\r\n): Promise<{ results: any, usedSimulation: boolean }> {\r\n  let usedSimulation = false;\r\n  \r\n  try {\r\n    // Initial check for simulation\r\n    usedSimulation = isUsingSimulation(sock);\r\n    console.log(`Initial simulation check: ${usedSimulation ? \"SIMULATION\" : \"REAL\"} mode`);\r\n    \r\n    // Initialize the results object\r\n    const results = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      kernel: { \r\n        uptime: '', \r\n        loads: { oneMinute: '', fiveMinute: '', fifteenMinute: '' },\r\n        memory: { \r\n          totalRam: '', freeRam: '', sharedRam: '', bufferRam: '', \r\n          totalSwap: '', freeSwap: '', memUnit: '', totalHigh: '', freeHigh: '' \r\n        },\r\n        processes: ''\r\n      },\r\n      fpga: { \r\n        voltages: { \r\n          vccPspll: '', vccPsbatt: '', vccint: '', vccbram: '', vccaux: '' \r\n          // Add others as needed\r\n        },\r\n        temperatures: { psTemp: '', remoteTemp: '', plTemp: '' }\r\n      },\r\n      vi: {\r\n        d3v3: { value: '', pass: false },\r\n        ps3v3Obc2: { value: '', pass: false },\r\n        ps5vObc2: { value: '', pass: false },\r\n        ps5vObc2I: '',\r\n        ps3v3Obc2I: ''\r\n      },\r\n      temperatures: {\r\n        thruster1: '',\r\n        thruster2: '',\r\n        leocam: ['', '', '', ''] \r\n      },\r\n      emmc: {\r\n        emmc0States: [] as string[],\r\n        emmc1States: [] as string[]\r\n      },\r\n      reportGenerated: false,\r\n      // Add a simulation flag to track if any part used simulation\r\n      _simulationUsed: usedSimulation\r\n    };\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading Firmware Version', 5);\r\n    const fwVars = [\"OBC1_FW_Ver_Major\", \"OBC1_FW_Ver_Minor\", \"OBC1_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      // Use enhanced read function that detects simulation\r\n      const { results: fwResults, usedSimulation: fwSimulation } = await mccifReadWithFlag(sock, fwVars);\r\n      \r\n      // Update overall simulation flag if this step used simulation\r\n      usedSimulation = usedSimulation || fwSimulation;\r\n      \r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n      \r\n      // Special check for default simulation values\r\n      if (results.firmware.major === '1' && \r\n          results.firmware.minor === '2' && \r\n          results.firmware.patch === '3') {\r\n        console.log(\"🔍 Detected default simulation values in firmware version\");\r\n        usedSimulation = true;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      // Mark as simulation since we're using hardcoded values\r\n      usedSimulation = true;\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 2: Read kernel info (20%)\r\n    onProgress('Reading Kernel Information', 20);\r\n    const kernelVars = [\r\n      \"OBC1_Sys_uptime\", \"OBC1_Sys_loads_1m\", \"OBC1_Sys_loads_5m\", \"OBC1_Sys_loads_15m\",\r\n      \"OBC1_Sys_totalram\", \"OBC1_Sys_freeram\", \"OBC1_Sys_sharedram\", \"OBC1_Sys_bufferram\",\r\n      \"OBC1_Sys_totalswap\", \"OBC1_Sys_freeswap\", \"OBC1_Sys_procs\", \"OBC1_Sys_pad\",\r\n      \"OBC1_Sys_totalhigh\", \"OBC1_Sys_freehigh\", \"OBC1_Sys_mem_unit\"\r\n    ];\r\n    \r\n    try {\r\n      // Use enhanced read function\r\n      const { results: kernelResults, usedSimulation: kernelSimulation } = await mccifReadWithFlag(sock, kernelVars);\r\n      \r\n      // Update overall simulation flag\r\n      usedSimulation = usedSimulation || kernelSimulation;\r\n      \r\n      results.kernel.uptime = safeParseValue(kernelResults[0]);\r\n      results.kernel.loads.oneMinute = safeParseValue(kernelResults[1]);\r\n      results.kernel.loads.fiveMinute = safeParseValue(kernelResults[2]);\r\n      results.kernel.loads.fifteenMinute = safeParseValue(kernelResults[3]);\r\n      results.kernel.memory.totalRam = safeParseValue(kernelResults[4]);\r\n      results.kernel.memory.freeRam = safeParseValue(kernelResults[5]);\r\n      results.kernel.memory.sharedRam = safeParseValue(kernelResults[6]);\r\n      results.kernel.memory.bufferRam = safeParseValue(kernelResults[7]);\r\n      results.kernel.memory.totalSwap = safeParseValue(kernelResults[8]);\r\n      results.kernel.memory.freeSwap = safeParseValue(kernelResults[9]);\r\n      results.kernel.processes = safeParseValue(kernelResults[10]);\r\n      // Skip pad\r\n      results.kernel.memory.totalHigh = safeParseValue(kernelResults[12]);\r\n      results.kernel.memory.freeHigh = safeParseValue(kernelResults[13]);\r\n      results.kernel.memory.memUnit = safeParseValue(kernelResults[14]);\r\n      \r\n      // Check for simulation indicators in results\r\n      for (const result of kernelResults) {\r\n        if (result.includes('simulated')) {\r\n          console.log(\"🔍 Detected simulation indicators in kernel values\");\r\n          usedSimulation = true;\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading kernel info:\", error);\r\n      usedSimulation = true; // Failed reads mean simulation\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read FPGA values (40%)\r\n    onProgress('Reading FPGA Values', 40);\r\n    const fpgaVars = [\r\n      \"OBC1_vcc_pspll\", \"OBC1_vcc_psbatt\", \"OBC1_vccint\", \"OBC1_vccbram\", \"OBC1_vccaux\",\r\n      \"OBC1_vcc_psddr_pll\", \"OBC1_vccpsintfp_ddr\", \"OBC1_vccint1\", \"OBC1_vccaux1\", \"OBC1_vccvrefp\",\r\n      \"OBC1_vccvrefn\", \"OBC1_vccbram1\", \"OBC1_vccplintlp\", \"OBC1_vccplintfp\", \"OBC1_vccplaux\",\r\n      \"OBC1_vccams\", \"OBC1_vccpsintlp\", \"OBC1_vccpsintfp\", \"OBC1_vccpsaux\", \"OBC1_vccpsddr\",\r\n      \"OBC1_vccpsio3\", \"OBC1_vccpsio0\", \"OBC1_vccpsio1\", \"OBC1_vccpsio2\", \"OBC1_psmgtravcc\",\r\n      \"OBC1_psmgtravtt\", \"OBC1_vccams1\", \"OBC1_ps_temp\", \"OBC1_remote_temp\", \"OBC1_pl_temp\"\r\n    ];\r\n    \r\n    try {\r\n      // Use enhanced read function\r\n      const { results: fpgaResults, usedSimulation: fpgaSimulation } = await mccifReadWithFlag(sock, fpgaVars);\r\n      \r\n      // Update overall simulation flag\r\n      usedSimulation = usedSimulation || fpgaSimulation;\r\n      \r\n      // First 27 are voltages, last 3 are temperatures\r\n      results.fpga.voltages.vccPspll = safeParseValue(fpgaResults[0]);\r\n      results.fpga.voltages.vccPsbatt = safeParseValue(fpgaResults[1]);\r\n      results.fpga.voltages.vccint = safeParseValue(fpgaResults[2]);\r\n      results.fpga.voltages.vccbram = safeParseValue(fpgaResults[3]);\r\n      results.fpga.voltages.vccaux = safeParseValue(fpgaResults[4]);\r\n      // ... Set other voltages\r\n\r\n      results.fpga.temperatures.psTemp = safeParseValue(fpgaResults[27]);\r\n      results.fpga.temperatures.remoteTemp = safeParseValue(fpgaResults[28]);\r\n      results.fpga.temperatures.plTemp = safeParseValue(fpgaResults[29]);\r\n      \r\n      // Check for simulation indicators\r\n      for (const result of fpgaResults) {\r\n        if (result.includes('simulated')) {\r\n          console.log(\"🔍 Detected simulation indicators in FPGA values\");\r\n          usedSimulation = true;\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading FPGA values:\", error);\r\n      usedSimulation = true; // Failed reads mean simulation\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 4: Read voltage and current (60%)\r\n    onProgress('Reading Voltage and Current', 60);\r\n    const viVars = [\r\n      \"OBC1_3V3_D\", \"OBC1_PS_3V3_OBC2_V\", \"OBC1_PS_5V_OBC2_V\", \r\n      \"OBC1_PS_5V_OBC2_I\", \"OBC1_PS_3V3_OBC2_I\"\r\n    ];\r\n    \r\n    try {\r\n      // Use enhanced read function\r\n      const { results: viResults, usedSimulation: viSimulation } = await mccifReadWithFlag(sock, viVars);\r\n      \r\n      // Update overall simulation flag\r\n      usedSimulation = usedSimulation || viSimulation;\r\n      \r\n      const d3v3Value = safeParseValue(viResults[0]);\r\n      const ps3v3Obc2Value = safeParseValue(viResults[1]);\r\n      const ps5vObc2Value = safeParseValue(viResults[2]);\r\n      \r\n      results.vi.d3v3 = { \r\n        value: d3v3Value, \r\n        pass: checkVoltage(d3v3Value, true) \r\n      };\r\n      results.vi.ps3v3Obc2 = { \r\n        value: ps3v3Obc2Value, \r\n        pass: checkVoltage(ps3v3Obc2Value, true) \r\n      };\r\n      results.vi.ps5vObc2 = { \r\n        value: ps5vObc2Value, \r\n        pass: checkVoltage(ps5vObc2Value, false) \r\n      };\r\n      results.vi.ps5vObc2I = safeParseValue(viResults[3]);\r\n      results.vi.ps3v3Obc2I = safeParseValue(viResults[4]);\r\n      \r\n      // Check for simulation indicators\r\n      for (const result of viResults) {\r\n        if (result.includes('simulated')) {\r\n          console.log(\"🔍 Detected simulation indicators in voltage/current values\");\r\n          usedSimulation = true;\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      usedSimulation = true; // Failed reads mean simulation\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 5: Read temperature sensors (80%)\r\n    onProgress('Reading Temperature Sensors', 80);\r\n    const tempVars = [\r\n      \"OBC1_thruster_ch1_T\", \"OBC1_thruster_ch2_T\", \r\n      \"OBC1_leocam_ch1_T\", \"OBC1_leocam_ch2_T\",\r\n      \"OBC1_leocam_ch3_T\", \"OBC1_leocam_ch4_T\"\r\n    ];\r\n    \r\n    try {\r\n      // Use enhanced read function\r\n      const { results: tempResults, usedSimulation: tempSimulation } = await mccifReadWithFlag(sock, tempVars);\r\n      \r\n      // Update overall simulation flag\r\n      usedSimulation = usedSimulation || tempSimulation;\r\n      \r\n      results.temperatures.thruster1 = safeParseValue(tempResults[0]);\r\n      results.temperatures.thruster2 = safeParseValue(tempResults[1]);\r\n      results.temperatures.leocam[0] = safeParseValue(tempResults[2]);\r\n      results.temperatures.leocam[1] = safeParseValue(tempResults[3]);\r\n      results.temperatures.leocam[2] = safeParseValue(tempResults[4]);\r\n      results.temperatures.leocam[3] = safeParseValue(tempResults[5]);\r\n      \r\n      // Check for simulation indicators\r\n      for (const result of tempResults) {\r\n        if (result.includes('simulated')) {\r\n          console.log(\"🔍 Detected simulation indicators in temperature values\");\r\n          usedSimulation = true;\r\n          break;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading temperature sensors:\", error);\r\n      usedSimulation = true; // Failed reads mean simulation\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 6: EMMC test if enabled (90-100%)\r\n    if (enableEmmc) {\r\n      onProgress('Testing eMMC', 90);\r\n      \r\n      const emmcVars = [\"OBC1_Q8_eMMC0_state\", \"OBC1_Q8_eMMC1_state\"];\r\n      \r\n      try {\r\n        // Initial check\r\n        const initialEmmcCheck = await mccifReadWithFlag(sock, emmcVars);\r\n        // Update simulation status\r\n        usedSimulation = usedSimulation || initialEmmcCheck.usedSimulation;\r\n        \r\n        results.emmc.emmc0States.push(safeParseValue(initialEmmcCheck.results[0]));\r\n        results.emmc.emmc1States.push(safeParseValue(initialEmmcCheck.results[1]));\r\n        \r\n        // If mccifSet returns a Promise<boolean> for simulation detection\r\n        let setSimulation = false;\r\n        \r\n        // Modified command format: OBC1_Emmc_Control needs 8 or fewer tokens\r\n        try {\r\n          // Test eMMC0 - Use single digit values instead of multi-digit\r\n          // Change from value=1 to value=1 (same in this case but follow the pattern)\r\n          if (sock.send) {\r\n            // This will set setSimulation true if simulation was used\r\n            await sock.send(\"OBC1_Emmc_Control.value=1\\n\");\r\n            // For sockets that don't return simulation status, check if we can detect it\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              setSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              setSimulation = true;\r\n            }\r\n          } else {\r\n            // If there's no send method, use mccifSet and assume simulation\r\n            console.log(\"⚠️ Using mccifSet fallback for OBC1_Emmc_Control\");\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 1);\r\n            setSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          setSimulation = true;\r\n        }\r\n        \r\n        // Update simulation status based on the set operation\r\n        usedSimulation = usedSimulation || setSimulation;\r\n        \r\n        // Read status after first command\r\n        const emmcCheck2 = await mccifReadWithFlag(sock, emmcVars);\r\n        usedSimulation = usedSimulation || emmcCheck2.usedSimulation;\r\n        \r\n        results.emmc.emmc0States.push(safeParseValue(emmcCheck2.results[0]));\r\n        results.emmc.emmc1States.push(safeParseValue(emmcCheck2.results[1]));\r\n        \r\n        // Continue with eMMC test sequence, detecting simulation on each step\r\n        let nextSetSimulation = false;\r\n        \r\n        try {\r\n          if (sock.send) {\r\n            await sock.send(\"OBC1_Emmc_Control.value=3\\n\");\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              nextSetSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              nextSetSimulation = true;\r\n            }\r\n          } else {\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 3);\r\n            nextSetSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          nextSetSimulation = true;\r\n        }\r\n        \r\n        usedSimulation = usedSimulation || nextSetSimulation;\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n        \r\n        nextSetSimulation = false;\r\n        \r\n        try {\r\n          if (sock.send) {\r\n            await sock.send(\"OBC1_Emmc_Control.value=5\\n\");\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              nextSetSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              nextSetSimulation = true;\r\n            }\r\n          } else {\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 5);\r\n            nextSetSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          nextSetSimulation = true;\r\n        }\r\n        \r\n        usedSimulation = usedSimulation || nextSetSimulation;\r\n        \r\n        // Read status after next command\r\n        const emmcCheck3 = await mccifReadWithFlag(sock, emmcVars);\r\n        usedSimulation = usedSimulation || emmcCheck3.usedSimulation;\r\n        \r\n        results.emmc.emmc0States.push(safeParseValue(emmcCheck3.results[0]));\r\n        results.emmc.emmc1States.push(safeParseValue(emmcCheck3.results[1]));\r\n        \r\n        // Continue with more eMMC tests\r\n        // Test eMMC1\r\n        nextSetSimulation = false;\r\n        \r\n        try {\r\n          if (sock.send) {\r\n            await sock.send(\"OBC1_Emmc_Control.value=2\\n\");\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              nextSetSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              nextSetSimulation = true;\r\n            }\r\n          } else {\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 2);\r\n            nextSetSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          nextSetSimulation = true;\r\n        }\r\n        \r\n        usedSimulation = usedSimulation || nextSetSimulation;\r\n        \r\n        // Read status after command\r\n        const emmcCheck4 = await mccifReadWithFlag(sock, emmcVars);\r\n        usedSimulation = usedSimulation || emmcCheck4.usedSimulation;\r\n        \r\n        results.emmc.emmc0States.push(safeParseValue(emmcCheck4.results[0]));\r\n        results.emmc.emmc1States.push(safeParseValue(emmcCheck4.results[1]));\r\n        \r\n        nextSetSimulation = false;\r\n        \r\n        try {\r\n          if (sock.send) {\r\n            await sock.send(\"OBC1_Emmc_Control.value=4\\n\");\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              nextSetSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              nextSetSimulation = true;\r\n            }\r\n          } else {\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 4);\r\n            nextSetSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          nextSetSimulation = true;\r\n        }\r\n        \r\n        usedSimulation = usedSimulation || nextSetSimulation;\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n        \r\n        nextSetSimulation = false;\r\n        \r\n        try {\r\n          if (sock.send) {\r\n            await sock.send(\"OBC1_Emmc_Control.value=6\\n\");\r\n            if (typeof sock.isSimulated === 'boolean') {\r\n              nextSetSimulation = sock.isSimulated;\r\n            } else if (typeof sock.simulateRead === 'function') {\r\n              nextSetSimulation = true;\r\n            }\r\n          } else {\r\n            await mccifSet(sock, \"OBC1_Emmc_Control\", 6);\r\n            nextSetSimulation = true;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error setting eMMC control:\", error);\r\n          nextSetSimulation = true;\r\n        }\r\n        \r\n        usedSimulation = usedSimulation || nextSetSimulation;\r\n        \r\n        // Final read status\r\n        const emmcCheck5 = await mccifReadWithFlag(sock, emmcVars);\r\n        usedSimulation = usedSimulation || emmcCheck5.usedSimulation;\r\n        \r\n        results.emmc.emmc0States.push(safeParseValue(emmcCheck5.results[0]));\r\n        results.emmc.emmc1States.push(safeParseValue(emmcCheck5.results[1]));\r\n        \r\n        // Final check for simulation evidence in the eMMC results\r\n        // Typical simulation pattern: sequential values like 0,1,0,1,0,1\r\n        if (\r\n          results.emmc.emmc0States.every(val => val === '0' || val === '1') &&\r\n          results.emmc.emmc1States.every(val => val === '0' || val === '1')\r\n        ) {\r\n          console.log(\"🔍 eMMC values match typical simulation pattern\");\r\n          usedSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during eMMC test:\", error);\r\n        // Fill with N/A values if the test fails\r\n        results.emmc.emmc0States = Array(6).fill('N.A.');\r\n        results.emmc.emmc1States = Array(6).fill('N.A.');\r\n        // Mark as simulation since we're using hardcoded values\r\n        usedSimulation = true;\r\n      }\r\n    } else {\r\n      // If eMMC test is disabled, set empty results\r\n      results.emmc.emmc0States = Array(6).fill('N.A.');\r\n      results.emmc.emmc1States = Array(6).fill('N.A.');\r\n    }\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    // Add the final simulation status to the results\r\n    results._simulationUsed = usedSimulation;\r\n    \r\n    // Log the simulation status for debugging\r\n    console.log(`OBC-1 checkout completed. Simulation used: ${usedSimulation}`);\r\n    \r\n    return { results, usedSimulation };\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-1 checkout:', error);\r\n    // Always return simulation=true if we had an error\r\n    return { \r\n      results: { error: error instanceof Error ? error.message : String(error) },\r\n      usedSimulation: true \r\n    };\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 843, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc1Report.ts"],"sourcesContent":["// src/services/reports/obc1Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-1 checkout results\r\n * \r\n * @param results The OBC-1 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC1Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-1_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-1 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-1 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Kernel Information section\r\n        new Paragraph({\r\n          text: \"* Kernel Information:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create kernel info table\r\n        createKernelInfoTable(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // FPGA section\r\n        new Paragraph({\r\n          text: \"* FPGA Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create FPGA info paragraphs\r\n        ...createFpgaInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Temperature section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create VI info paragraphs\r\n        ...createViInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // eMMC section (if enabled)\r\n        new Paragraph({\r\n          text: \"* eMMC test summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create eMMC info paragraphs\r\n        ...createEmmcInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create kernel info table\r\nfunction createKernelInfoTable(results: any): Table {\r\n  const rows = [\r\n    ['Uptime', `${results.kernel.uptime} s`],\r\n    ['1 minute average loads', results.kernel.loads.oneMinute],\r\n    ['5 minutes average loads', results.kernel.loads.fiveMinute],\r\n    ['15 minutes average loads', results.kernel.loads.fifteenMinute],\r\n    ['Total usable main memory size', `${results.kernel.memory.totalRam} bytes`],\r\n    ['Available memory size', `${results.kernel.memory.freeRam} bytes`],\r\n    ['Amount of shared memory', `${results.kernel.memory.sharedRam} bytes`],\r\n    ['Memory used by buffers', `${results.kernel.memory.bufferRam} bytes`],\r\n    ['Total swap space size', `${results.kernel.memory.totalSwap} bytes`],\r\n    ['Swap space still available', `${results.kernel.memory.freeSwap} bytes`],\r\n    ['Number of current processes', `${results.kernel.processes} bytes`],\r\n    ['Total high memory size', `${results.kernel.memory.totalHigh} bytes`],\r\n    ['Available high memory size', `${results.kernel.memory.freeHigh} bytes`],\r\n    ['Memory unit size in bytes', `${results.kernel.memory.memUnit} bytes`]\r\n  ].map(row => new TableRow({\r\n    children: [\r\n      new TableCell({\r\n        children: [new Paragraph(row[0])],\r\n        width: { size: 60, type: WidthType.PERCENTAGE }\r\n      }),\r\n      new TableCell({\r\n        children: [new Paragraph(row[1])],\r\n        width: { size: 40, type: WidthType.PERCENTAGE }\r\n      })\r\n    ]\r\n  }));\r\n\r\n  return new Table({\r\n    rows,\r\n    width: { size: 100, type: WidthType.PERCENTAGE },\r\n    borders: {\r\n      top: { style: BorderStyle.SINGLE, size: 1 },\r\n      bottom: { style: BorderStyle.SINGLE, size: 1 },\r\n      left: { style: BorderStyle.SINGLE, size: 1 },\r\n      right: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideHorizontal: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideVertical: { style: BorderStyle.SINGLE, size: 1 }\r\n    }\r\n  });\r\n}\r\n\r\n// Helper function to create FPGA info paragraphs\r\nfunction createFpgaInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`vcc_pspll       : ${padString(results.fpga.voltages.vccPspll, 4)} V`),\r\n    new Paragraph(`vcc_psbatt      : ${padString(results.fpga.voltages.vccPsbatt, 4)} V`),\r\n    new Paragraph(`vccint          : ${padString(results.fpga.voltages.vccint, 4)} V`),\r\n    new Paragraph(`vccbram         : ${padString(results.fpga.voltages.vccbram, 4)} V`),\r\n    new Paragraph(`vccaux          : ${padString(results.fpga.voltages.vccaux, 4)} V`),\r\n    // ... add other voltages as needed\r\n    new Paragraph(`ps_temp         : ${padString(results.fpga.temperatures.psTemp, 4)} deg C`),\r\n    new Paragraph(`remote_temp     : ${padString(results.fpga.temperatures.remoteTemp, 4)} deg C`),\r\n    new Paragraph(`pl_temp         : ${padString(results.fpga.temperatures.plTemp, 4)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create VI info paragraphs\r\nfunction createViInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`OBC-1 3V3 D V           : ${padString(results.vi.d3v3.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 V    : ${padString(results.vi.ps3v3Obc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 V     : ${padString(results.vi.ps5vObc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 I     : ${padString(results.vi.ps5vObc2I, 4)} mA`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 I    : ${padString(results.vi.ps3v3Obc2I, 4)} mA`),\r\n    new Paragraph(``),\r\n    new Paragraph(`Thruster thermistor 1   : ${padString(results.temperatures.thruster1, 3)} deg C`),\r\n    new Paragraph(`Thruster thermistor 2   : ${padString(results.temperatures.thruster2, 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 1     : ${padString(results.temperatures.leocam[0], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 2     : ${padString(results.temperatures.leocam[1], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 3     : ${padString(results.temperatures.leocam[2], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 4     : ${padString(results.temperatures.leocam[3], 3)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create eMMC info paragraphs\r\nfunction createEmmcInfoParagraphs(results: any): Paragraph[] {\r\n  if (results.emmc.emmc0States.length === 0 || results.emmc.emmc0States[0] === 'N.A.') {\r\n    return [new Paragraph('eMMC test was not performed')];\r\n  }\r\n  \r\n  return [\r\n    new Paragraph('eMMC state before on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[0], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[0], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[1], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[1], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[2], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[2], 3)}`),\r\n    new Paragraph('eMMC state before on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[3], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[3], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[4], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[4], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[5], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[5], 3)}`)\r\n];\r\n}\r\n\r\n/**\r\n* Utility function to pad a string to a specific length\r\n* \r\n* @param value The string value to pad\r\n* @param length The desired length\r\n* @returns The padded string\r\n*/\r\nfunction padString(value: string, length: number): string {\r\nif (!value) return ''.padStart(length, ' ');\r\nreturn value.padStart(length, ' ');\r\n}\r\n        "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1243, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc2Checkout.ts"],"sourcesContent":["// src/services/checkout/obc2Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Check if memory test was successful by comparing before/after values\r\n * @param values Array of test values to check\r\n * @returns Pass/Fail string\r\n */\r\nfunction memCheck(values: string[]): string {\r\n  if (values.length < 8) return \"[FAIL]\";\r\n  \r\n  const writeSuccessBefore = parseInt(values[0]);\r\n  const readSuccessBefore = parseInt(values[1]);\r\n  const writeFailBefore = parseInt(values[2]);\r\n  const readFailBefore = parseInt(values[3]);\r\n  \r\n  const writeSuccessAfter = parseInt(values[4]);\r\n  const readSuccessAfter = parseInt(values[5]);\r\n  const writeFailAfter = parseInt(values[6]);\r\n  const readFailAfter = parseInt(values[7]);\r\n  \r\n  if ((writeSuccessAfter - writeSuccessBefore) > 0 &&\r\n      (readSuccessAfter - readSuccessBefore) > 0 &&\r\n      (writeFailAfter - writeFailBefore) === 0 &&\r\n      (readFailAfter - readFailBefore) === 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check CAN communication by comparing before/after values\r\n * @param valuesBefore Array of test values before test\r\n * @param valuesAfter Array of test values after test\r\n * @param packetOffset Offset for acknowledgement packets\r\n * @returns Pass/Fail string\r\n */\r\nfunction canCheck(valuesBefore: string[], valuesAfter: string[], packetOffset: number): string {\r\n  if (valuesBefore.length < packetOffset + 5 || valuesAfter.length < packetOffset + 5) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Calculate differences in transmitted packets\r\n  const hkpTxDiff = parseInt(valuesAfter[0]) - parseInt(valuesBefore[0]);\r\n  const cfgTxDiff = parseInt(valuesAfter[1]) - parseInt(valuesBefore[1]);\r\n  const metTxDiff = parseInt(valuesAfter[2]) - parseInt(valuesBefore[2]);\r\n  const etcTxDiff = parseInt(valuesAfter[3]) - parseInt(valuesBefore[3]);\r\n  const uhfTxDiff = parseInt(valuesAfter[4]) - parseInt(valuesBefore[4]);\r\n  \r\n  // Calculate differences in acknowledged packets\r\n  const hkpAckDiff = parseInt(valuesAfter[packetOffset + 0]) - parseInt(valuesBefore[packetOffset + 0]);\r\n  const cfgAckDiff = parseInt(valuesAfter[packetOffset + 1]) - parseInt(valuesBefore[packetOffset + 1]);\r\n  const metAckDiff = parseInt(valuesAfter[packetOffset + 2]) - parseInt(valuesBefore[packetOffset + 2]);\r\n  const etcAckDiff = parseInt(valuesAfter[packetOffset + 3]) - parseInt(valuesBefore[packetOffset + 3]);\r\n  const uhfAckDiff = parseInt(valuesAfter[packetOffset + 4]) - parseInt(valuesBefore[packetOffset + 4]);\r\n  \r\n  // Check if all values increased\r\n  if (hkpTxDiff > 0 && hkpAckDiff > 0 &&\r\n      cfgTxDiff > 0 && cfgAckDiff > 0 &&\r\n      metTxDiff > 0 && metAckDiff > 0 &&\r\n      etcTxDiff > 0 && etcAckDiff > 0 &&\r\n      uhfTxDiff > 0 && uhfAckDiff > 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check if 3.3V voltage level is within acceptable range\r\n * @param value Voltage value as string (in mV)\r\n * @returns Pass/Fail string\r\n */\r\nfunction check3V3(value: string): string {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Check if voltage is within acceptable range (3000-3600 mV)\r\n  return numValue >= 3000 && numValue <= 3600 ? \"[PASS]\" : \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Run the OBC-2 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (SD Card, EEPROM, etc.)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC2Checkout(\r\n  sock: any, \r\n  options: { sdCard: boolean; eeprom: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      time: {\r\n        before: '',\r\n        after: '',\r\n        uptime: { total: '', session: '' },\r\n        storePeriod: '',\r\n        resetCount: '',\r\n        resetSource: ''\r\n      },\r\n      can: {\r\n        primary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        },\r\n        secondary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        }\r\n      },\r\n      voltage: {\r\n        sdCard: { value: '', result: '' },\r\n        flash: { value: '', result: '' },\r\n        eeprom: { value: '', result: '' },\r\n        payload: { value: '', current: '', result: '' },\r\n        uhf: { value: '', current: '', result: '' },\r\n        pp: { value: '', current: '' },\r\n        gps: { value: '' },\r\n        lna: { value: '', current: '' }\r\n      },\r\n      memory: {\r\n        sdCard: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        },\r\n        eeprom: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        }\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n    const passFailResults: string[] = [];\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading OBC-2 Firmware Version', 5);\r\n    const fwVars = [\"OBC2_FW_Ver_Major\", \"OBC2_FW_Ver_Minor\", \"OBC2_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    }\r\n\r\n    // Step 2: Check and update time (15%)\r\n    onProgress('Checking OBC-2 Time', 15);\r\n    try {\r\n      // Read current time\r\n      const timeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.before = safeParseValue(timeResult[0]);\r\n      allResults.push(results.time.before);\r\n      \r\n      // Set time to now\r\n      await mccifSet(sock, \"OBC2_Time\", \"NOW\");\r\n      \r\n      // Read updated time\r\n      const updatedTimeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.after = safeParseValue(updatedTimeResult[0]);\r\n      allResults.push(results.time.after);\r\n    } catch (error) {\r\n      console.error(\"Error updating time:\", error);\r\n      results.time.before = \"error\";\r\n      results.time.after = \"error\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(\"error\");\r\n      allResults.push(\"error\");\r\n    }\r\n\r\n    // Step 3: Read time related variables (20%)\r\n    onProgress('Reading OBC-2 Time Information', 20);\r\n    const timeVars = [\r\n      \"OBC2_Time\", \"OBC2_Uptime_Total\", \"OBC2_StorePeriod\", \r\n      \"OBC2_Uptime_Session\", \"OBC2_ResetCount\", \"OBC2_ResetSource\"\r\n    ];\r\n    \r\n    try {\r\n      const timeResults = await mccifRead(sock, timeVars);\r\n      results.time.current = safeParseValue(timeResults[0]);\r\n      results.time.uptime.total = safeParseValue(timeResults[1]);\r\n      results.time.storePeriod = safeParseValue(timeResults[2]);\r\n      results.time.uptime.session = safeParseValue(timeResults[3]);\r\n      results.time.resetCount = safeParseValue(timeResults[4]);\r\n      results.time.resetSource = safeParseValue(timeResults[5]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.time.current);\r\n      allResults.push(results.time.uptime.total);\r\n      allResults.push(results.time.storePeriod);\r\n      allResults.push(results.time.uptime.session);\r\n      allResults.push(results.time.resetCount);\r\n      allResults.push(results.time.resetSource);\r\n    } catch (error) {\r\n      console.error(\"Error reading time information:\", error);\r\n      \r\n      // Add default values to allResults\r\n      [\"error\", \"0\", \"0\", \"0\", \"0\", \"unknown\"].forEach(val => allResults.push(val));\r\n    }\r\n\r\n    // Step 4: CAN communication test - primary (30%)\r\n    onProgress('Testing Primary CAN Communication', 30);\r\n    const canVars = [\r\n      \"OBC1_InterComm_Obc2_Hkp_Tx\", \"OBC1_InterComm_Obc2_Cfg_Tx\", \"OBC1_InterComm_Obc2_Met_Tx\",\r\n      \"OBC1_InterComm_Obc2_Etc_Tx\", \"OBC1_InterComm_Obc2_Uhf_Tx\", \"OBC1_InterComm_Obc2_Hkp_Ack\",\r\n      \"OBC1_InterComm_Obc2_Cfg_Ack\", \"OBC1_InterComm_Obc2_Met_Ack\", \"OBC1_InterComm_Obc2_Etc_Ack\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Ack\", \"OBC1_InterComm_Obc2_Hkp_Timeout\", \"OBC1_InterComm_Obc2_Cfg_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Met_Timeout\", \"OBC1_InterComm_Obc2_Etc_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Timeout\", \"OBC1_InterComm_Obc2_Hkp_Error\", \"OBC1_InterComm_Obc2_Cfg_Error\",\r\n      \"OBC1_InterComm_Obc2_Met_Error\", \"OBC1_InterComm_Obc2_Etc_Error\", \"OBC1_InterComm_Obc2_Uhf_Error\"\r\n    ];\r\n    \r\n    const canSetting = [\"OBC1_Intercomm_PriSec_Cfg\"];\r\n    \r\n    try {\r\n      // Read initial CAN values\r\n      const canBeforeResults = await mccifRead(sock, canVars);\r\n      \r\n      // Store before values\r\n      const canBeforeValues: string[] = canBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.before.tx.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.before.ack.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.before.timeout.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.before.error.push(canBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canBeforeValues);\r\n      \r\n      // Read CAN configuration\r\n      const canSettingResult = await mccifRead(sock, canSetting);\r\n      const canSettingValue = safeParseValue(canSettingResult[0]);\r\n      allResults.push(canSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canAfterResults = await mccifRead(sock, canVars);\r\n      const canAfterValues: string[] = canAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.after.tx.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.after.ack.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.after.timeout.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.after.error.push(canAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canAfterValues);\r\n      \r\n      // Check primary CAN result\r\n      results.can.primary.result = canCheck(canBeforeValues, canAfterValues, 5);\r\n      passFailResults.push(results.can.primary.result);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing primary CAN:\", error);\r\n      results.can.primary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n    }\r\n\r\n    // Step 5: CAN communication test - secondary (50%)\r\n    onProgress('Testing Secondary CAN Communication', 50);\r\n    try {\r\n      // Set to secondary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 31);\r\n      \r\n      // Read initial CAN values for secondary\r\n      const canSecBeforeResults = await mccifRead(sock, canVars);\r\n      const canSecBeforeValues: string[] = canSecBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.before.tx.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.before.ack.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.before.timeout.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.before.error.push(canSecBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecBeforeValues);\r\n      \r\n      // Read secondary CAN configuration\r\n      const canSecSettingResult = await mccifRead(sock, canSetting);\r\n      const canSecSettingValue = safeParseValue(canSecSettingResult[0]);\r\n      allResults.push(canSecSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canSecAfterResults = await mccifRead(sock, canVars);\r\n      const canSecAfterValues: string[] = canSecAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.after.tx.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.after.ack.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.after.timeout.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.after.error.push(canSecAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecAfterValues);\r\n      \r\n      // Check secondary CAN result\r\n      results.can.secondary.result = canCheck(canSecBeforeValues, canSecAfterValues, 5);\r\n      passFailResults.push(results.can.secondary.result);\r\n      \r\n      // Reset to primary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing secondary CAN:\", error);\r\n      results.can.secondary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n      \r\n      // Try to reset to primary CAN\r\n      try {\r\n        await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      } catch (error) {\r\n        console.error(\"Error resetting to primary CAN:\", error);\r\n      }\r\n    }\r\n\r\n    // Step 6: Read voltage and current values (65%)\r\n    onProgress('Reading OBC-2 Voltage and Current', 65);\r\n    const viVars = [\r\n      \"OBC2_SDCard_3V3_V\", \"OBC2_Flash_3v3_V\", \"OBC2_EEPROM_3V3_V\", \"OBC2_Payload_3V3_V\",\r\n      \"OBC2_Payload_3V3_I\", \"OBC2_UHF_3V3_V\", \"OBC2_UHF_3V3_I\", \"OBC2_PP_3V3_V\", \"OBC2_PP_3V3_I\",\r\n      \"OBC2_GPS_3V3_V\", \"OBC2_LNA_V\", \"OBC2_LNA_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      const viValues: string[] = viResults.map(safeParseValue);\r\n      \r\n      // Update voltage results\r\n      results.voltage.sdCard.value = viValues[0];\r\n      results.voltage.flash.value = viValues[1];\r\n      results.voltage.eeprom.value = viValues[2];\r\n      results.voltage.payload.value = viValues[3];\r\n      results.voltage.payload.current = viValues[4];\r\n      results.voltage.uhf.value = viValues[5];\r\n      results.voltage.uhf.current = viValues[6];\r\n      results.voltage.pp.value = viValues[7];\r\n      results.voltage.pp.current = viValues[8];\r\n      results.voltage.gps.value = viValues[9];\r\n      results.voltage.lna.value = viValues[10];\r\n      results.voltage.lna.current = viValues[11];\r\n      \r\n      // Check voltage results\r\n      results.voltage.sdCard.result = check3V3(viValues[0]);\r\n      results.voltage.flash.result = check3V3(viValues[1]);\r\n      results.voltage.eeprom.result = check3V3(viValues[2]);\r\n      results.voltage.payload.result = check3V3(viValues[3]);\r\n      results.voltage.uhf.result = check3V3(viValues[5]);\r\n      \r\n      // Add to passFailResults\r\n      passFailResults.push(results.voltage.sdCard.result);\r\n      passFailResults.push(results.voltage.flash.result);\r\n      passFailResults.push(results.voltage.eeprom.result);\r\n      passFailResults.push(results.voltage.payload.result);\r\n      passFailResults.push(results.voltage.uhf.result);\r\n      \r\n      // Add to allResults\r\n      allResults.push(...viValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      \r\n      // Add placeholder values\r\n      const errorValues = Array(12).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n      \r\n      // Add fail results\r\n      const failResults = Array(5).fill(\"[FAIL]\");\r\n      passFailResults.push(...failResults);\r\n    }\r\n\r\n    // Step 7: SD Card test if enabled (80%)\r\n    if (options.sdCard) {\r\n      onProgress('Testing OBC-2 SD Card', 80);\r\n      \r\n      try {\r\n        // Read SD Card voltage\r\n        const sdVoltageResult = await mccifRead(sock, [\"OBC2_SDCard_3V3_V\"]);\r\n        const sdVoltage = safeParseValue(sdVoltageResult[0]);\r\n        allResults.push(sdVoltage);\r\n        \r\n        // Read SD Card counters before test\r\n        const sdVars = [\"OBC2_SD_WriteSuccess\", \"OBC2_SD_ReadSuccess\", \"OBC2_SD_WriteFail\", \"OBC2_SD_ReadFail\"];\r\n        const sdBeforeResults = await mccifRead(sock, sdVars);\r\n        const sdBeforeValues = sdBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.sdCard.before.writeSuccess = sdBeforeValues[0];\r\n        results.memory.sdCard.before.readSuccess = sdBeforeValues[1];\r\n        results.memory.sdCard.before.writeFail = sdBeforeValues[2];\r\n        results.memory.sdCard.before.readFail = sdBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdBeforeValues);\r\n        \r\n        // Run SD Card test\r\n        await mccifSet(sock, \"OBC2_SD_Control\", 6);\r\n        \r\n        // Read SD Card counters after test\r\n        const sdAfterResults = await mccifRead(sock, sdVars);\r\n        const sdAfterValues = sdAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.sdCard.after.writeSuccess = sdAfterValues[0];\r\n        results.memory.sdCard.after.readSuccess = sdAfterValues[1];\r\n        results.memory.sdCard.after.writeFail = sdAfterValues[2];\r\n        results.memory.sdCard.after.readFail = sdAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdAfterValues);\r\n        \r\n        // Check SD Card test result\r\n        const sdTestValues = [...sdBeforeValues, ...sdAfterValues];\r\n        results.memory.sdCard.result = memCheck(sdTestValues);\r\n        passFailResults.push(results.memory.sdCard.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing SD Card:\", error);\r\n        results.memory.sdCard.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // SD Card test not enabled\r\n      results.memory.sdCard.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 8: EEPROM test if enabled (90%)\r\n    if (options.eeprom) {\r\n      onProgress('Testing OBC-2 EEPROM', 90);\r\n      \r\n      try {\r\n        // Read EEPROM voltage\r\n        const eepromVoltageResult = await mccifRead(sock, [\"OBC2_EEPROM_3V3_V\"]);\r\n        const eepromVoltage = safeParseValue(eepromVoltageResult[0]);\r\n        allResults.push(eepromVoltage);\r\n        \r\n        // Read EEPROM counters before test\r\n        const eepromVars = [\"OBC2_EEPROM_WriteSuccess\", \"OBC2_EEPROM_ReadSuccess\", \r\n                          \"OBC2_EEPROM_WriteFail\", \"OBC2_EEPROM_ReadFail\"];\r\n        const eepromBeforeResults = await mccifRead(sock, eepromVars);\r\n        const eepromBeforeValues = eepromBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.eeprom.before.writeSuccess = eepromBeforeValues[0];\r\n        results.memory.eeprom.before.readSuccess = eepromBeforeValues[1];\r\n        results.memory.eeprom.before.writeFail = eepromBeforeValues[2];\r\n        results.memory.eeprom.before.readFail = eepromBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromBeforeValues);\r\n        \r\n        // Run EEPROM test\r\n        await mccifSet(sock, \"OBC2_EEPROM_Control\", 7);\r\n        \r\n        // Read EEPROM counters after test\r\n        const eepromAfterResults = await mccifRead(sock, eepromVars);\r\n        const eepromAfterValues = eepromAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.eeprom.after.writeSuccess = eepromAfterValues[0];\r\n        results.memory.eeprom.after.readSuccess = eepromAfterValues[1];\r\n        results.memory.eeprom.after.writeFail = eepromAfterValues[2];\r\n        results.memory.eeprom.after.readFail = eepromAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromAfterValues);\r\n        \r\n        // Check EEPROM test result\r\n        const eepromTestValues = [...eepromBeforeValues, ...eepromAfterValues];\r\n        results.memory.eeprom.result = memCheck(eepromTestValues);\r\n        passFailResults.push(results.memory.eeprom.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing EEPROM:\", error);\r\n        results.memory.eeprom.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // EEPROM test not enabled\r\n      results.memory.eeprom.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 9: Final time reading (100%)\r\n    onProgress('Final OBC-2 Time Check', 100);\r\n    try {\r\n      const finalTimeResults = await mccifRead(sock, timeVars);\r\n      const finalTimeValues = finalTimeResults.map(safeParseValue);\r\n      \r\n      // Update final time values\r\n      results.time.final = {\r\n        current: finalTimeValues[0],\r\n        uptime: {\r\n          total: finalTimeValues[1],\r\n          session: finalTimeValues[3]\r\n        },\r\n        storePeriod: finalTimeValues[2],\r\n        resetCount: finalTimeValues[4],\r\n        resetSource: finalTimeValues[5]\r\n      };\r\n      \r\n      // Add to allResults\r\n      allResults.push(...finalTimeValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading final time information:\", error);\r\n      \r\n      // Add placeholder values to allResults\r\n      const errorValues = Array(6).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n    }\r\n\r\n    // Store all results arrays in the results object\r\n    results.allResults = allResults;\r\n    results.passFailResults = passFailResults;\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-2 checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1898, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc2Report.ts"],"sourcesContent":["// src/services/reports/obc2Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-2 checkout results\r\n * \r\n * @param results The OBC-2 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC2Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-2_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-2 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-2 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Time Sync section\r\n        new Paragraph({\r\n          text: \"* Time Sync:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `BEFORE update OBC-2 Time: ${results.time.before} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `AFTER update OBC-2 Time: ${results.time.after} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Test Summary section\r\n        new Paragraph({\r\n          text: \"* Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN             : ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN           : ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card Voltage         : ${results.voltage.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Flash Voltage           : ${results.voltage.flash.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM Voltage          : ${results.voltage.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Payload Voltage         : ${results.voltage.payload.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `UHF Voltage             : ${results.voltage.uhf.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card                 : ${results.memory.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM                  : ${results.memory.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // OBC-2 Checkout Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Primary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN : -- ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createPrimaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Secondary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN : -- ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createSecondaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createVoltageCurrentSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Memory Test Summary section\r\n        new Paragraph({\r\n          text: \"* Memory Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createMemoryTestSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Final checkout time information\r\n        new Paragraph({\r\n          text: \"* OBC-2 Final Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createFinalCheckoutSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function for Primary CAN section\r\nfunction createPrimaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.primary) {\r\n    const section = results.can.primary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"0\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Secondary CAN section\r\nfunction createSecondaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.secondary) {\r\n    const section = results.can.secondary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"31\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Voltage Current section\r\nfunction createVoltageCurrentSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.voltage) {\r\n      const v = results.voltage;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 SDCard 3V3 V  : ${padString(v.sdCard.value, 4)} mV    ${v.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Flash 3v3 V   : ${padString(v.flash.value, 4)} mV    ${v.flash.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 EEPROM 3V3 V  : ${padString(v.eeprom.value, 4)} mV    ${v.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 V : ${padString(v.payload.value, 4)} mV    ${v.payload.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 I : ${padString(v.payload.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 V     : ${padString(v.uhf.value, 4)} mV    ${v.uhf.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 I     : ${padString(v.uhf.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 V      : ${padString(v.pp.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 I      : ${padString(v.pp.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 GPS V         : ${padString(v.gps.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA V         : ${padString(v.lna.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA I         : ${padString(v.lna.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for Memory Test section\r\n  function createMemoryTestSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.memory) {\r\n      // SD Card Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `SD Card : -- ${results.memory.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.sdCard.result !== \"Not tested\") {\r\n        const sdCard = results.memory.sdCard;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 SDCard 3V3 V          : ${padString(results.voltage.sdCard.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(sdCard.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(sdCard.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(sdCard.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(sdCard.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(sdCard.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(sdCard.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(sdCard.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(sdCard.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `SD Card test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `--------------------------------------------------------------------`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // EEPROM Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `EEPROM : -- ${results.memory.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.eeprom.result !== \"Not tested\") {\r\n        const eeprom = results.memory.eeprom;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 EEPROM 3V3 V          : ${padString(results.voltage.eeprom.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(eeprom.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(eeprom.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(eeprom.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(eeprom.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(eeprom.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(eeprom.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(eeprom.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(eeprom.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `EEPROM test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for final checkout section\r\n  function createFinalCheckoutSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.time && results.time.final) {\r\n      const final = results.time.final;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${final.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${final.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${final.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${final.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${final.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${final.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    } else {\r\n      // Use the initial time readings if final time readings are not available\r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  /**\r\n   * Utility function to pad a string to a specific length\r\n   * \r\n   * @param value The string value to pad\r\n   * @param length The desired length\r\n   * @returns The padded string\r\n   */\r\n  function padString(value: string | number | undefined, length: number): string {\r\n    if (value === undefined || value === null) return ''.padStart(length, ' ');\r\n    return String(value).padStart(length, ' ');\r\n  }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3217, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/sbandCheckout.ts"],"sourcesContent":["// src/services/checkout/sbandCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the S-Band checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (additional S-Band specific options)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runSBandCheckout(\r\n  sock: any, \r\n  options: { testTX: boolean; testRX: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      fpga: { \r\n        version: '',\r\n        build: '',\r\n        type: '',\r\n        option: ''\r\n      },\r\n      hardware: {\r\n        idYear: '',\r\n        idMonth: '',\r\n        orderNumber: ''\r\n      },\r\n      status: {\r\n        lclStatus: ''\r\n      },\r\n      receiver: {\r\n        status: '',\r\n        sensitivity: '',\r\n        frequencyShift: '',\r\n        iqPower: '',\r\n        agcValue: '',\r\n        demodEb: '',\r\n        demodN0: '',\r\n        dataRate: ''\r\n      },\r\n      transmitter: {\r\n        status: '',\r\n        convDiff: '',\r\n        convFilter: '',\r\n        waveform: '',\r\n        pcmIndex: '',\r\n        agcValue: ''\r\n      },\r\n      modes: {\r\n        coherentMode: '',\r\n        rangingMode: ''\r\n      },\r\n      temperature: {\r\n        adc0: '',\r\n        adc1: ''\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n\r\n    // Step 1: Initialize the test (5%)\r\n    onProgress('Initializing S-Band Checkout', 5);\r\n    \r\n    // Define all telemetry parameters to query\r\n    const sbandTlm = [\r\n      \"OBC1_SBand_FPGA_version\", \r\n      \"OBC1_SBand_FPGA_build\", \r\n      \"OBC1_SBand_hardware_id_year\",\r\n      \"OBC1_SBand_hardware_id_month\", \r\n      \"OBC1_SBand_hardware_id_order_n\", \r\n      \"OBC1_SBand_FPGA_type\",\r\n      \"OBC1_SBand_LCL_status\", \r\n      \"OBC1_SBand_FPGA_option\", \r\n      \"OBC1_SBand_RX_status\",\r\n      \"OBC1_SBand_RX_sensitivity\", \r\n      \"OBC1_SBand_RX_frequency_shift\", \r\n      \"OBC1_SBand_RX_IQ_power\",\r\n      \"OBC1_SBand_RX_AGC_value\", \r\n      \"OBC1_SBand_RX_demod_Eb\", \r\n      \"OBC1_SBand_RX_demod_N0\",\r\n      \"OBC1_SBand_RX_data_rate\", \r\n      \"OBC1_SBand_TX_status\", \r\n      \"OBC1_SBand_TX_conv_diff\",\r\n      \"OBC1_SBand_TX_conv_filter\", \r\n      \"OBC1_SBand_TX_waveform\", \r\n      \"OBC1_SBand_TX_pcm_index\",\r\n      \"OBC1_SBand_TX_agc_value\", \r\n      \"OBC1_SBand_coherent_mode\", \r\n      \"OBC1_SBand_ranging_mode\",\r\n      \"OBC1_SBand_adc_reg_00\", \r\n      \"OBC1_SBand_adc_reg_04\"\r\n    ];\r\n\r\n    // Step 2: Activate S-Band hardware (if needed) (10%)\r\n    onProgress('Activating S-Band Hardware', 10);\r\n    \r\n    try {\r\n      // Send activation command (value 5 corresponds to S-Band activation)\r\n      if (options.testTX || options.testRX) {\r\n        await mccifSet(sock, \"OBC1_Command\", 5);\r\n        \r\n        // Wait for activation (60 seconds in the original Python script)\r\n        onProgress('Waiting for S-Band hardware to initialize', 15);\r\n        \r\n        // Simulate waiting with multiple progress updates\r\n        for (let i = 0; i < 6; i++) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          onProgress(`Waiting for S-Band hardware to initialize (${(i+1)*10}s)`, 15 + i*5);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error activating S-Band hardware:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n    \r\n    // Step 3: Read all S-Band telemetry parameters (50%)\r\n    onProgress('Reading S-Band Telemetry', 50);\r\n    \r\n    try {\r\n      const tlmResults = await mccifRead(sock, sbandTlm);\r\n      \r\n      // Process and store the results\r\n      const tlmValues = tlmResults.map(safeParseValue);\r\n      allResults.push(...tlmValues);\r\n      \r\n      // FPGA information\r\n      results.fpga.version = tlmValues[0];\r\n      results.fpga.build = tlmValues[1];\r\n      results.fpga.type = tlmValues[5];\r\n      results.fpga.option = tlmValues[7];\r\n      \r\n      // Hardware information\r\n      results.hardware.idYear = tlmValues[2];\r\n      results.hardware.idMonth = tlmValues[3];\r\n      results.hardware.orderNumber = tlmValues[4];\r\n      \r\n      // Status information\r\n      results.status.lclStatus = tlmValues[6];\r\n      \r\n      // Receiver information\r\n      results.receiver.status = tlmValues[8];\r\n      results.receiver.sensitivity = tlmValues[9];\r\n      results.receiver.frequencyShift = tlmValues[10];\r\n      results.receiver.iqPower = tlmValues[11];\r\n      results.receiver.agcValue = tlmValues[12];\r\n      results.receiver.demodEb = tlmValues[13];\r\n      results.receiver.demodN0 = tlmValues[14];\r\n      results.receiver.dataRate = tlmValues[15];\r\n      \r\n      // Transmitter information\r\n      results.transmitter.status = tlmValues[16];\r\n      results.transmitter.convDiff = tlmValues[17];\r\n      results.transmitter.convFilter = tlmValues[18];\r\n      results.transmitter.waveform = tlmValues[19];\r\n      results.transmitter.pcmIndex = tlmValues[20];\r\n      results.transmitter.agcValue = tlmValues[21];\r\n      \r\n      // Modes information\r\n      results.modes.coherentMode = tlmValues[22];\r\n      results.modes.rangingMode = tlmValues[23];\r\n      \r\n      // Temperature information\r\n      results.temperature.adc0 = tlmValues[24];\r\n      results.temperature.adc1 = tlmValues[25];\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading S-Band telemetry:\", error);\r\n      \r\n      // Fill results with N.A. values in case of error\r\n      sbandTlm.forEach(() => allResults.push(\"N.A.\"));\r\n      \r\n      // Set all result values to N.A.\r\n      results.fpga = { version: 'N.A.', build: 'N.A.', type: 'N.A.', option: 'N.A.' };\r\n      results.hardware = { idYear: 'N.A.', idMonth: 'N.A.', orderNumber: 'N.A.' };\r\n      results.status = { lclStatus: 'N.A.' };\r\n      results.receiver = { \r\n        status: 'N.A.', sensitivity: 'N.A.', frequencyShift: 'N.A.', iqPower: 'N.A.',\r\n        agcValue: 'N.A.', demodEb: 'N.A.', demodN0: 'N.A.', dataRate: 'N.A.' \r\n      };\r\n      results.transmitter = { \r\n        status: 'N.A.', convDiff: 'N.A.', convFilter: 'N.A.',\r\n        waveform: 'N.A.', pcmIndex: 'N.A.', agcValue: 'N.A.' \r\n      };\r\n      results.modes = { coherentMode: 'N.A.', rangingMode: 'N.A.' };\r\n      results.temperature = { adc0: 'N.A.', adc1: 'N.A.' };\r\n    }\r\n    \r\n    // Step 4: Run TX test if requested (75%)\r\n    if (options.testTX) {\r\n      onProgress('Testing S-Band Transmitter', 75);\r\n      \r\n      try {\r\n        // Simulate TX testing\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Additional TX test logic would go here\r\n        results.txTest = { \r\n          completed: true,\r\n          status: 'Success'\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error testing S-Band TX:\", error);\r\n        results.txTest = { \r\n          completed: false,\r\n          status: 'Failed',\r\n          error: error instanceof Error ? error.message : String(error)\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Step 5: Run RX test if requested (90%)\r\n    if (options.testRX) {\r\n      onProgress('Testing S-Band Receiver', 90);\r\n      \r\n      try {\r\n        // Simulate RX testing\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Additional RX test logic would go here\r\n        results.rxTest = { \r\n          completed: true,\r\n          status: 'Success'\r\n        };\r\n      } catch (error) {\r\n        console.error(\"Error testing S-Band RX:\", error);\r\n        results.rxTest = { \r\n          completed: false,\r\n          status: 'Failed',\r\n          error: error instanceof Error ? error.message : String(error)\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Step 6: Complete the test (100%)\r\n    onProgress('S-Band Checkout Complete', 100);\r\n    \r\n    // Store raw results\r\n    results.allResults = allResults;\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error during S-Band checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3471, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/sbandReport.ts"],"sourcesContent":["// src/services/reports/sbandReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for S-Band checkout results\r\n * \r\n * @param results The S-Band test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateSBandReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `S-Band_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create all document paragraphs in one array\r\n  const paragraphs = [\r\n    // Title\r\n    new Paragraph({\r\n      text: \"S-Band Automated Self Check Out Test\",\r\n      heading: HeadingLevel.HEADING_1,\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // Test metadata\r\n    new Paragraph({\r\n      text: `Test Version: 24.3.21`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test Date: ${now.toLocaleDateString()}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test Time: ${now.toLocaleTimeString()}`,\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // Separator\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200 }\r\n    }),\r\n    \r\n    // S-Band Telemetry Section\r\n    new Paragraph({\r\n      text: \"* S-Band Telemetry :\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // FPGA Information\r\n    new Paragraph({\r\n      text: `FPGA version on the FPGA software                   : ${results.fpga.version}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `FPGA build on the FPGA software                     : ${results.fpga.build}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Year of the baseband board manufacture              : ${results.hardware.idYear}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Week of the baseband board manufacture              : ${results.hardware.idMonth}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Ordering number of the baseband board manufacture   : ${results.hardware.orderNumber}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `FPGA type and function                              : ${results.fpga.type}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current configuration of the LCL function           : ${results.status.lclStatus}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Options configured in the FlashROM of the FPGA      : ${results.fpga.option}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Receiver Information\r\n    new Paragraph({\r\n      text: `State of the receiver                               : ${results.receiver.status}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current configuration of receiver sensitivity level : ${results.receiver.sensitivity}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Frequency shift measured by receiver                : ${results.receiver.frequencyShift} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `IQ input power measured on the digital signal       : ${results.receiver.iqPower}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current DAC to control the RF gain of RX frontend   : ${results.receiver.agcValue}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Eb information measured by the receiver             : ${results.receiver.demodEb}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `N0 information measured by the receiver             : ${results.receiver.demodN0}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Receiver data rate configuration                    : ${results.receiver.dataRate}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Transmitter Information\r\n    new Paragraph({\r\n      text: `Status of the transmitter                           : ${results.transmitter.status}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Encoder configuration                               : ${results.transmitter.convDiff}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Filter configuration                                : ${results.transmitter.convFilter}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Configuration of output waveform of modulated signal: ${results.transmitter.waveform}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `PCM/PM modulation index                             : ${results.transmitter.pcmIndex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Current DAC used to control the gain of the TX RF   : ${results.transmitter.agcValue}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Modes Information\r\n    new Paragraph({\r\n      text: `Coherent mode status                                : ${results.modes.coherentMode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Ranging mode status                                 : ${results.modes.rangingMode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Empty line\r\n    new Paragraph({\r\n      text: ``,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Temperature Information\r\n    new Paragraph({\r\n      text: `Value read on the input 0 of the ADC                : ${results.temperature.adc0} deg C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Value read on the input 1 of the ADC                : ${results.temperature.adc1} deg C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    \r\n    // Separator\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    }),\r\n  ];\r\n  \r\n  // Add a page break before the TX/RX test sections\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"\",\r\n      pageBreakBefore: true\r\n    })\r\n  );\r\n  \r\n  // Add TX test section if performed\r\n  if (results.txTest) {\r\n    const txTestParagraphs = createTxTestSection(results);\r\n    paragraphs.push(...txTestParagraphs);\r\n  }\r\n  \r\n  // Add RX test section if performed\r\n  if (results.rxTest) {\r\n    const rxTestParagraphs = createRxTestSection(results);\r\n    paragraphs.push(...rxTestParagraphs);\r\n  }\r\n  \r\n  // Create the document with all the paragraphs\r\n  const doc = new Document({\r\n    sections: [\r\n      {\r\n        properties: {},\r\n        children: paragraphs\r\n      }\r\n    ]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create TX test section\r\nfunction createTxTestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [\r\n    new Paragraph({\r\n      text: \"* S-Band Transmitter Test Results:\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test completed: ${results.txTest.completed ? \"Yes\" : \"No\"}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test status: ${results.txTest.status}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n  \r\n  // Add error message if the test failed\r\n  if (results.txTest.error) {\r\n    paragraphs.push(\r\n      new Paragraph({\r\n        text: `Error: ${results.txTest.error}`,\r\n        spacing: { after: 100 }\r\n      })\r\n    );\r\n  }\r\n  \r\n  // Add separator\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    })\r\n  );\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function to create RX test section\r\nfunction createRxTestSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [\r\n    new Paragraph({\r\n      text: \"* S-Band Receiver Test Results:\",\r\n      heading: HeadingLevel.HEADING_2,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test completed: ${results.rxTest.completed ? \"Yes\" : \"No\"}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Test status: ${results.rxTest.status}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n  \r\n  // Add error message if the test failed\r\n  if (results.rxTest.error) {\r\n    paragraphs.push(\r\n      new Paragraph({\r\n        text: `Error: ${results.rxTest.error}`,\r\n        spacing: { after: 100 }\r\n      })\r\n    );\r\n  }\r\n  \r\n  // Add separator\r\n  paragraphs.push(\r\n    new Paragraph({\r\n      text: \"--------------------------------------------------------------------\",\r\n      spacing: { after: 200, before: 200 }\r\n    })\r\n  );\r\n  \r\n  return paragraphs;\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3872, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/uhfCheckout.ts"],"sourcesContent":["// src/services/checkout/uhfCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the UHF checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (enables specific UHF tests)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runUHFCheckout(\r\n  sock: any, \r\n  options: { testTransmitter: boolean; testReceiver: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      telemetry: {\r\n        boardTemperature: '',\r\n        paTemperature: '',\r\n        lastRssi: '',\r\n        lastRferr: '',\r\n        txCount: '',\r\n        rxCount: '',\r\n        txBytes: '',\r\n        rxBytes: '',\r\n        activeConf: '',\r\n        bootCount: '',\r\n        bootCause: '',\r\n        lastContact: '',\r\n        bgndRssi: '',\r\n        txDuty: '',\r\n        totalTxCount: '',\r\n        totalRxCount: '',\r\n        totalTxBytes: '',\r\n        totalRxBytes: ''\r\n      },\r\n      system: {\r\n        rssiOffset: '',\r\n        maxTemp: '',\r\n        bgndrssiEma: '',\r\n        cspNode: '',\r\n        i2cEn: '',\r\n        canEn: '',\r\n        extpptEn: '',\r\n        ledEn: '',\r\n        kissUsart: '',\r\n        goshUsart: '',\r\n        i2cAddr: '',\r\n        i2cKhz: '',\r\n        canKhz: '',\r\n        rebootIn: '',\r\n        txInhibit: '',\r\n        logStore: '',\r\n        txPwr: '',\r\n        maxTxTime: '',\r\n        maxIdleTime: ''\r\n      },\r\n      receiver: {\r\n        frequency: '',\r\n        baudrate: '',\r\n        modindex: '',\r\n        guard: '',\r\n        pllrang: '',\r\n        mode: '',\r\n        cspHmac: '',\r\n        cspRs: '',\r\n        cspCrc: '',\r\n        cspRand: '',\r\n        hmacKeys: ['', '', '', ''],\r\n        ax25Call: ['', '', ''],\r\n        bandwidth: '',\r\n        afcrange: ''\r\n      },\r\n      transmitter: {\r\n        frequency: '',\r\n        baudrate: '',\r\n        modindex: '',\r\n        guard: '',\r\n        pllrang: '',\r\n        mode: '',\r\n        cspHmac: '',\r\n        cspRs: '',\r\n        cspCrc: '',\r\n        cspRand: '',\r\n        hmacKeys: ['', '', '', ''],\r\n        ax25Call: ['', '', ''],\r\n        preamb: '',\r\n        preamblen: '',\r\n        preambflags: '',\r\n        intfrm: '',\r\n        intfrmlen: '',\r\n        intfrmflags: '',\r\n        rssibusy: '',\r\n        kupDelay: '',\r\n        paLevel: '',\r\n        ber: ''\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n\r\n    // Step 1: Initialize test (5%)\r\n    onProgress('Initializing UHF Checkout', 5);\r\n    \r\n    // Define all telemetry variables based on the Python script\r\n    const telemetryVars = [\r\n      \"OBC2_Uhf_BoardTemperature\", \"OBC2_Uhf_PaTemperature\", \"OBC2_Uhf_LastRssi\",\r\n      \"OBC2_Uhf_LastRferr\", \"OBC2_Uhf_TxCount\", \"OBC2_Uhf_RxCount\", \"OBC2_Uhf_TxBytes\",\r\n      \"OBC2_Uhf_RxBytes\", \"OBC2_Uhf_ActiveConf\", \"OBC2_Uhf_BootCount\", \"OBC2_Uhf_BootCause\",\r\n      \"OBC2_Uhf_LastContact\", \"OBC2_Uhf_BgndRssi\", \"OBC2_Uhf_TxDuty\", \"OBC2_Uhf_TotalTxCount\",\r\n      \"OBC2_Uhf_TotalRxCount\", \"OBC2_Uhf_TotalTxBytes\", \"OBC2_Uhf_TotalRxBytes\"\r\n    ];\r\n\r\n    const sysVars = [\r\n      \"UHF_rssi_offset\", \"UHF_max_temp\", \"UHF_bgndrssi_ema\", \"UHF_csp_node\", \"UHF_i2c_en\", \"UHF_can_en\",\r\n      \"UHF_extppt_en\", \"UHF_led_en\", \"UHF_kiss_usart\", \"UHF_gosh_usart\", \"UHF_i2c_addr\", \"UHF_i2c_khz\",\r\n      \"UHF_can_khz\", \"UHF_reboot_in\", \"UHF_tx_inhibit\", \"UHF_log_store\", \"UHF_tx_pwr\", \"UHF_max_tx_time\",\r\n      \"UHF_max_idle_time\"\r\n    ];\r\n\r\n    const rxVars = [\r\n      \"UHF_rx_freq\", \"UHF_rx_baud\", \"UHF_rx_modindex\", \"UHF_rx_guard\", \"UHF_rx_pllrang\", \"UHF_rx_mode\",\r\n      \"UHF_rx_csp_hmac\", \"UHF_rx_csp_rs\", \"UHF_rx_csp_crc\", \"UHF_rx_csp_rand\", \"UHF_rx_csp_hmac_key_0\",\r\n      \"UHF_rx_csp_hmac_key_1\", \"UHF_rx_csp_hmac_key_2\", \"UHF_rx_csp_hmac_key_3\", \"UHF_rx_ax25_call_0\",\r\n      \"UHF_rx_ax25_call_1\", \"UHF_rx_ax25_call_2\", \"UHF_rx_bw\", \"UHF_rx_afcrange\"\r\n    ];\r\n\r\n    const txVars = [\r\n      \"UHF_tx_freq\", \"UHF_tx_baud\", \"UHF_tx_modindex\", \"UHF_tx_guard\", \"UHF_tx_pllrang\", \"UHF_tx_mode\",\r\n      \"UHF_tx_csp_hmac\", \"UHF_tx_csp_rs\", \"UHF_tx_csp_crc\", \"UHF_tx_csp_rand\", \"UHF_tx_csp_hmac_key_0\",\r\n      \"UHF_tx_csp_hmac_key_1\", \"UHF_tx_csp_hmac_key_2\", \"UHF_tx_csp_hmac_key_3\", \"UHF_tx_ax25_call_0\",\r\n      \"UHF_tx_ax25_call_1\", \"UHF_tx_ax25_call_2\", \"UHF_tx_preamb\", \"UHF_tx_preamblen\", \"UHF_tx_preambflags\",\r\n      \"UHF_tx_intfrm\", \"UHF_tx_intfrmlen\", \"UHF_tx_intfrmflags\", \"UHF_tx_rssibusy\", \"UHF_tx_kup_delay\",\r\n      \"UHF_tx_pa_level\", \"UHF_tx_ber\"\r\n    ];\r\n    \r\n    // Step 2: Send downlink type command (20%)\r\n    onProgress('Setting UHF Downlink Type', 20);\r\n\r\n    try {\r\n      // Similar to the Python implementation, we need to send the same command multiple times\r\n      for (let i = 0; i < 4; i++) {\r\n        await mccifSet(sock, \"OBC2_Downlink_Type\", 3);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds between commands\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error setting downlink type:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read telemetry data (40%)\r\n    onProgress('Reading UHF Telemetry', 40);\r\n\r\n    try {\r\n      const telemetryResults = await mccifRead(sock, telemetryVars);\r\n      \r\n      // Process and store results in the structured format\r\n      const telemetryValues = telemetryResults.map(safeParseValue);\r\n      allResults.push(...telemetryValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.telemetry.boardTemperature = telemetryValues[0];\r\n      results.telemetry.paTemperature = telemetryValues[1];\r\n      results.telemetry.lastRssi = telemetryValues[2];\r\n      results.telemetry.lastRferr = telemetryValues[3];\r\n      results.telemetry.txCount = telemetryValues[4];\r\n      results.telemetry.rxCount = telemetryValues[5];\r\n      results.telemetry.txBytes = telemetryValues[6];\r\n      results.telemetry.rxBytes = telemetryValues[7];\r\n      results.telemetry.activeConf = telemetryValues[8];\r\n      results.telemetry.bootCount = telemetryValues[9];\r\n      results.telemetry.bootCause = telemetryValues[10];\r\n      results.telemetry.lastContact = telemetryValues[11];\r\n      results.telemetry.bgndRssi = telemetryValues[12];\r\n      results.telemetry.txDuty = telemetryValues[13];\r\n      results.telemetry.totalTxCount = telemetryValues[14];\r\n      results.telemetry.totalRxCount = telemetryValues[15];\r\n      results.telemetry.totalTxBytes = telemetryValues[16];\r\n      results.telemetry.totalRxBytes = telemetryValues[17];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF telemetry:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      telemetryVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 4: Read system configuration (60%)\r\n    onProgress('Reading UHF System Configuration', 60);\r\n\r\n    try {\r\n      const sysResults = await mccifRead(sock, sysVars);\r\n      \r\n      // Process and store results\r\n      const sysValues = sysResults.map(safeParseValue);\r\n      allResults.push(...sysValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.system.rssiOffset = sysValues[0];\r\n      results.system.maxTemp = sysValues[1];\r\n      results.system.bgndrssiEma = sysValues[2];\r\n      results.system.cspNode = sysValues[3];\r\n      results.system.i2cEn = sysValues[4];\r\n      results.system.canEn = sysValues[5];\r\n      results.system.extpptEn = sysValues[6];\r\n      results.system.ledEn = sysValues[7];\r\n      results.system.kissUsart = sysValues[8];\r\n      results.system.goshUsart = sysValues[9];\r\n      results.system.i2cAddr = sysValues[10];\r\n      results.system.i2cKhz = sysValues[11];\r\n      results.system.canKhz = sysValues[12];\r\n      results.system.rebootIn = sysValues[13];\r\n      results.system.txInhibit = sysValues[14];\r\n      results.system.logStore = sysValues[15];\r\n      results.system.txPwr = sysValues[16];\r\n      results.system.maxTxTime = sysValues[17];\r\n      results.system.maxIdleTime = sysValues[18];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF system configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      sysVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 5: Read receiver configuration (80%)\r\n    onProgress('Reading UHF Receiver Configuration', 80);\r\n\r\n    try {\r\n      const rxResults = await mccifRead(sock, rxVars);\r\n      \r\n      // Process and store results\r\n      const rxValues = rxResults.map(safeParseValue);\r\n      allResults.push(...rxValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.receiver.frequency = rxValues[0];\r\n      results.receiver.baudrate = rxValues[1];\r\n      results.receiver.modindex = rxValues[2];\r\n      results.receiver.guard = rxValues[3];\r\n      results.receiver.pllrang = rxValues[4];\r\n      results.receiver.mode = rxValues[5];\r\n      results.receiver.cspHmac = rxValues[6];\r\n      results.receiver.cspRs = rxValues[7];\r\n      results.receiver.cspCrc = rxValues[8];\r\n      results.receiver.cspRand = rxValues[9];\r\n      results.receiver.hmacKeys[0] = rxValues[10];\r\n      results.receiver.hmacKeys[1] = rxValues[11];\r\n      results.receiver.hmacKeys[2] = rxValues[12];\r\n      results.receiver.hmacKeys[3] = rxValues[13];\r\n      results.receiver.ax25Call[0] = rxValues[14];\r\n      results.receiver.ax25Call[1] = rxValues[15];\r\n      results.receiver.ax25Call[2] = rxValues[16];\r\n      results.receiver.bandwidth = rxValues[17];\r\n      results.receiver.afcrange = rxValues[18];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF receiver configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      rxVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Step 6: Read transmitter configuration (100%)\r\n    onProgress('Reading UHF Transmitter Configuration', 100);\r\n\r\n    try {\r\n      const txResults = await mccifRead(sock, txVars);\r\n      \r\n      // Process and store results\r\n      const txValues = txResults.map(safeParseValue);\r\n      allResults.push(...txValues);\r\n      \r\n      // Map the values to their respective properties\r\n      results.transmitter.frequency = txValues[0];\r\n      results.transmitter.baudrate = txValues[1];\r\n      results.transmitter.modindex = txValues[2];\r\n      results.transmitter.guard = txValues[3];\r\n      results.transmitter.pllrang = txValues[4];\r\n      results.transmitter.mode = txValues[5];\r\n      results.transmitter.cspHmac = txValues[6];\r\n      results.transmitter.cspRs = txValues[7];\r\n      results.transmitter.cspCrc = txValues[8];\r\n      results.transmitter.cspRand = txValues[9];\r\n      results.transmitter.hmacKeys[0] = txValues[10];\r\n      results.transmitter.hmacKeys[1] = txValues[11];\r\n      results.transmitter.hmacKeys[2] = txValues[12];\r\n      results.transmitter.hmacKeys[3] = txValues[13];\r\n      results.transmitter.ax25Call[0] = txValues[14];\r\n      results.transmitter.ax25Call[1] = txValues[15];\r\n      results.transmitter.ax25Call[2] = txValues[16];\r\n      results.transmitter.preamb = txValues[17];\r\n      results.transmitter.preamblen = txValues[18];\r\n      results.transmitter.preambflags = txValues[19];\r\n      results.transmitter.intfrm = txValues[20];\r\n      results.transmitter.intfrmlen = txValues[21];\r\n      results.transmitter.intfrmflags = txValues[22];\r\n      results.transmitter.rssibusy = txValues[23];\r\n      results.transmitter.kupDelay = txValues[24];\r\n      results.transmitter.paLevel = txValues[25];\r\n      results.transmitter.ber = txValues[26];\r\n    } catch (error) {\r\n      console.error(\"Error reading UHF transmitter configuration:\", error);\r\n      \r\n      // Fill with N.A. if there is an error\r\n      txVars.forEach(() => allResults.push(\"N.A.\"));\r\n    }\r\n\r\n    // Store all raw results\r\n    results.allResults = allResults;\r\n    \r\n    // Return the processed results\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error during UHF checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4250, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/uhfReport.ts"],"sourcesContent":["// src/services/reports/uhfReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for UHF checkout results\r\n * \r\n * @param results The UHF test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateUHFReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `UHF_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"UHF Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // UHF Telemetry section\r\n        new Paragraph({\r\n          text: \"* UHF Telemetry :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createTelemetrySection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF System Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF System Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createSystemSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF Receiver Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF Receiver Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createReceiverSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // UHF Transmitter Configuration section\r\n        new Paragraph({\r\n          text: \"* UHF Transmitter Configuration :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createTransmitterSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function for the telemetry section\r\nfunction createTelemetrySection(results: any): Paragraph[] {\r\n  const telemetry = results.telemetry;\r\n  return [\r\n    new Paragraph({\r\n      text: `Board temperature (near MCU)                : ${telemetry.boardTemperature} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `PA temperature (near PA)                    : ${telemetry.paTemperature} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Last received RSSI                          : ${telemetry.lastRssi}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Last received RF error                      : ${telemetry.lastRferr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx packets since reboot           : ${telemetry.txCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx packets since reboot           : ${telemetry.rxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx bytes since reboot             : ${telemetry.txBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx bytes since reboot             : ${telemetry.rxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The currently active system configuration   : ${telemetry.activeConf}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The number of reboots                       : ${telemetry.bootCount}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The cause of the reboot                     : ${telemetry.bootCause}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The timestamp of the last valid packet      : ${telemetry.lastContact}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The current background RSSI level           : ${telemetry.bgndRssi}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Total TX duty time since reboot             : ${telemetry.txDuty}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx packets (total)                : ${telemetry.totalTxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx packets (total)                : ${telemetry.totalRxCount} packets`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of tx bytes (total)                  : ${telemetry.totalTxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of rx bytes (total)                  : ${telemetry.totalRxBytes} bytes`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the system configuration section\r\nfunction createSystemSection(results: any): Paragraph[] {\r\n  const system = results.system;\r\n  return [\r\n    new Paragraph({\r\n      text: `Sets the RSSI indicator offset              : ${system.rssiOffset}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Maximum temperature                         : ${system.maxTemp} degree C`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Exponential moving average (alpha value)    : ${system.bgndrssiEma}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `CSP address of the AX100 module             : ${system.cspNode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables I2C                                 : ${system.i2cEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables CAN                                 : ${system.canEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enables push-to-talk driver (GS100 only)    : ${system.extpptEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set to zero to disable the on-board leds    : ${system.ledEn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set which USART to use for KISS interface   : ${system.kissUsart}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Set which USART to use for GOSH interface   : ${system.goshUsart}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The non-shifted I2C address of the system   : ${system.i2cAddr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The speed of the I2C master                 : ${system.i2cKhz}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The speed of the CAN bus                    : ${system.canKhz}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds before automatic reboot   : ${system.rebootIn}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds the transmitter shutdown  : ${system.txInhibit}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable log-system FRAM storage backend      : ${system.logStore}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `TX power level                              : ${system.txPwr}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Maximum seconds to key up the transmitter   : ${system.maxTxTime} seconds`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Number of seconds the receiver can be idle  : ${system.maxIdleTime} seconds`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the receiver configuration section\r\nfunction createReceiverSection(results: any): Paragraph[] {\r\n  const receiver = results.receiver;\r\n  return [\r\n    new Paragraph({\r\n      text: `Frequency in [Hz]                           : ${receiver.frequency} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Baudrate                                    : ${receiver.baudrate} bps`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Same as the tx_modindex                     : ${receiver.modindex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `RX guard in [ms]                            : ${receiver.guard} ms`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Startup value of the PLLRANGE register      : ${receiver.pllrang}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Framing mode                                : ${receiver.mode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable HMAC (checksum and authentication)   : ${receiver.cspHmac}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable Reed-Solomon                         : ${receiver.cspRs}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CRC-32                               : ${receiver.cspCrc}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CCSDS randomization                  : ${receiver.cspRand}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `HMAC key (needs to match transmitter)       : ${receiver.hmacKeys[0]}${receiver.hmacKeys[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The call sign                               : ${receiver.ax25Call[0]}${receiver.ax25Call[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Receiver bandwidth in Hz                    : ${receiver.bandwidth} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Sets the AFC pull-in range in Hz            : ${receiver.afcrange} Hz`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n// Helper function for the transmitter configuration section\r\nfunction createTransmitterSection(results: any): Paragraph[] {\r\n  const transmitter = results.transmitter;\r\n  return [\r\n    new Paragraph({\r\n      text: `Frequency in [Hz]                           : ${transmitter.frequency} Hz`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Baudrate                                    : ${transmitter.baudrate} bps`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Same as the tx_modindex                     : ${transmitter.modindex}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `RX guard in [ms]                            : ${transmitter.guard} ms`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Startup value of the PLLRANGE register      : ${transmitter.pllrang}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Framing mode                                : ${transmitter.mode}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable HMAC (checksum and authentication)   : ${transmitter.cspHmac}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable Reed-Solomon                         : ${transmitter.cspRs}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CRC-32                               : ${transmitter.cspCrc}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Enable CCSDS randomization                  : ${transmitter.cspRand}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `HMAC key (needs to match transmitter)       : ${transmitter.hmacKeys[0]}${transmitter.hmacKeys[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The call sign                               : ${transmitter.ax25Call[0]}${transmitter.ax25Call[1]}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The byte to use as preamble                 : ${transmitter.preamb}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The length of the preamble in bytes         : ${transmitter.preamblen} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The flags to use for the preamble           : ${transmitter.preambflags}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The byte to use between two frames          : ${transmitter.intfrm}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The number of bytes put between two frames  : ${transmitter.intfrmlen} bytes`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The flags to use for the intfrm bytes       : ${transmitter.intfrmflags}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Busy when the RSSI is above this value      : ${transmitter.rssibusy}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `An additional delay of the first frame      : ${transmitter.kupDelay}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `The input level for the PA                  : ${transmitter.paLevel}`,\r\n      spacing: { after: 100 }\r\n    }),\r\n    new Paragraph({\r\n      text: `Injects random bit-errors                   : ${transmitter.ber}`,\r\n      spacing: { after: 100 }\r\n    })\r\n  ];\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4888, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/pcsCheckout.ts"],"sourcesContent":["// src/services/checkout/pcsCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Helper function to safely parse integers\r\n * @param value String value to parse\r\n * @returns Parsed integer or 0 if invalid\r\n */\r\nfunction safeParseInt(value: string): number {\r\n    if (!value || value === 'undefined' || value === 'null') return 0;\r\n    const parsed = parseInt(value);\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  }\r\n  \r\n  /**\r\n   * Helper function to check memory test results\r\n   * @param values Array of memory test values\r\n   * @returns \"[PASS]\" or \"[FAIL]\" based on comparison\r\n   */\r\n  function memCheck(values: string[]): string {\r\n    // Check if we have all required values\r\n    if (values.length < 8) return \"[FAIL]\";\r\n    \r\n    try {\r\n      // Convert to numbers for comparison using safe parsing\r\n      const initialWriteSuccess = safeParseInt(values[0]);\r\n      const initialReadSuccess = safeParseInt(values[1]);\r\n      const initialWriteFail = safeParseInt(values[2]);\r\n      const initialReadFail = safeParseInt(values[3]);\r\n      \r\n      const finalWriteSuccess = safeParseInt(values[4]);\r\n      const finalReadSuccess = safeParseInt(values[5]);\r\n      const finalWriteFail = safeParseInt(values[6]);\r\n      const finalReadFail = safeParseInt(values[7]);\r\n      \r\n      // Check success counts increased, fail counts didn't change\r\n      if (finalWriteSuccess > initialWriteSuccess &&\r\n          finalReadSuccess > initialReadSuccess &&\r\n          finalWriteFail === initialWriteFail &&\r\n          finalReadFail === initialReadFail) {\r\n        return \"[PASS]\";\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error comparing memory test values:\", error);\r\n    }\r\n    \r\n    return \"[FAIL]\";\r\n  }\r\n\r\n/**\r\n * Run the PCS checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param enableSDTest Whether to test the SD card functionality\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runPCSCheckout(\r\n  sock: any, \r\n  enableSDTest: boolean,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      on: {\r\n        voltage: '',\r\n        current: '',\r\n        pass: false\r\n      },\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      timeSync: {\r\n        before: '',\r\n        after: ''\r\n      },\r\n      status: {\r\n        time: '',\r\n        uptime: '',\r\n        storePeriod: '',\r\n        uptimeSession: '',\r\n        resetCount: '',\r\n        resetSource: ''\r\n      },\r\n      vi: {\r\n        ps3v3I: '',\r\n        ps5I: ''\r\n      },\r\n      sdCard: {\r\n        enabled: enableSDTest,\r\n        before: {\r\n          writeSuccess: '',\r\n          readSuccess: '',\r\n          writeFail: '',\r\n          readFail: ''\r\n        },\r\n        after: {\r\n          writeSuccess: '',\r\n          readSuccess: '',\r\n          writeFail: '',\r\n          readFail: ''\r\n        },\r\n        pass: false\r\n      },\r\n      statusAfterTest: {\r\n        time: '',\r\n        uptime: '',\r\n        storePeriod: '',\r\n        uptimeSession: '',\r\n        resetCount: '',\r\n        resetSource: ''\r\n      },\r\n      off: {\r\n        voltage: '',\r\n        current: '',\r\n        pass: false\r\n      },\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Turn on PCS (10%)\r\n    onProgress('Powering on PCS', 10);\r\n    await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 7);\r\n    // Allow time for power up\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n    // Step 2: Read voltage and current (20%)\r\n    onProgress('Reading Voltage and Current', 20);\r\n    const pcs_vi = [\"HEPS1_PDM2_PCS_V\", \"HEPS1_PDM2_PCS_I\"];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, pcs_vi);\r\n      results.on.voltage = safeParseValue(viResults[0]);\r\n      results.on.current = safeParseValue(viResults[1]);\r\n      \r\n      // Check if voltage is within acceptable range (9-13V)\r\n      const voltage = parseFloat(results.on.voltage);\r\n      results.on.pass = !isNaN(voltage) && voltage >= 9 && voltage <= 13;\r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Only continue if voltage check passed\r\n    if (results.on.pass) {\r\n      // Step 3: Enable communication and read firmware (30%)\r\n      onProgress('Reading Firmware Version', 30);\r\n      await mccifSet(sock, \"OBC1_Intercomm_Template\", 32767);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for communication to establish\r\n      \r\n      const fw_var = [\"PCS_FW_Ver_Major\", \"PCS_FW_Ver_Minor\", \"PCS_FW_Ver_Patch\"];\r\n      try {\r\n        const fwResults = await mccifRead(sock, fw_var);\r\n        results.firmware.major = safeParseValue(fwResults[0]);\r\n        results.firmware.minor = safeParseValue(fwResults[1]);\r\n        results.firmware.patch = safeParseValue(fwResults[2]);\r\n      } catch (error) {\r\n        console.error(\"Error reading firmware version:\", error);\r\n      }\r\n\r\n      // Step 4: Sync time (40%)\r\n      onProgress('Synchronizing Time', 40);\r\n      try {\r\n        // Read time before sync\r\n        const timeBeforeSync = await mccifRead(sock, [\"PCS_Time\"]);\r\n        results.timeSync.before = safeParseValue(timeBeforeSync[0]);\r\n        \r\n        // Set current time\r\n        await mccifSet(sock, \"PCS_Time\", \"NOW\");\r\n        \r\n        // Read time after sync\r\n        const timeAfterSync = await mccifRead(sock, [\"PCS_Time\"]);\r\n        results.timeSync.after = safeParseValue(timeAfterSync[0]);\r\n      } catch (error) {\r\n        console.error(\"Error during time sync:\", error);\r\n      }\r\n\r\n      // Step 5: Read system status (50%)\r\n      onProgress('Reading System Status', 50);\r\n      const time_var = [\"PCS_Time\", \"PCS_Uptime_Total\", \"PCS_StorePeriod\", \"PCS_Uptime_Session\", \"PCS_ResetCount\", \"PCS_ResetSource\"];\r\n      \r\n      try {\r\n        const statusResults = await mccifRead(sock, time_var);\r\n        results.status.time = safeParseValue(statusResults[0]);\r\n        results.status.uptime = safeParseValue(statusResults[1]);\r\n        results.status.storePeriod = safeParseValue(statusResults[2]);\r\n        results.status.uptimeSession = safeParseValue(statusResults[3]);\r\n        results.status.resetCount = safeParseValue(statusResults[4]);\r\n        results.status.resetSource = safeParseValue(statusResults[5]);\r\n      } catch (error) {\r\n        console.error(\"Error reading system status:\", error);\r\n      }\r\n\r\n      // Step 6: Read voltage and current from power supply (60%)\r\n      onProgress('Reading Power Supply Values', 60);\r\n      const vi_var = [\"PCS_PS_3V3_PCS1_I\", \"PCS_PS_5_PCS1_I\"];\r\n      \r\n      try {\r\n        const powerResults = await mccifRead(sock, vi_var);\r\n        results.vi.ps3v3I = safeParseValue(powerResults[0]);\r\n        results.vi.ps5I = safeParseValue(powerResults[1]);\r\n      } catch (error) {\r\n        console.error(\"Error reading power supply values:\", error);\r\n      }\r\n\r\n      // Step 7: SD Card test if enabled (70-80%)\r\n      if (enableSDTest) {\r\n        onProgress('Testing SD Card', 70);\r\n        const sd_var = [\"PCS_SD_WriteSuccess\", \"PCS_SD_ReadSuccess\", \"PCS_SD_WriteFail\", \"PCS_SD_ReadFail\"];\r\n        \r\n        try {\r\n          // Read initial SD card counters\r\n          const sdInitialResults = await mccifRead(sock, sd_var);\r\n          results.sdCard.before.writeSuccess = safeParseValue(sdInitialResults[0]);\r\n          results.sdCard.before.readSuccess = safeParseValue(sdInitialResults[1]);\r\n          results.sdCard.before.writeFail = safeParseValue(sdInitialResults[2]);\r\n          results.sdCard.before.readFail = safeParseValue(sdInitialResults[3]);\r\n          \r\n          // Run SD card test\r\n          await mccifSet(sock, \"PCS_SD_Control\", 6);\r\n          // Wait for the test to complete\r\n          await new Promise(resolve => setTimeout(resolve, 3000));\r\n          \r\n          // Read final SD card counters\r\n          const sdFinalResults = await mccifRead(sock, sd_var);\r\n          results.sdCard.after.writeSuccess = safeParseValue(sdFinalResults[0]);\r\n          results.sdCard.after.readSuccess = safeParseValue(sdFinalResults[1]);\r\n          results.sdCard.after.writeFail = safeParseValue(sdFinalResults[2]);\r\n          results.sdCard.after.readFail = safeParseValue(sdFinalResults[3]);\r\n          \r\n          // Check if the test passed\r\n          const allValues = [\r\n            results.sdCard.before.writeSuccess,\r\n            results.sdCard.before.readSuccess,\r\n            results.sdCard.before.writeFail,\r\n            results.sdCard.before.readFail,\r\n            results.sdCard.after.writeSuccess,\r\n            results.sdCard.after.readSuccess,\r\n            results.sdCard.after.writeFail,\r\n            results.sdCard.after.readFail\r\n          ];\r\n          \r\n          results.sdCard.pass = memCheck(allValues) === \"[PASS]\";\r\n        } catch (error) {\r\n          console.error(\"Error during SD card test:\", error);\r\n        }\r\n      } else {\r\n        results.sdCard.enabled = false;\r\n        results.sdCard.pass = false;\r\n      }\r\n\r\n      // Step 8: Read system status again (90%)\r\n      onProgress('Reading Final System Status', 90);\r\n      try {\r\n        const finalStatusResults = await mccifRead(sock, time_var);\r\n        results.statusAfterTest.time = safeParseValue(finalStatusResults[0]);\r\n        results.statusAfterTest.uptime = safeParseValue(finalStatusResults[1]);\r\n        results.statusAfterTest.storePeriod = safeParseValue(finalStatusResults[2]);\r\n        results.statusAfterTest.uptimeSession = safeParseValue(finalStatusResults[3]);\r\n        results.statusAfterTest.resetCount = safeParseValue(finalStatusResults[4]);\r\n        results.statusAfterTest.resetSource = safeParseValue(finalStatusResults[5]);\r\n      } catch (error) {\r\n        console.error(\"Error reading final system status:\", error);\r\n      }\r\n\r\n      // Close communication\r\n      await mccifSet(sock, \"OBC1_Intercomm_Template\", 31775);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    }\r\n\r\n    // Step 9: Power off and check off state (100%)\r\n    onProgress('Powering off PCS', 100);\r\n    await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 7);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for power down\r\n    \r\n    try {\r\n      const offResults = await mccifRead(sock, pcs_vi);\r\n      results.off.voltage = safeParseValue(offResults[0]);\r\n      results.off.current = safeParseValue(offResults[1]);\r\n      \r\n      // Check if voltage is near 0 when off\r\n      const voltage = parseFloat(results.off.voltage);\r\n      results.off.pass = !isNaN(voltage) && voltage < 1.0;\r\n    } catch (error) {\r\n      console.error(\"Error reading off voltage and current:\", error);\r\n    }\r\n\r\n    // Complete checkout\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during PCS checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5181, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/pcsReport.ts"],"sourcesContent":["// src/services/reports/pcsReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for PCS checkout results\r\n * \r\n * @param results The PCS test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generatePCSReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `PCS_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"PCS Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current On Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current On Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Voltage : ${formatFloat(results.on.voltage)} V    ${results.on.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Current : ${formatFloat(results.on.current)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current PCS Firmware Version    : ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Time Sync section\r\n        new Paragraph({\r\n          text: \"* Time Sync:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `BEFORE update PCS Time  : ${results.timeSync.before} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `AFTER update PCS Time   : ${results.timeSync.after} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // PCS Checkout Summary section\r\n        new Paragraph({\r\n          text: \"* PCS Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Time            : ${results.status.time} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Uptime          : ${results.status.uptime} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS StorePeriod     : ${results.status.storePeriod} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Uptime Session  : ${results.status.uptimeSession} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Reset Count     : ${results.status.resetCount}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Reset Source    : ${results.status.resetSource}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS PS 3V3 PCS1 I   : ${padString(results.vi.ps3v3I, 4)} mA`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS PS 5 PCS1 I     : ${padString(results.vi.ps5I, 4)} mA`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Memory Test Summary section\r\n        new Paragraph({\r\n          text: \"* Memory Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create memory test paragraphs\r\n        ...createMemoryTestParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // PCS Checkout Summary After Test section\r\n        new Paragraph({\r\n          text: \"* PCS Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Time            : ${results.statusAfterTest.time} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Uptime          : ${results.statusAfterTest.uptime} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS StorePeriod     : ${results.statusAfterTest.storePeriod} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Uptime Session  : ${results.statusAfterTest.uptimeSession} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Reset Count     : ${results.statusAfterTest.resetCount}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Reset Source    : ${results.statusAfterTest.resetSource}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current Off Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Off Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Voltage : ${formatFloat(results.off.voltage)} V    ${results.off.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `PCS Current : ${formatFloat(results.off.current)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create memory test paragraphs\r\nfunction createMemoryTestParagraphs(results: any): Paragraph[] {\r\n  if (!results.sdCard.enabled) {\r\n    return [new Paragraph('SD Card test was not performed')];\r\n  }\r\n  \r\n  return [\r\n    new Paragraph(`SD Card : -- ${results.sdCard.pass ? \"[PASS]\" : \"[FAIL]\"}`),\r\n    new Paragraph(`Write Success before test   : ${padString(results.sdCard.before.writeSuccess, 4)}`),\r\n    new Paragraph(`Read Success before test    : ${padString(results.sdCard.before.readSuccess, 4)}`),\r\n    new Paragraph(`Write Fail before test      : ${padString(results.sdCard.before.writeFail, 4)}`),\r\n    new Paragraph(`Read Fail before test       : ${padString(results.sdCard.before.readFail, 4)}`),\r\n    new Paragraph(`Write Success after test    : ${padString(results.sdCard.after.writeSuccess, 4)}`),\r\n    new Paragraph(`Read Success after test     : ${padString(results.sdCard.after.readSuccess, 4)}`),\r\n    new Paragraph(`Write Fail after test       : ${padString(results.sdCard.after.writeFail, 4)}`),\r\n    new Paragraph(`Read Fail after test        : ${padString(results.sdCard.after.readFail, 4)}`)\r\n  ];\r\n}\r\n\r\n/**\r\n * Format a floating point value with 3 decimal places\r\n * \r\n * @param value The value to format\r\n * @returns Formatted string with 3 decimal places\r\n */\r\nfunction formatFloat(value: string): string {\r\n  try {\r\n    return parseFloat(value).toFixed(3);\r\n  } catch (error) {\r\n    return value;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility function to pad a string to a specific length\r\n * \r\n * @param value The string value to pad\r\n * @param length The desired length\r\n * @returns The padded string\r\n */\r\nfunction padString(value: string, length: number): string {\r\n  if (!value) return ''.padStart(length, ' ');\r\n  return value.padStart(length, ' ');\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5609, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/xbandCheckout.ts"],"sourcesContent":["// src/services/checkout/xbandCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the X-Band checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runXBandCheckout(\r\n  sock: any,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      voltages: {\r\n        pcs: { value: '', pass: false },\r\n        xband: { value: '', pass: false },\r\n        xbandOff: { value: '', pass: false }\r\n      },\r\n      currents: {\r\n        pcs: '',\r\n        xband: '',\r\n        xbandOff: ''\r\n      },\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Initialize (10%)\r\n    onProgress('Initializing X-Band Test', 10);\r\n    \r\n    // Step 2: Enable PCS (20%)\r\n    onProgress('Enabling PCS', 20);\r\n    \r\n    await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 7);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    // Step 3: Check PCS voltage and current (30%)\r\n    onProgress('Checking PCS Voltage and Current', 30);\r\n    \r\n    const pcsVI = [\"HEPS1_PDM2_PCS_V\", \"HEPS1_PDM2_PCS_I\"];\r\n    const pcsResults = await mccifRead(sock, pcsVI);\r\n    \r\n    // Parse the results\r\n    const pcsV = safeParseValue(pcsResults[0]);\r\n    const pcsI = safeParseValue(pcsResults[1]);\r\n    \r\n    results.voltages.pcs.value = pcsV;\r\n    results.currents.pcs = pcsI;\r\n    \r\n    // Check if voltage is within expected range (around 12V)\r\n    const pcsVoltage = parseFloat(pcsV);\r\n    results.voltages.pcs.pass = !isNaN(pcsVoltage) && pcsVoltage >= 11.5 && pcsVoltage <= 12.5;\r\n    \r\n    // If PCS voltage check passes, continue with X-Band tests\r\n    if (results.voltages.pcs.pass) {\r\n      // Step 4: Enable intercomm (40%)\r\n      onProgress('Enabling Intercomm', 40);\r\n      \r\n      await mccifSet(sock, \"OBC1_Intercomm_Template\", 32767);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Step 5: Enable X-Band (50%)\r\n      onProgress('Enabling X-Band', 50);\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 14);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Check X-Band voltage and current\r\n      const xbandVI = [\"HEPS1_PDM1_X-BAND_V\", \"HEPS1_PDM1_X-BAND_I\"];\r\n      const xbandResults = await mccifRead(sock, xbandVI);\r\n      \r\n      // Parse the results\r\n      const xbandV = safeParseValue(xbandResults[0]);\r\n      const xbandI = safeParseValue(xbandResults[1]);\r\n      \r\n      results.voltages.xband.value = xbandV;\r\n      results.currents.xband = xbandI;\r\n      \r\n      // Check if voltage is within expected range (around 15V)\r\n      const xbandVoltage = parseFloat(xbandV);\r\n      results.voltages.xband.pass = !isNaN(xbandVoltage) && xbandVoltage >= 14.5 && xbandVoltage <= 15.5;\r\n      \r\n      // Step 6: Test X-Band control (60%)\r\n      onProgress('Testing X-Band Control', 60);\r\n      \r\n      // Send control commands\r\n      await mccifSet(sock, \"PCS_Xband_Control\", 8);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      await mccifSet(sock, \"PCS_Xband_Control\", 2);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Check X-Band voltage and current after control commands\r\n      const xbandAfterControlResults = await mccifRead(sock, xbandVI);\r\n      \r\n      // Step 7: Test X-Band complete control (70%)\r\n      onProgress('Testing X-Band Complete Control', 70);\r\n      \r\n      await mccifSet(sock, \"PCS_Xband_Control\", 7);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Step 8: Turn off X-Band (80%)\r\n      onProgress('Turning Off X-Band', 80);\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 14);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Check X-Band voltage and current when off\r\n      const xbandOffResults = await mccifRead(sock, xbandVI);\r\n      \r\n      // Parse the results\r\n      const xbandOffV = safeParseValue(xbandOffResults[0]);\r\n      const xbandOffI = safeParseValue(xbandOffResults[1]);\r\n      \r\n      results.voltages.xbandOff.value = xbandOffV;\r\n      results.currents.xbandOff = xbandOffI;\r\n      \r\n      // Check if voltage is near zero when off\r\n      const xbandOffVoltage = parseFloat(xbandOffV);\r\n      results.voltages.xbandOff.pass = !isNaN(xbandOffVoltage) && xbandOffVoltage < 1.0;\r\n      \r\n      // Step 9: Turn off PCS (90%)\r\n      onProgress('Turning Off PCS', 90);\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 7);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Check PCS voltage and current when off\r\n      const pcsOffResults = await mccifRead(sock, pcsVI);\r\n      \r\n      // Reset intercomm (95%)\r\n      onProgress('Resetting Intercomm', 95);\r\n      \r\n      await mccifSet(sock, \"OBC1_Intercomm_Template\", 31775);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n    } else {\r\n      // If PCS voltage check fails, skip remaining tests\r\n      onProgress('PCS Voltage Failed, Skipping Remaining Tests', 50);\r\n      \r\n      results.voltages.xband = { value: '0.0', pass: false };\r\n      results.currents.xband = '0.0';\r\n      results.voltages.xbandOff = { value: '0.0', pass: false };\r\n      results.currents.xbandOff = '0.0';\r\n    }\r\n    \r\n    // Step 10: Complete checkout (100%)\r\n    onProgress('X-Band Checkout Complete', 100);\r\n    \r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error during X-Band checkout:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if X-Band voltage is within acceptable range\r\n * \r\n * @param value Voltage value as a string\r\n * @returns True if the voltage is within acceptable range (around 15V)\r\n */\r\nfunction checkXBandVoltage(value: string): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number and within range\r\n  return !isNaN(numValue) && numValue >= 14.5 && numValue <= 15.5;\r\n}\r\n\r\n/**\r\n * Check if PCS voltage is within acceptable range\r\n * \r\n * @param value Voltage value as a string\r\n * @returns True if the voltage is within acceptable range (around 12V)\r\n */\r\nfunction checkPCSVoltage(value: string): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number and within range\r\n  return !isNaN(numValue) && numValue >= 11.5 && numValue <= 12.5;\r\n}\r\n\r\n/**\r\n * Check if voltage is low enough to be considered \"off\"\r\n * \r\n * @param value Voltage value as a string\r\n * @returns True if the voltage is below 1.0V\r\n */\r\nfunction checkOffVoltage(value: string): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number and below threshold\r\n  return !isNaN(numValue) && numValue < 1.0;\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5791, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/xbandReport.ts"],"sourcesContent":["// src/services/reports/xbandReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for X-Band checkout results\r\n * \r\n * @param results The X-Band test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateXBandReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `X-Band_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"X-Band Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Voltage Current On Record\r\n        new Paragraph({\r\n          text: \"Voltage Current On Record : -\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // PCS Voltage\r\n        new Paragraph({\r\n          text: `PCS Voltage : ${padString(results.voltages.pcs.value, 6)} V    ${results.voltages.pcs.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // PCS Current\r\n        new Paragraph({\r\n          text: `PCS Current : ${padString(results.currents.pcs, 6)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // SPU On Record\r\n        new Paragraph({\r\n          text: \"SPU On Record : -\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // X-Band Voltage\r\n        new Paragraph({\r\n          text: `X-Band Voltage : ${padString(results.voltages.xband.value, 6)} V    ${results.voltages.xband.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // X-Band Current\r\n        new Paragraph({\r\n          text: `X-Band Current : ${padString(results.currents.xband, 6)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // SPU Off Record\r\n        new Paragraph({\r\n          text: \"SPU Off Record : -\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // X-Band Voltage after off\r\n        new Paragraph({\r\n          text: `X-Band Voltage : ${padString(results.voltages.xbandOff.value, 6)} V    ${results.voltages.xbandOff.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // X-Band Current after off\r\n        new Paragraph({\r\n          text: `X-Band Current : ${padString(results.currents.xbandOff, 6)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Voltage Current Off Record\r\n        new Paragraph({\r\n          text: \"Voltage Current Off Record : -\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // PCS Voltage off\r\n        new Paragraph({\r\n          text: `PCS Voltage : 0.000 V    [PASS]`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // PCS Current off\r\n        new Paragraph({\r\n          text: `PCS Current : 0.000 A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Test Options section\r\n        new Paragraph({\r\n          text: \"* Test Options:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // List of tested options\r\n        ...createOptionsSection(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create test options section\r\nfunction createOptionsSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  // Add paragraph for each option that was tested\r\n  if (results.testedOptions && results.testedOptions.length > 0) {\r\n    results.testedOptions.forEach((option: string) => {\r\n      paragraphs.push(\r\n        new Paragraph({\r\n          text: `- ${option}`,\r\n          spacing: { after: 100 }\r\n        })\r\n      );\r\n    });\r\n  } else {\r\n    paragraphs.push(\r\n      new Paragraph({\r\n        text: \"No specific options were selected for this test.\",\r\n        spacing: { after: 100 }\r\n      })\r\n    );\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n* Utility function to pad a string to a specific length\r\n* \r\n* @param value The string value to pad\r\n* @param length The desired length\r\n* @returns The padded string\r\n*/\r\nfunction padString(value: string | number, length: number): string {\r\n  const stringValue = String(value);\r\n  if (!stringValue) return ''.padStart(length, ' ');\r\n  \r\n  // For numeric values, ensure proper formatting\r\n  if (!isNaN(Number(stringValue))) {\r\n    return parseFloat(stringValue).toFixed(3).padStart(length, ' ');\r\n  }\r\n  \r\n  return stringValue.padStart(length, ' ');\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6040, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/leocamCheckout.ts"],"sourcesContent":["// src/services/checkout/leocamCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Helper to parse float values safely\r\n */\r\nconst safeParseFloat = (value: string): number => {\r\n  try {\r\n    const parsedValue = parseFloat(value);\r\n    return isNaN(parsedValue) ? 0 : parsedValue;\r\n  } catch {\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Run the LEOCAM checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runLEOCAMCheckout(\r\n  sock: any, \r\n  options: string[],\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      voltageTests: {\r\n        gps: { voltage: '', current: '', passInitial: false, passFinal: false },\r\n        pcs: { voltage: '', current: '', passInitial: false, passFinal: false },\r\n        leocam: { voltage: '', current: '', passInitial: false, passFinal: false }\r\n      },\r\n      leocamConfig: {\r\n        sensorMode: '',\r\n        sensorPower: '',\r\n        sensorLineFrameRate: '',\r\n        sensorBitDepth: '',\r\n        sensorRoi: [] as string[],\r\n        sensorGainAnalog: '',\r\n        sensorScanDirection: '',\r\n        sensorTestPatternSel: ''\r\n      },\r\n      leocamTelemetry: {\r\n        healthStatus: '',\r\n        dateTime: '',\r\n        cpuVoltages: [] as string[],\r\n        cpuTemperatures: [] as string[],\r\n        internalTemperatures: [] as string[],\r\n        sensorTemperatures: [] as string[],\r\n        diskUsed: [] as string[],\r\n        diskTemperatures: [] as string[],\r\n        diskLifetimes: [] as string[],\r\n        diskErrorCorrectionCounts: [] as string[],\r\n        diskErrorUncorrectableCounts: [] as string[],\r\n        diskTotalBytesRead: [] as string[],\r\n        diskTotalBytesWritten: [] as string[],\r\n        diskListDatasets: '',\r\n        diskListDatafilesInDataset: ''\r\n      },\r\n      leocamStatistics: {\r\n        commandCount: '',\r\n        acknowledgeCount: '',\r\n        timeoutCount: '',\r\n        errorCount: ''\r\n      },\r\n      reportGenerated: false,\r\n      testedOptions: options\r\n    };\r\n\r\n    const enableSensorOperations = options.includes('Sensor Operations');\r\n    const enableDiskOperations = options.includes('Disk Operations');\r\n    const enableVoltageTests = options.includes('Voltage Tests');\r\n\r\n    // Step 1: Initialize the test (5%)\r\n    onProgress('Initializing LEOCAM Test', 5);\r\n    \r\n    // Create arrays for MCC variables based on Python code\r\n    const pcsVi = [\"HEPS1_PDM2_PCS_V\", \"HEPS1_PDM2_PCS_I\"];\r\n    const gpsVi = [\"HEPS1_PDM2_GPS_5V_V\", \"HEPS1_PDM2_GPS_5V_I\"];\r\n    const leocamVi = [\"HEPS1_PDM1_OPT_CAM_V\", \"HEPS1_PDM1_OPT_CAM_I\"];\r\n    \r\n    const leocamSet = [\r\n      \"Leocam_Sen_Mode\", \"Leocam_Sen_PWR\", \"Leocam_Sen_Line_Frame_Rate\", \"Leocam_Sen_BIT_DEPTH\",\r\n      \"Leocam_Sen_ROI_1\", \"Leocam_Sen_ROI_2\", \"Leocam_Sen_ROI_3\", \"Leocam_Sen_ROI_4\",\r\n      \"Leocam_Sen_ROI_5_1\", \"Leocam_Sen_ROI_5_2\", \"Leocam_Sen_ROI_5_3\", \"Leocam_Sen_Gain_Analog\",\r\n      \"Leocam_Sen_Scan_Direction\", \"Leocam_Sen_Test_Pattern_Sel\"\r\n    ];\r\n    \r\n    const leocamVarStart = [\r\n      \"Leocam_Health_Status\", \"Leocam_Datetime\", \r\n      \"Leocam_CPU_Voltage_1\", \"Leocam_CPU_Voltage_2\", \"Leocam_CPU_Voltage_3\", \"Leocam_CPU_Voltage_4\",\r\n      \"Leocam_CPU_Temp_1\", \"Leocam_CPU_Temp_2\", \"Leocam_CPU_Temp_3\", \"Leocam_CPU_Temp_4\"\r\n    ];\r\n    \r\n    const leocamVarMiddle = [\r\n      \"Leocam_Int_Temp_1\", \"Leocam_Int_Temp_2\", \"Leocam_Int_Temp_3\", \"Leocam_Int_Temp_4\",\r\n      \"Leocam_Int_Temp_5\", \"Leocam_Int_Temp_6\", \"Leocam_Int_Temp_7\", \"Leocam_Int_Temp_8\"\r\n    ];\r\n    \r\n    const leocamVarConfig = [\r\n      \"Leocam_Sen_PWR\", \"Leocam_Sen_Mode\", \"Leocam_Sen_Line_Frame_Rate\", \"Leocam_Sen_BIT_DEPTH\", \r\n      \"Leocam_Sen_ROI_1\", \"Leocam_Sen_ROI_2\", \"Leocam_Sen_ROI_3\", \"Leocam_Sen_ROI_4\", \r\n      \"Leocam_Sen_ROI_5_1\", \"Leocam_Sen_ROI_5_2\", \"Leocam_Sen_ROI_5_3\", \"Leocam_Sen_Gain_Analog\", \r\n      \"Leocam_Sen_Scan_Direction\", \"Leocam_Sen_Test_Pattern_Sel\"\r\n    ];\r\n    \r\n    const leocamVarEnd = [\r\n      \"Leocam_Sen_VOLTAGE\", \"Leocam_Sen_TEMP_1\", \"Leocam_Sen_TEMP_2\", \"Leocam_Sen_Reset\"\r\n    ];\r\n    \r\n    const leocamDiskVars = [\r\n      \"Leocam_Disk_Used_1\", \"Leocam_Disk_Used_2\", \"Leocam_Disk_Used_3\",\r\n      \"Leocam_Disk_TEMP_1\", \"Leocam_Disk_TEMP_2\", \"Leocam_Disk_TEMP_3\", \r\n      \"Leocam_Disk_Lifetime_1\", \"Leocam_Disk_Lifetime_2\", \"Leocam_Disk_Lifetime_3\",\r\n      \"Leocam_Disk_Err_Correction_Count_1\", \"Leocam_Disk_Err_Correction_Count_2\", \"Leocam_Disk_Err_Correction_Count_3\",\r\n      \"Leocam_Disk_Err_Uncorrectable_Count_1\", \"Leocam_Disk_Err_Uncorrectable_Count_2\", \"Leocam_Disk_Err_Uncorrectable_Count_3\",\r\n      \"Leocam_Disk_Total_Bytes_Read_1\", \"Leocam_Disk_Total_Bytes_Read_2\", \"Leocam_Disk_Total_Bytes_Read_3\",\r\n      \"Leocam_Disk_Total_Bytes_Written_1\", \"Leocam_Disk_Total_Bytes_Written_2\", \"Leocam_Disk_Total_Bytes_Written_3\",\r\n      \"Leocam_Disk_List_Datasets\", \"Leocam_Disk_List_Datafiles_in_Dataset\"\r\n    ];\r\n    \r\n    const leocamStat = [\r\n      \"PCS_Leocam_Cmd_Count\", \"PCS_Leocam_Ack_Count\", \"PCS_Leocam_Timeout_Count\", \"PCS_Leocam_Error_Count\"\r\n    ];\r\n\r\n    if (enableVoltageTests) {\r\n      // Step 2: Enable GPS (10%)\r\n      onProgress('Enabling GPS', 10);\r\n      await mccifSet(sock, \"OBC1_Gps_Control\", 1);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n      \r\n      // Read GPS values\r\n      try {\r\n        const gpsResults = await mccifRead(sock, gpsVi);\r\n        const gpsVoltage = safeParseValue(gpsResults[0]);\r\n        const gpsCurrent = safeParseValue(gpsResults[1]);\r\n        \r\n        // Store results\r\n        results.voltageTests.gps.voltage = gpsVoltage;\r\n        results.voltageTests.gps.current = gpsCurrent;\r\n        \r\n        // Check if voltage is within expected range (5V)\r\n        const voltageValue = safeParseFloat(gpsVoltage);\r\n        results.voltageTests.gps.passInitial = (voltageValue >= 4.75 && voltageValue <= 5.25);\r\n      } catch (error) {\r\n        console.error(\"Error reading GPS values:\", error);\r\n      }\r\n      \r\n      // Step 3: Enable External CH7 (15%)\r\n      onProgress('Enabling External Power Channels', 15);\r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 7);\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\r\n      \r\n      // Read PCS values\r\n      try {\r\n        const pcsResults = await mccifRead(sock, pcsVi);\r\n        const pcsVoltage = safeParseValue(pcsResults[0]);\r\n        const pcsCurrent = safeParseValue(pcsResults[1]);\r\n        \r\n        // Store results\r\n        results.voltageTests.pcs.voltage = pcsVoltage;\r\n        results.voltageTests.pcs.current = pcsCurrent;\r\n        \r\n        // Check if voltage is within expected range (12V)\r\n        const voltageValue = safeParseFloat(pcsVoltage);\r\n        results.voltageTests.pcs.passInitial = (voltageValue >= 11.5 && voltageValue <= 12.5);\r\n      } catch (error) {\r\n        console.error(\"Error reading PCS values:\", error);\r\n      }\r\n\r\n      // If PCS voltage test passed, continue with LEOCAM setup\r\n      if (results.voltageTests.pcs.passInitial) {\r\n        // Step 4: Set Intercomm Template and enable CH13 (20%)\r\n        onProgress('Setting up LEOCAM communications', 20);\r\n        await mccifSet(sock, \"OBC1_Intercomm_Template\", 32767);\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n        \r\n        await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 13);\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\r\n        \r\n        // Read LEOCAM values\r\n        try {\r\n          const leocamResults = await mccifRead(sock, leocamVi);\r\n          const leocamVoltage = safeParseValue(leocamResults[0]);\r\n          const leocamCurrent = safeParseValue(leocamResults[1]);\r\n          \r\n          // Store results\r\n          results.voltageTests.leocam.voltage = leocamVoltage;\r\n          results.voltageTests.leocam.current = leocamCurrent;\r\n          \r\n          // Check if voltage is unregulated (just verify it's not zero)\r\n          const voltageValue = safeParseFloat(leocamVoltage);\r\n          results.voltageTests.leocam.passInitial = (voltageValue > 0.5);\r\n        } catch (error) {\r\n          console.error(\"Error reading LEOCAM values:\", error);\r\n        }\r\n      } else {\r\n        console.warn(\"PCS voltage test failed, skipping LEOCAM setup\");\r\n      }\r\n    } else {\r\n      // If voltage tests are disabled, simulate success\r\n      results.voltageTests.gps.passInitial = true;\r\n      results.voltageTests.pcs.passInitial = true;\r\n      results.voltageTests.leocam.passInitial = true;\r\n      \r\n      // Set placeholder values\r\n      results.voltageTests.gps.voltage = \"5.0\";\r\n      results.voltageTests.gps.current = \"0.1\";\r\n      results.voltageTests.pcs.voltage = \"12.0\";\r\n      results.voltageTests.pcs.current = \"0.2\";\r\n      results.voltageTests.leocam.voltage = \"12.0\";\r\n      results.voltageTests.leocam.current = \"0.3\";\r\n    }\r\n\r\n    // Only proceed with sensor operations if voltage tests passed or were skipped\r\n    if ((results.voltageTests.pcs.passInitial && results.voltageTests.leocam.passInitial) || !enableVoltageTests) {\r\n      \r\n      if (enableSensorOperations) {\r\n        // Step 5: Configure LEOCAM for imaging (30%)\r\n        onProgress('Configuring LEOCAM', 30);\r\n        \r\n        await mccifSet(sock, \"PCS_Leocam_Control\", 20);\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n        \r\n        await mccifSet(sock, \"PCS_Leocam_Number_of_Lines_L\", 100);\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n        \r\n        // Read LEOCAM configuration\r\n        try {\r\n          const leocamConfigResults = await mccifRead(sock, leocamSet);\r\n          \r\n          // Store configuration values\r\n          results.leocamConfig.sensorMode = safeParseValue(leocamConfigResults[0]);\r\n          results.leocamConfig.sensorPower = safeParseValue(leocamConfigResults[1]);\r\n          results.leocamConfig.sensorLineFrameRate = safeParseValue(leocamConfigResults[2]);\r\n          results.leocamConfig.sensorBitDepth = safeParseValue(leocamConfigResults[3]);\r\n          \r\n          // Store ROI values\r\n          for (let i = 4; i < 11; i++) {\r\n            results.leocamConfig.sensorRoi.push(safeParseValue(leocamConfigResults[i]));\r\n          }\r\n          \r\n          results.leocamConfig.sensorGainAnalog = safeParseValue(leocamConfigResults[11]);\r\n          results.leocamConfig.sensorScanDirection = safeParseValue(leocamConfigResults[12]);\r\n          results.leocamConfig.sensorTestPatternSel = safeParseValue(leocamConfigResults[13]);\r\n        } catch (error) {\r\n          console.error(\"Error reading LEOCAM configuration:\", error);\r\n        }\r\n        \r\n        // Step 6: Reset statistics counters (40%)\r\n        onProgress('Resetting statistics counters', 40);\r\n        \r\n        await mccifSet(sock, \"PCS_Leocam_Cmd_Count\", 0);\r\n        await mccifSet(sock, \"PCS_Leocam_Ack_Count\", 0);\r\n        await mccifSet(sock, \"PCS_Leocam_Timeout_Count\", 0);\r\n        await mccifSet(sock, \"PCS_Leocam_Error_Count\", 0);\r\n        \r\n        // Wait for operations to stabilize\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\r\n        \r\n        // Step 7: Start PPS and capture image (50%)\r\n        onProgress('Starting LEOCAM image capture', 50);\r\n        \r\n        await mccifSet(sock, \"PCS_Pps_Control\", 1);\r\n        await mccifSet(sock, \"PCS_Leocam_Control\", 40);\r\n        \r\n        // Wait for image capture to complete\r\n        onProgress('Waiting for image capture to complete', 60);\r\n        await new Promise(resolve => setTimeout(resolve, 5000)); // 5 second delay (shortened from 90s)\r\n        \r\n        // Step 8: Read telemetry data (70%)\r\n        onProgress('Reading LEOCAM telemetry', 70);\r\n        \r\n        // Read LEOCAM telemetry in chunks to avoid timeout\r\n        try {\r\n          // First chunk: Health Status and CPU data\r\n          const telemetryStart = await mccifRead(sock, leocamVarStart);\r\n          results.leocamTelemetry.healthStatus = safeParseValue(telemetryStart[0]);\r\n          results.leocamTelemetry.dateTime = safeParseValue(telemetryStart[1]);\r\n          \r\n          // CPU voltages\r\n          for (let i = 2; i < 6; i++) {\r\n            results.leocamTelemetry.cpuVoltages.push(safeParseValue(telemetryStart[i]));\r\n          }\r\n          \r\n          // CPU temperatures\r\n          for (let i = 6; i < 10; i++) {\r\n            results.leocamTelemetry.cpuTemperatures.push(safeParseValue(telemetryStart[i]));\r\n          }\r\n          \r\n          // Second chunk: Internal temperatures\r\n          const telemetryMiddle = await mccifRead(sock, leocamVarMiddle);\r\n          for (let i = 0; i < 8; i++) {\r\n            results.leocamTelemetry.internalTemperatures.push(safeParseValue(telemetryMiddle[i]));\r\n          }\r\n          \r\n          // Third chunk: Configuration readback\r\n          const telemetryConfig = await mccifRead(sock, leocamVarConfig);\r\n          // We already have this in leocamConfig, so we can skip storing it again\r\n          \r\n          // Fourth chunk: Sensor data\r\n          const telemetryEnd = await mccifRead(sock, leocamVarEnd);\r\n          for (let i = 1; i < 3; i++) {\r\n            results.leocamTelemetry.sensorTemperatures.push(safeParseValue(telemetryEnd[i]));\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error reading LEOCAM telemetry:\", error);\r\n        }\r\n      } else {\r\n        // If sensor operations are disabled, set placeholder values\r\n        results.leocamConfig.sensorMode = \"1\";\r\n        results.leocamConfig.sensorPower = \"1\";\r\n        results.leocamConfig.sensorLineFrameRate = \"100\";\r\n        results.leocamConfig.sensorBitDepth = \"8\";\r\n        results.leocamConfig.sensorRoi = [\"100\", \"100\", \"100\", \"100\", \"100\", \"100\", \"100\"];\r\n        results.leocamConfig.sensorGainAnalog = \"1\";\r\n        results.leocamConfig.sensorScanDirection = \"0\";\r\n        results.leocamConfig.sensorTestPatternSel = \"0\";\r\n        \r\n        results.leocamTelemetry.healthStatus = \"0\";\r\n        results.leocamTelemetry.dateTime = new Date().toISOString();\r\n        results.leocamTelemetry.cpuVoltages = [\"3.3\", \"1.8\", \"1.2\", \"1.0\"];\r\n        results.leocamTelemetry.cpuTemperatures = [\"40.5\", \"41.2\", \"39.8\", \"40.0\"];\r\n        results.leocamTelemetry.internalTemperatures = [\"38.5\", \"39.0\", \"37.5\", \"38.0\", \"39.5\", \"38.2\", \"37.8\", \"38.5\"];\r\n        results.leocamTelemetry.sensorTemperatures = [\"35.5\", \"36.0\"];\r\n      }\r\n      \r\n      // Step 9: Read disk information if enabled (80%)\r\n      if (enableDiskOperations) {\r\n        onProgress('Reading LEOCAM disk information', 80);\r\n        \r\n        try {\r\n          const diskResults = await mccifRead(sock, leocamDiskVars);\r\n          \r\n          // Parse disk usage\r\n          for (let i = 0; i < 3; i++) {\r\n            results.leocamTelemetry.diskUsed.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse disk temperatures\r\n          for (let i = 3; i < 6; i++) {\r\n            results.leocamTelemetry.diskTemperatures.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse disk lifetimes\r\n          for (let i = 6; i < 9; i++) {\r\n            results.leocamTelemetry.diskLifetimes.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse error correction counts\r\n          for (let i = 9; i < 12; i++) {\r\n            results.leocamTelemetry.diskErrorCorrectionCounts.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse uncorrectable error counts\r\n          for (let i = 12; i < 15; i++) {\r\n            results.leocamTelemetry.diskErrorUncorrectableCounts.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse total bytes read\r\n          for (let i = 15; i < 18; i++) {\r\n            results.leocamTelemetry.diskTotalBytesRead.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse total bytes written\r\n          for (let i = 18; i < 21; i++) {\r\n            results.leocamTelemetry.diskTotalBytesWritten.push(safeParseValue(diskResults[i]));\r\n          }\r\n          \r\n          // Parse dataset information\r\n          results.leocamTelemetry.diskListDatasets = safeParseValue(diskResults[21]);\r\n          results.leocamTelemetry.diskListDatafilesInDataset = safeParseValue(diskResults[22]);\r\n        } catch (error) {\r\n          console.error(\"Error reading LEOCAM disk information:\", error);\r\n        }\r\n      } else {\r\n        // Set placeholder disk values\r\n        results.leocamTelemetry.diskUsed = [\"1024\", \"2048\", \"4096\"];\r\n        results.leocamTelemetry.diskTemperatures = [\"35.0\", \"36.0\", \"37.0\"];\r\n        results.leocamTelemetry.diskLifetimes = [\"1000\", \"1200\", \"1100\"];\r\n        results.leocamTelemetry.diskErrorCorrectionCounts = [\"0\", \"0\", \"0\"];\r\n        results.leocamTelemetry.diskErrorUncorrectableCounts = [\"0\", \"0\", \"0\"];\r\n        results.leocamTelemetry.diskTotalBytesRead = [\"1024\", \"2048\", \"4096\"];\r\n        results.leocamTelemetry.diskTotalBytesWritten = [\"2048\", \"4096\", \"8192\"];\r\n        results.leocamTelemetry.diskListDatasets = \"sample_dataset\";\r\n        results.leocamTelemetry.diskListDatafilesInDataset = \"sample_file.dat\";\r\n      }\r\n      \r\n      // Step 10: Read statistics (90%)\r\n      onProgress('Reading LEOCAM statistics', 90);\r\n      \r\n      try {\r\n        const statResults = await mccifRead(sock, leocamStat);\r\n        \r\n        results.leocamStatistics.commandCount = safeParseValue(statResults[0]);\r\n        results.leocamStatistics.acknowledgeCount = safeParseValue(statResults[1]);\r\n        results.leocamStatistics.timeoutCount = safeParseValue(statResults[2]);\r\n        results.leocamStatistics.errorCount = safeParseValue(statResults[3]);\r\n      } catch (error) {\r\n        console.error(\"Error reading LEOCAM statistics:\", error);\r\n      }\r\n    } else {\r\n      console.warn(\"Voltage tests failed, skipping sensor and disk operations\");\r\n      \r\n      // Set placeholder values for results\r\n      results.leocamConfig.sensorMode = \"N.A.\";\r\n      results.leocamConfig.sensorPower = \"N.A.\";\r\n      results.leocamConfig.sensorLineFrameRate = \"N.A.\";\r\n      results.leocamConfig.sensorBitDepth = \"N.A.\";\r\n      results.leocamConfig.sensorRoi = [\"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamConfig.sensorGainAnalog = \"N.A.\";\r\n      results.leocamConfig.sensorScanDirection = \"N.A.\";\r\n      results.leocamConfig.sensorTestPatternSel = \"N.A.\";\r\n      \r\n      results.leocamTelemetry.healthStatus = \"N.A.\";\r\n      results.leocamTelemetry.dateTime = \"N.A.\";\r\n      results.leocamTelemetry.cpuVoltages = [\"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.cpuTemperatures = [\"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.internalTemperatures = [\"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.sensorTemperatures = [\"N.A.\", \"N.A.\"];\r\n      \r\n      results.leocamTelemetry.diskUsed = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskTemperatures = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskLifetimes = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskErrorCorrectionCounts = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskErrorUncorrectableCounts = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskTotalBytesRead = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskTotalBytesWritten = [\"N.A.\", \"N.A.\", \"N.A.\"];\r\n      results.leocamTelemetry.diskListDatasets = \"N.A.\";\r\n      results.leocamTelemetry.diskListDatafilesInDataset = \"N.A.\";\r\n      \r\n      results.leocamStatistics.commandCount = \"N.A.\";\r\n      results.leocamStatistics.acknowledgeCount = \"N.A.\";\r\n      results.leocamStatistics.timeoutCount = \"N.A.\";\r\n      results.leocamStatistics.errorCount = \"N.A.\";\r\n    }\r\n\r\n    // Step 11: Turn off devices (95%)\r\n    if (enableVoltageTests) {\r\n      onProgress('Turning off devices', 95);\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 13);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 7);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n      \r\n      await mccifSet(sock, \"OBC1_Gps_Control\", 3);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n      \r\n      await mccifSet(sock, \"OBC1_Intercomm_Template\", 31775);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n      \r\n      // Read final values\r\n      try {\r\n        // GPS final check\r\n        const gpsResults = await mccifRead(sock, gpsVi);\r\n        const gpsVoltage = safeParseValue(gpsResults[0]);\r\n        const gpsCurrent = safeParseValue(gpsResults[1]);\r\n        \r\n        // Store off state\r\n        results.voltageTests.gps.voltage = gpsVoltage;\r\n        results.voltageTests.gps.current = gpsCurrent;\r\n        \r\n        // Check if voltage is off (below 0.5V)\r\n        const voltageValue = safeParseFloat(gpsVoltage);\r\n        results.voltageTests.gps.passFinal = (voltageValue < 0.5);\r\n        \r\n        // PCS final check\r\n        const pcsResults = await mccifRead(sock, pcsVi);\r\n        const pcsVoltage = safeParseValue(pcsResults[0]);\r\n        const pcsCurrent = safeParseValue(pcsResults[1]);\r\n        \r\n        // Check if voltage is off (below 0.5V)\r\n        const pcsVoltageValue = safeParseFloat(pcsVoltage);\r\n        results.voltageTests.pcs.passFinal = (pcsVoltageValue < 0.5);\r\n        \r\n        // LEOCAM final check\r\n        const leocamResults = await mccifRead(sock, leocamVi);\r\n        const leocamVoltage = safeParseValue(leocamResults[0]);\r\n        const leocamCurrent = safeParseValue(leocamResults[1]);\r\n        \r\n        // Check if voltage is off (below 0.5V)\r\n        const leocamVoltageValue = safeParseFloat(leocamVoltage);\r\n        results.voltageTests.leocam.passFinal = (leocamVoltageValue < 0.5);\r\n      } catch (error) {\r\n        console.error(\"Error reading final values:\", error);\r\n      }\r\n    } else {\r\n        // If voltage tests are disabled, simulate success\r\n        results.voltageTests.gps.passFinal = true;\r\n        results.voltageTests.pcs.passFinal = true;\r\n        results.voltageTests.leocam.passFinal = true;\r\n      }\r\n  \r\n      // Step 12: Complete checkout (100%)\r\n      onProgress('LEOCAM Checkout Complete', 100);\r\n      \r\n      return results;\r\n      \r\n    } catch (error) {\r\n      console.error('Error during LEOCAM checkout:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Check if voltage is within acceptable range for 5V\r\n   * \r\n   * @param value Voltage value as a string\r\n   * @returns True if the voltage is within acceptable range\r\n   */\r\n  function checkVoltage5V(value: string): boolean {\r\n    // Convert to number first\r\n    const numValue = parseFloat(value);\r\n    \r\n    // Check if valid number\r\n    if (isNaN(numValue)) {\r\n      return false;\r\n    }\r\n    \r\n    // 5V check (typically 4.75-5.25V)\r\n    return numValue >= 4.75 && numValue <= 5.25;\r\n  }\r\n  \r\n  /**\r\n   * Check if voltage is within acceptable range for 12V\r\n   * \r\n   * @param value Voltage value as a string\r\n   * @returns True if the voltage is within acceptable range\r\n   */\r\n  function checkVoltage12V(value: string): boolean {\r\n    // Convert to number first\r\n    const numValue = parseFloat(value);\r\n    \r\n    // Check if valid number\r\n    if (isNaN(numValue)) {\r\n      return false;\r\n    }\r\n    \r\n    // 12V check (typically 11.5-12.5V)\r\n    return numValue >= 11.5 && numValue <= 12.5;\r\n  }\r\n  \r\n  /**\r\n   * Check if unregulated voltage is present (not zero or near zero)\r\n   * \r\n   * @param value Voltage value as a string\r\n   * @returns True if voltage is present\r\n   */\r\n  function checkUnregulatedVoltage(value: string): boolean {\r\n    // Convert to number first\r\n    const numValue = parseFloat(value);\r\n    \r\n    // Check if valid number\r\n    if (isNaN(numValue)) {\r\n      return false;\r\n    }\r\n    \r\n    // Just check if it's significantly above zero\r\n    return numValue > 0.5;\r\n  }"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6713, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/leocamReport.ts"],"sourcesContent":["// src/services/reports/leocamReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for LEOCAM checkout results\r\n * \r\n * @param results The LEOCAM test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateLEOCAMReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `LEOCAM_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"LEOCAM Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current On Summary\r\n        new Paragraph({\r\n          text: \"* Voltage Current On Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        ...createVoltageOnParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // LEOCAM Configuration section\r\n        new Paragraph({\r\n          text: \"* LEOCAM Configuration:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        ...createConfigurationParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // LEOCAM Telemetry section\r\n        new Paragraph({\r\n          text: \"* LEOCAM Telemetry:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        ...createTelemetryParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"Statistics : -\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        ...createStatisticsParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Off Summary\r\n        new Paragraph({\r\n          text: \"* Voltage Current Off Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        ...createVoltageOffParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper functions to create document paragraphs\r\n\r\n/**\r\n * Create paragraphs for the Voltage On section\r\n */\r\nfunction createVoltageOnParagraphs(results: any): Paragraph[] {\r\n  const gpsVoltage = parseFloat(results.voltageTests.gps.voltage || \"0\").toFixed(3);\r\n  const gpsCurrent = parseFloat(results.voltageTests.gps.current || \"0\").toFixed(3);\r\n  const gpsStatus = results.voltageTests.gps.passInitial ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  const pcsVoltage = parseFloat(results.voltageTests.pcs.voltage || \"0\").toFixed(3);\r\n  const pcsCurrent = parseFloat(results.voltageTests.pcs.current || \"0\").toFixed(3);\r\n  const pcsStatus = results.voltageTests.pcs.passInitial ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  const leocamVoltage = parseFloat(results.voltageTests.leocam.voltage || \"0\").toFixed(3);\r\n  const leocamCurrent = parseFloat(results.voltageTests.leocam.current || \"0\").toFixed(3);\r\n  const leocamStatus = results.voltageTests.leocam.passInitial ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  return [\r\n    new Paragraph(`GPS Voltage     : ${padString(gpsVoltage, 6)} V    ${gpsStatus}`),\r\n    new Paragraph(`GPS Current     : ${padString(gpsCurrent, 6)} A`),\r\n    new Paragraph(``),\r\n    new Paragraph(`PCS Voltage     : ${padString(pcsVoltage, 6)} V    ${pcsStatus}`),\r\n    new Paragraph(`PCS Current     : ${padString(pcsCurrent, 6)} A`),\r\n    new Paragraph(``),\r\n    new Paragraph(`LEOCAM Voltage  : ${padString(leocamVoltage, 6)} V    ${leocamStatus}`),\r\n    new Paragraph(`LEOCAM Current  : ${padString(leocamCurrent, 6)} A`)\r\n  ];\r\n}\r\n\r\n/**\r\n * Create paragraphs for the Configuration section\r\n */\r\nfunction createConfigurationParagraphs(results: any): Paragraph[] {\r\n  const config = results.leocamConfig;\r\n  const roiValues = config.sensorRoi || [];\r\n  const roiStr = roiValues.length > 0 ? roiValues.join('') : 'N/A';\r\n  \r\n  return [\r\n    new Paragraph(`Sensor Mode                 : ${config.sensorMode || 'N/A'}`),\r\n    new Paragraph(`Sensor Power                : ${config.sensorPower || 'N/A'}`),\r\n    new Paragraph(`Sensor Line Frame Rate      : ${config.sensorLineFrameRate || 'N/A'}`),\r\n    new Paragraph(`Sensor Bit Depth            : ${config.sensorBitDepth || 'N/A'}`),\r\n    new Paragraph(`Sensor ROI                  : ${roiStr}`),\r\n    new Paragraph(`Sensor Gain Analog          : ${config.sensorGainAnalog || 'N/A'}`),\r\n    new Paragraph(`Sensor Scan Direction       : ${config.sensorScanDirection || 'N/A'}`),\r\n    new Paragraph(`Sensor Test Pattern Select  : ${config.sensorTestPatternSel || 'N/A'}`)\r\n  ];\r\n}\r\n\r\n/**\r\n * Create paragraphs for the Telemetry section\r\n */\r\nfunction createTelemetryParagraphs(results: any): Paragraph[] {\r\n  const telemetry = results.leocamTelemetry;\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  // Add Health Status and DateTime\r\n  paragraphs.push(new Paragraph(`Health Status                       : ${telemetry.healthStatus || 'N/A'}`));\r\n  paragraphs.push(new Paragraph(`Current Date Time                   : ${telemetry.dateTime || 'N/A'}`));\r\n  \r\n  // Add CPU Voltages\r\n  const cpuVoltages = telemetry.cpuVoltages || [];\r\n  for (let i = 0; i < cpuVoltages.length; i++) {\r\n    paragraphs.push(new Paragraph(`CPU Voltage ${i + 1}                       : ${cpuVoltages[i] || 'N/A'} V`));\r\n  }\r\n  \r\n  // Add CPU Temperatures\r\n  const cpuTemperatures = telemetry.cpuTemperatures || [];\r\n  for (let i = 0; i < cpuTemperatures.length; i++) {\r\n    paragraphs.push(new Paragraph(`CPU Temperature ${i + 1}                   : ${cpuTemperatures[i] || 'N/A'} deg C`));\r\n  }\r\n  \r\n  // Add Internal Temperatures\r\n  const internalTemperatures = telemetry.internalTemperatures || [];\r\n  for (let i = 0; i < internalTemperatures.length; i++) {\r\n    paragraphs.push(new Paragraph(`Internal Temperature ${i + 1}              : ${internalTemperatures[i] || 'N/A'} deg C`));\r\n  }\r\n  \r\n  // Skip duplicating the configuration parameters since they are already in the config section\r\n  \r\n  // Add sensor-specific data\r\n  paragraphs.push(new Paragraph(`Sensor Voltage                      : ${telemetry.sensorVoltage || 'N/A'} V`));\r\n  \r\n  const sensorTemperatures = telemetry.sensorTemperatures || [];\r\n  for (let i = 0; i < sensorTemperatures.length; i++) {\r\n    paragraphs.push(new Paragraph(`Sensor Temperature ${i + 1}                : ${sensorTemperatures[i] || 'N/A'} deg C`));\r\n  }\r\n  \r\n  paragraphs.push(new Paragraph(`Sensor Reset                        : ${telemetry.sensorReset || 'N/A'}`));\r\n  \r\n  // Add disk data\r\n  const diskUsed = telemetry.diskUsed || [];\r\n  for (let i = 0; i < diskUsed.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Used ${i + 1}                         : ${diskUsed[i] || 'N/A'} Kbytes`));\r\n  }\r\n  \r\n  const diskTemperatures = telemetry.diskTemperatures || [];\r\n  for (let i = 0; i < diskTemperatures.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Temperature ${i + 1}                  : ${diskTemperatures[i] || 'N/A'} deg C`));\r\n  }\r\n  \r\n  const diskLifetimes = telemetry.diskLifetimes || [];\r\n  for (let i = 0; i < diskLifetimes.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Lifetime ${i + 1}                     : ${diskLifetimes[i] || 'N/A'} hours`));\r\n  }\r\n  \r\n  const diskErrorCorrectionCounts = telemetry.diskErrorCorrectionCounts || [];\r\n  for (let i = 0; i < diskErrorCorrectionCounts.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Error Correction Count ${i + 1}       : ${diskErrorCorrectionCounts[i] || 'N/A'}`));\r\n  }\r\n  \r\n  const diskErrorUncorrectableCounts = telemetry.diskErrorUncorrectableCounts || [];\r\n  for (let i = 0; i < diskErrorUncorrectableCounts.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Error Uncorrectable Count ${i + 1}    : ${diskErrorUncorrectableCounts[i] || 'N/A'}`));\r\n  }\r\n  \r\n  const diskTotalBytesRead = telemetry.diskTotalBytesRead || [];\r\n  for (let i = 0; i < diskTotalBytesRead.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Total Bytes Read ${i + 1}             : ${diskTotalBytesRead[i] || 'N/A'} MiB`));\r\n  }\r\n  \r\n  const diskTotalBytesWritten = telemetry.diskTotalBytesWritten || [];\r\n  for (let i = 0; i < diskTotalBytesWritten.length; i++) {\r\n    paragraphs.push(new Paragraph(`Disk Total Bytes Written ${i + 1}          : ${diskTotalBytesWritten[i] || 'N/A'} MiB`));\r\n  }\r\n  \r\n  paragraphs.push(new Paragraph(`Disk List Datasets                  : ${telemetry.diskListDatasets || 'N/A'}`));\r\n  paragraphs.push(new Paragraph(`Disk List Datafiles in Dataset      : ${telemetry.diskListDatafilesInDataset || 'N/A'}`));\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n/**\r\n * Create paragraphs for the Statistics section\r\n */\r\nfunction createStatisticsParagraphs(results: any): Paragraph[] {\r\n  const stats = results.leocamStatistics;\r\n  \r\n  return [\r\n    new Paragraph(`Command Count       : ${stats.commandCount || 'N/A'}`),\r\n    new Paragraph(`Acknowledge Count   : ${stats.acknowledgeCount || 'N/A'}`),\r\n    new Paragraph(`Timeout Count       : ${stats.timeoutCount || 'N/A'}`),\r\n    new Paragraph(`Error Count         : ${stats.errorCount || 'N/A'}`)\r\n  ];\r\n}\r\n\r\n/**\r\n * Create paragraphs for the Voltage Off section\r\n */\r\nfunction createVoltageOffParagraphs(results: any): Paragraph[] {\r\n  const gpsVoltage = parseFloat(results.voltageTests.gps.voltage || \"0\").toFixed(3);\r\n  const gpsCurrent = parseFloat(results.voltageTests.gps.current || \"0\").toFixed(3);\r\n  const gpsStatus = results.voltageTests.gps.passFinal ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  const pcsVoltage = parseFloat(results.voltageTests.pcs.voltage || \"0\").toFixed(3);\r\n  const pcsCurrent = parseFloat(results.voltageTests.pcs.current || \"0\").toFixed(3);\r\n  const pcsStatus = results.voltageTests.pcs.passFinal ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  const leocamVoltage = parseFloat(results.voltageTests.leocam.voltage || \"0\").toFixed(3);\r\n  const leocamCurrent = parseFloat(results.voltageTests.leocam.current || \"0\").toFixed(3);\r\n  const leocamStatus = results.voltageTests.leocam.passFinal ? \"[PASS]\" : \"[FAIL]\";\r\n  \r\n  return [\r\n    new Paragraph(`GPS Voltage     : ${padString(gpsVoltage, 6)} V    ${gpsStatus}`),\r\n    new Paragraph(`GPS Current     : ${padString(gpsCurrent, 6)} A`),\r\n    new Paragraph(``),\r\n    new Paragraph(`PCS Voltage     : ${padString(pcsVoltage, 6)} V    ${pcsStatus}`),\r\n    new Paragraph(`PCS Current     : ${padString(pcsCurrent, 6)} A`),\r\n    new Paragraph(``),\r\n    new Paragraph(`LEOCAM Voltage  : ${padString(leocamVoltage, 6)} V    ${leocamStatus}`),\r\n    new Paragraph(`LEOCAM Current  : ${padString(leocamCurrent, 6)} A`)\r\n  ];\r\n}\r\n\r\n/**\r\n* Utility function to pad a string to a specific length\r\n* \r\n* @param value The string value to pad\r\n* @param length The desired length\r\n* @returns The padded string\r\n*/\r\nfunction padString(value: string, length: number): string {\r\n  if (!value) return ''.padStart(length, ' ');\r\n  return value.padStart(length, ' ');\r\n}"],"names":[],"mappings":"AAAA,uCAAuC;;;;AACvC;AACA;;;AAQO,eAAe,qBAAqB,OAAY;IACrD,oDAAoD;IACpD,MAAM,MAAM,IAAI;IAChB,MAAM,UAAU,IAAI,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa;IAC9D,MAAM,UAAU,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,MAAM,WAAW;IAChF,MAAM,WAAW,CAAC,gBAAgB,EAAE,QAAQ,CAAC,EAAE,QAAQ,KAAK,CAAC;IAE7D,sBAAsB;IACtB,MAAM,MAAM,IAAI,sIAAA,CAAA,WAAQ,CAAC;QACvB,UAAU;YAAC;gBACT,YAAY,CAAC;gBACb,UAAU;oBACR,QAAQ;oBACR,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS,sIAAA,CAAA,eAAY,CAAC,SAAS;wBAC/B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBAEA,gBAAgB;oBAChB,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM,CAAC,qBAAqB,CAAC;wBAC7B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM,CAAC,WAAW,EAAE,IAAI,kBAAkB,IAAI;wBAC9C,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM,CAAC,WAAW,EAAE,IAAI,kBAAkB,IAAI;wBAC9C,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBAEA,YAAY;oBACZ,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBAEA,6BAA6B;oBAC7B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS,sIAAA,CAAA,eAAY,CAAC,SAAS;wBAC/B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;uBAEG,0BAA0B;oBAE7B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;4BAAK,QAAQ;wBAAI;oBACrC;oBAEA,+BAA+B;oBAC/B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS,sIAAA,CAAA,eAAY,CAAC,SAAS;wBAC/B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;uBAEG,8BAA8B;oBAEjC,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;4BAAK,QAAQ;wBAAI;oBACrC;oBAEA,aAAa;oBACb,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,iBAAiB;oBACnB;oBAEA,2BAA2B;oBAC3B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS,sIAAA,CAAA,eAAY,CAAC,SAAS;wBAC/B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;uBAEG,0BAA0B;oBAE7B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;uBAEG,2BAA2B;oBAE9B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;4BAAK,QAAQ;wBAAI;oBACrC;oBAEA,aAAa;oBACb,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,iBAAiB;oBACnB;oBAEA,8BAA8B;oBAC9B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS,sIAAA,CAAA,eAAY,CAAC,SAAS;wBAC/B,SAAS;4BAAE,OAAO;wBAAI;oBACxB;oBACA,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;wBAAI;oBACxB;uBAEG,2BAA2B;oBAE9B,IAAI,sIAAA,CAAA,YAAS,CAAC;wBACZ,MAAM;wBACN,SAAS;4BAAE,OAAO;4BAAK,QAAQ;wBAAI;oBACrC;iBACD;YACH;SAAE;IACJ;IAEA,wBAAwB;IACxB,MAAM,SAAS,MAAM,sIAAA,CAAA,SAAM,CAAC,QAAQ,CAAC;IAErC,gBAAgB;IAChB,MAAM,OAAO,IAAI,KAAK;QAAC;KAAO,EAAE;QAAE,MAAM;IAA0E;IAClH,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,MAAM;IAEb,+BAA+B;IAC/B,QAAQ,eAAe,GAAG;IAE1B,OAAO;AACT;AAEA,iDAAiD;AAEjD;;CAEC,GACD,SAAS,0BAA0B,OAAY;IAC7C,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,YAAY,QAAQ,YAAY,CAAC,GAAG,CAAC,WAAW,GAAG,WAAW;IAEpE,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,YAAY,QAAQ,YAAY,CAAC,GAAG,CAAC,WAAW,GAAG,WAAW;IAEpE,MAAM,gBAAgB,WAAW,QAAQ,YAAY,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IACrF,MAAM,gBAAgB,WAAW,QAAQ,YAAY,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IACrF,MAAM,eAAe,QAAQ,YAAY,CAAC,MAAM,CAAC,WAAW,GAAG,WAAW;IAE1E,OAAO;QACL,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,MAAM,EAAE,WAAW;QAC/E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,EAAE,CAAC;QAC/D,IAAI,sIAAA,CAAA,YAAS,CAAC,EAAE;QAChB,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,MAAM,EAAE,WAAW;QAC/E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,EAAE,CAAC;QAC/D,IAAI,sIAAA,CAAA,YAAS,CAAC,EAAE;QAChB,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,eAAe,GAAG,MAAM,EAAE,cAAc;QACrF,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,eAAe,GAAG,EAAE,CAAC;KACnE;AACH;AAEA;;CAEC,GACD,SAAS,8BAA8B,OAAY;IACjD,MAAM,SAAS,QAAQ,YAAY;IACnC,MAAM,YAAY,OAAO,SAAS,IAAI,EAAE;IACxC,MAAM,SAAS,UAAU,MAAM,GAAG,IAAI,UAAU,IAAI,CAAC,MAAM;IAE3D,OAAO;QACL,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,UAAU,IAAI,OAAO;QAC3E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,WAAW,IAAI,OAAO;QAC5E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,mBAAmB,IAAI,OAAO;QACpF,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,cAAc,IAAI,OAAO;QAC/E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,QAAQ;QACvD,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,gBAAgB,IAAI,OAAO;QACjF,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,mBAAmB,IAAI,OAAO;QACpF,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,8BAA8B,EAAE,OAAO,oBAAoB,IAAI,OAAO;KACtF;AACH;AAEA;;CAEC,GACD,SAAS,0BAA0B,OAAY;IAC7C,MAAM,YAAY,QAAQ,eAAe;IACzC,MAAM,aAA0B,EAAE;IAElC,iCAAiC;IACjC,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,YAAY,IAAI,OAAO;IACxG,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,QAAQ,IAAI,OAAO;IAEpG,mBAAmB;IACnB,MAAM,cAAc,UAAU,WAAW,IAAI,EAAE;IAC/C,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,MAAM,EAAE,IAAK;QAC3C,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,YAAY,EAAE,IAAI,EAAE,yBAAyB,EAAE,WAAW,CAAC,EAAE,IAAI,MAAM,EAAE,CAAC;IAC3G;IAEA,uBAAuB;IACvB,MAAM,kBAAkB,UAAU,eAAe,IAAI,EAAE;IACvD,IAAK,IAAI,IAAI,GAAG,IAAI,gBAAgB,MAAM,EAAE,IAAK;QAC/C,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,gBAAgB,EAAE,IAAI,EAAE,qBAAqB,EAAE,eAAe,CAAC,EAAE,IAAI,MAAM,MAAM,CAAC;IACnH;IAEA,4BAA4B;IAC5B,MAAM,uBAAuB,UAAU,oBAAoB,IAAI,EAAE;IACjE,IAAK,IAAI,IAAI,GAAG,IAAI,qBAAqB,MAAM,EAAE,IAAK;QACpD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,qBAAqB,EAAE,IAAI,EAAE,gBAAgB,EAAE,oBAAoB,CAAC,EAAE,IAAI,MAAM,MAAM,CAAC;IACxH;IAEA,6FAA6F;IAE7F,2BAA2B;IAC3B,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,aAAa,IAAI,MAAM,EAAE,CAAC;IAE3G,MAAM,qBAAqB,UAAU,kBAAkB,IAAI,EAAE;IAC7D,IAAK,IAAI,IAAI,GAAG,IAAI,mBAAmB,MAAM,EAAE,IAAK;QAClD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,mBAAmB,EAAE,IAAI,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,EAAE,IAAI,MAAM,MAAM,CAAC;IACtH;IAEA,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,WAAW,IAAI,OAAO;IAEvG,gBAAgB;IAChB,MAAM,WAAW,UAAU,QAAQ,IAAI,EAAE;IACzC,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;QACxC,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,2BAA2B,EAAE,QAAQ,CAAC,EAAE,IAAI,MAAM,OAAO,CAAC;IAC7G;IAEA,MAAM,mBAAmB,UAAU,gBAAgB,IAAI,EAAE;IACzD,IAAK,IAAI,IAAI,GAAG,IAAI,iBAAiB,MAAM,EAAE,IAAK;QAChD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,iBAAiB,EAAE,IAAI,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,IAAI,MAAM,MAAM,CAAC;IACpH;IAEA,MAAM,gBAAgB,UAAU,aAAa,IAAI,EAAE;IACnD,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,MAAM,EAAE,IAAK;QAC7C,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,cAAc,EAAE,IAAI,EAAE,uBAAuB,EAAE,aAAa,CAAC,EAAE,IAAI,MAAM,MAAM,CAAC;IACjH;IAEA,MAAM,4BAA4B,UAAU,yBAAyB,IAAI,EAAE;IAC3E,IAAK,IAAI,IAAI,GAAG,IAAI,0BAA0B,MAAM,EAAE,IAAK;QACzD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,4BAA4B,EAAE,IAAI,EAAE,SAAS,EAAE,yBAAyB,CAAC,EAAE,IAAI,OAAO;IACvH;IAEA,MAAM,+BAA+B,UAAU,4BAA4B,IAAI,EAAE;IACjF,IAAK,IAAI,IAAI,GAAG,IAAI,6BAA6B,MAAM,EAAE,IAAK;QAC5D,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,+BAA+B,EAAE,IAAI,EAAE,MAAM,EAAE,4BAA4B,CAAC,EAAE,IAAI,OAAO;IAC1H;IAEA,MAAM,qBAAqB,UAAU,kBAAkB,IAAI,EAAE;IAC7D,IAAK,IAAI,IAAI,GAAG,IAAI,mBAAmB,MAAM,EAAE,IAAK;QAClD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sBAAsB,EAAE,IAAI,EAAE,eAAe,EAAE,kBAAkB,CAAC,EAAE,IAAI,MAAM,IAAI,CAAC;IACpH;IAEA,MAAM,wBAAwB,UAAU,qBAAqB,IAAI,EAAE;IACnE,IAAK,IAAI,IAAI,GAAG,IAAI,sBAAsB,MAAM,EAAE,IAAK;QACrD,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,yBAAyB,EAAE,IAAI,EAAE,YAAY,EAAE,qBAAqB,CAAC,EAAE,IAAI,MAAM,IAAI,CAAC;IACvH;IAEA,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,gBAAgB,IAAI,OAAO;IAC5G,WAAW,IAAI,CAAC,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sCAAsC,EAAE,UAAU,0BAA0B,IAAI,OAAO;IAEtH,OAAO;AACT;AAEA;;CAEC,GACD,SAAS,2BAA2B,OAAY;IAC9C,MAAM,QAAQ,QAAQ,gBAAgB;IAEtC,OAAO;QACL,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sBAAsB,EAAE,MAAM,YAAY,IAAI,OAAO;QACpE,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sBAAsB,EAAE,MAAM,gBAAgB,IAAI,OAAO;QACxE,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sBAAsB,EAAE,MAAM,YAAY,IAAI,OAAO;QACpE,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,sBAAsB,EAAE,MAAM,UAAU,IAAI,OAAO;KACnE;AACH;AAEA;;CAEC,GACD,SAAS,2BAA2B,OAAY;IAC9C,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,YAAY,QAAQ,YAAY,CAAC,GAAG,CAAC,SAAS,GAAG,WAAW;IAElE,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,aAAa,WAAW,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IAC/E,MAAM,YAAY,QAAQ,YAAY,CAAC,GAAG,CAAC,SAAS,GAAG,WAAW;IAElE,MAAM,gBAAgB,WAAW,QAAQ,YAAY,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IACrF,MAAM,gBAAgB,WAAW,QAAQ,YAAY,CAAC,MAAM,CAAC,OAAO,IAAI,KAAK,OAAO,CAAC;IACrF,MAAM,eAAe,QAAQ,YAAY,CAAC,MAAM,CAAC,SAAS,GAAG,WAAW;IAExE,OAAO;QACL,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,MAAM,EAAE,WAAW;QAC/E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,EAAE,CAAC;QAC/D,IAAI,sIAAA,CAAA,YAAS,CAAC,EAAE;QAChB,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,MAAM,EAAE,WAAW;QAC/E,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,YAAY,GAAG,EAAE,CAAC;QAC/D,IAAI,sIAAA,CAAA,YAAS,CAAC,EAAE;QAChB,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,eAAe,GAAG,MAAM,EAAE,cAAc;QACrF,IAAI,sIAAA,CAAA,YAAS,CAAC,CAAC,kBAAkB,EAAE,UAAU,eAAe,GAAG,EAAE,CAAC;KACnE;AACH;AAEA;;;;;;AAMA,GACA,SAAS,UAAU,KAAa,EAAE,MAAc;IAC9C,IAAI,CAAC,OAAO,OAAO,GAAG,QAAQ,CAAC,QAAQ;IACvC,OAAO,MAAM,QAAQ,CAAC,QAAQ;AAChC","debugId":null}},
    {"offset": {"line": 7050, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/adcsCheckout.ts"],"sourcesContent":["// src/services/checkout/adcsCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Check if the unregulated voltages are within acceptable range\r\n * @param voltage Voltage value as string\r\n * @returns Pass/fail status string\r\n */\r\nconst checkUnregVoltage = (voltage: string): string => {\r\n  try {\r\n    const voltageVal = parseFloat(voltage);\r\n    if (voltageVal >= 28.0 && voltageVal <= 32.0) {\r\n      return \"PASS\";\r\n    } else {\r\n      return \"FAIL\";\r\n    }\r\n  } catch (error) {\r\n    return \"ERROR\";\r\n  }\r\n};\r\n\r\n/**\r\n * Check if the voltage is float (off) state\r\n * @param voltage Voltage value as string\r\n * @returns Pass/fail status string\r\n */\r\nconst checkOffVFloat = (voltage: string): string => {\r\n  try {\r\n    const voltageVal = parseFloat(voltage);\r\n    if (voltageVal <= 0.5) {\r\n      return \"PASS\";\r\n    } else {\r\n      return \"FAIL\";\r\n    }\r\n  } catch (error) {\r\n    return \"ERROR\";\r\n  }\r\n};\r\n\r\n/**\r\n * Check if command was executed properly by comparing counter values\r\n * @param counters Array of counter values [cmd_before, ack_before, timeout_before, error_before, \r\n *                                          cmd_after,  ack_after,  timeout_after,  error_after]\r\n * @returns Command execution status\r\n */\r\nconst cmdCheck = (counters: string[]): string => {\r\n  try {\r\n    const cmdBefore = parseInt(counters[0]);\r\n    const ackBefore = parseInt(counters[1]);\r\n    const timeoutBefore = parseInt(counters[2]);\r\n    const errorBefore = parseInt(counters[3]);\r\n    \r\n    const cmdAfter = parseInt(counters[4]);\r\n    const ackAfter = parseInt(counters[5]);\r\n    const timeoutAfter = parseInt(counters[6]);\r\n    const errorAfter = parseInt(counters[7]);\r\n    \r\n    if (cmdAfter - cmdBefore === 1) {\r\n      if (ackAfter - ackBefore === 1) {\r\n        if (timeoutAfter - timeoutBefore === 0) {\r\n          return \"PASS\";\r\n        } else {\r\n          return \"PASS_TIMEOUT\";\r\n        }\r\n      } else {\r\n        return \"FAIL_NO_REPLY\";\r\n      }\r\n    }\r\n    return \"FAIL_CMD_NOT_SENT\";\r\n  } catch (error) {\r\n    return \"ERROR\";\r\n  }\r\n};\r\n\r\n/**\r\n * Run the ADCS checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (specific ADCS options)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runADCSCheckout(\r\n  sock: any, \r\n  options: { \r\n    testTelemetry: boolean; \r\n    testReactionWheels: boolean;\r\n    testSensors?: boolean;\r\n    testMagneticTorquer?: boolean;\r\n  },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      vi: {\r\n        adcsIfVoltage: { value: '', status: '' },\r\n        adcsIfCurrent: { value: '' },\r\n        adcsRwVoltage: { value: '', status: '' },\r\n        adcsRwCurrent: { value: '' },\r\n        adcsIfVoltageOff: { value: '', status: '' },\r\n        adcsRwVoltageOff: { value: '', status: '' }\r\n      },\r\n      command: {\r\n        status: '',\r\n        details: ''\r\n      },\r\n      telemetry: {\r\n        identifier: '',\r\n        interfaceVersion: '',\r\n        fwVersionMajor: '',\r\n        fwVersionMinor: '',\r\n        runtimeSec: '',\r\n        runtimeMiliSec: ''\r\n      },\r\n      reportGenerated: false,\r\n      // Store all raw results for reporting\r\n      allResults: [],\r\n      // Store all command results for reporting\r\n      commandResults: []\r\n    };\r\n\r\n    // Define variables to read\r\n    const adcsVi = [\"HEPS1_PDM2_ADCS_IF_V\", \"HEPS1_PDM2_ADCS-IF_I\", \"HEPS1_PDM2_ADCD_RW_V\", \"HEPS1_PDM2_ADCD_RW_I\"];\r\n    const adcsTlm128 = [\r\n      \"ADCS_TLM_Identifier\", \"ADCS_TLM_InterfaceVer\", \"ADCS_TLM_IdFwVerMajor\", \"ADCS_TLM_IdFwVerMinor\",\r\n      \"ADCS_TLM_RuntimeSec\", \"ADCS_TLM_RuntimeMiliSec\"\r\n    ];\r\n    const adcsStat = [\"OBC1_Adcs_Cmd_Count\", \"OBC1_Adcs_Ack_Count\", \"OBC1_Adcs_Timeout_Count\", \"OBC1_Adcs_Error_Count\"];\r\n\r\n    // Step 1: Power on the ADCS (10%)\r\n    onProgress('Powering on ADCS', 10);\r\n    \r\n    try {\r\n      // Power on sequence\r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 1);\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOn\", 2);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\r\n    } catch (error) {\r\n      console.error(\"Error powering on ADCS:\", error);\r\n      // Continue with test despite error\r\n    }\r\n\r\n    // Step 2: Read power status (20%)\r\n    onProgress('Reading ADCS power status', 20);\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, adcsVi);\r\n      const viValues = viResults.map(safeParseValue);\r\n      \r\n      // Store the values\r\n      results.vi.adcsIfVoltage.value = viValues[0];\r\n      results.vi.adcsIfCurrent.value = viValues[1];\r\n      results.vi.adcsRwVoltage.value = viValues[2];\r\n      results.vi.adcsRwCurrent.value = viValues[3];\r\n      \r\n      // Check the voltages\r\n      results.vi.adcsIfVoltage.status = checkUnregVoltage(viValues[0]);\r\n      results.vi.adcsRwVoltage.status = checkUnregVoltage(viValues[2]);\r\n      \r\n      // Store all results\r\n      results.allResults.push(...viValues);\r\n    } catch (error) {\r\n      console.error(\"Error reading ADCS power status:\", error);\r\n      \r\n      // Set default values on error\r\n      results.vi.adcsIfVoltage = { value: \"unknown\", status: \"ERROR\" };\r\n      results.vi.adcsIfCurrent = { value: \"unknown\" };\r\n      results.vi.adcsRwVoltage = { value: \"unknown\", status: \"ERROR\" };\r\n      results.vi.adcsRwCurrent = { value: \"unknown\" };\r\n      \r\n      // Store placeholder results\r\n      results.allResults.push(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\r\n    }\r\n\r\n    // Step 3: Read initial command status (30%)\r\n    onProgress('Reading ADCS command status', 30);\r\n    \r\n    const cmdResults: string[] = [];\r\n    \r\n    try {\r\n      const statResults = await mccifRead(sock, adcsStat);\r\n      const statValues = statResults.map(safeParseValue);\r\n      \r\n      // Store command results before command\r\n      cmdResults.push(...statValues);\r\n      \r\n      // Store all results\r\n      results.allResults.push(...statValues);\r\n    } catch (error) {\r\n      console.error(\"Error reading ADCS command status:\", error);\r\n      \r\n      // Store placeholder results\r\n      cmdResults.push(\"0\", \"0\", \"0\", \"0\");\r\n      results.allResults.push(\"0\", \"0\", \"0\", \"0\");\r\n    }\r\n\r\n    // Step 4: Send command to ADCS (40%)\r\n    onProgress('Sending command to ADCS', 40);\r\n    \r\n    try {\r\n      // Set telemetry ID and control\r\n      await mccifSet(sock, \"OBC1_Adcs_TlmID\", 128);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\r\n      \r\n      await mccifSet(sock, \"OBC1_Adcs_Control\", 2);\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    } catch (error) {\r\n      console.error(\"Error sending command to ADCS:\", error);\r\n      // Continue with test despite error\r\n    }\r\n\r\n    // Step 5: Read command status after sending command (50%)\r\n    onProgress('Verifying command execution', 50);\r\n    \r\n    try {\r\n      const statResults = await mccifRead(sock, adcsStat);\r\n      const statValues = statResults.map(safeParseValue);\r\n      \r\n      // Store command results after command\r\n      cmdResults.push(...statValues);\r\n      \r\n      // Check command execution status\r\n      results.command.status = cmdCheck(cmdResults);\r\n      \r\n      // Store detailed command results\r\n      results.commandResults = cmdResults;\r\n      \r\n      // Store all results\r\n      results.allResults.push(...statValues);\r\n    } catch (error) {\r\n      console.error(\"Error reading ADCS command status after command:\", error);\r\n      \r\n      // Store placeholder results\r\n      cmdResults.push(\"0\", \"0\", \"0\", \"0\");\r\n      results.allResults.push(\"0\", \"0\", \"0\", \"0\");\r\n      \r\n      // Set command status\r\n      results.command.status = \"ERROR\";\r\n      results.commandResults = cmdResults;\r\n    }\r\n\r\n    // Step 6: Read telemetry (if enabled) (70%)\r\n    if (options.testTelemetry) {\r\n      onProgress('Reading ADCS telemetry', 70);\r\n      \r\n      try {\r\n        const tlmResults = await mccifRead(sock, adcsTlm128);\r\n        const tlmValues = tlmResults.map(safeParseValue);\r\n        \r\n        // Store telemetry values\r\n        results.telemetry.identifier = tlmValues[0];\r\n        results.telemetry.interfaceVersion = tlmValues[1];\r\n        results.telemetry.fwVersionMajor = tlmValues[2];\r\n        results.telemetry.fwVersionMinor = tlmValues[3];\r\n        results.telemetry.runtimeSec = tlmValues[4];\r\n        results.telemetry.runtimeMiliSec = tlmValues[5];\r\n        \r\n        // Store all results\r\n        results.allResults.push(...tlmValues);\r\n      } catch (error) {\r\n        console.error(\"Error reading ADCS telemetry:\", error);\r\n        \r\n        // Set default values on error\r\n        results.telemetry = {\r\n          identifier: \"unknown\",\r\n          interfaceVersion: \"unknown\",\r\n          fwVersionMajor: \"unknown\",\r\n          fwVersionMinor: \"unknown\",\r\n          runtimeSec: \"unknown\",\r\n          runtimeMiliSec: \"unknown\"\r\n        };\r\n        \r\n        // Store placeholder results\r\n        results.allResults.push(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\r\n      }\r\n    }\r\n\r\n    // Step 7: Power off the ADCS (90%)\r\n    onProgress('Powering off ADCS', 90);\r\n    \r\n    try {\r\n      // Power off sequence\r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 2);\r\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n      \r\n      await mccifSet(sock, \"OBC1_Ch_ExtReqOff\", 1);\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\r\n    } catch (error) {\r\n      console.error(\"Error powering off ADCS:\", error);\r\n      // Continue with test despite error\r\n    }\r\n\r\n    // Step 8: Verify power off status (100%)\r\n    onProgress('Verifying ADCS power off', 100);\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, adcsVi);\r\n      const viValues = viResults.map(safeParseValue);\r\n      \r\n      // Store the values\r\n      results.vi.adcsIfVoltageOff = { value: viValues[0], status: checkOffVFloat(viValues[0]) };\r\n      results.vi.adcsRwVoltageOff = { value: viValues[2], status: checkOffVFloat(viValues[2]) };\r\n      \r\n      // Store current values for completion\r\n      const ifCurrentOff = viValues[1];\r\n      const rwCurrentOff = viValues[3];\r\n      \r\n      // Store all results\r\n      results.allResults.push(...viValues);\r\n    } catch (error) {\r\n      console.error(\"Error reading ADCS power off status:\", error);\r\n      \r\n      // Set default values on error\r\n      results.vi.adcsIfVoltageOff = { value: \"unknown\", status: \"ERROR\" };\r\n      results.vi.adcsRwVoltageOff = { value: \"unknown\", status: \"ERROR\" };\r\n      \r\n      // Store placeholder results\r\n      results.allResults.push(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\r\n    }\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('ADCS Checkout Complete', 100);\r\n    \r\n    // Return the processed results\r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during ADCS checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7381, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/adcsReport.ts"],"sourcesContent":["// src/services/reports/adcsReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for ADCS checkout results\r\n * \r\n * @param results The ADCS test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateADCSReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `ADCS_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"ADCS Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Initial power status\r\n        new Paragraph({\r\n          text: `ADCS Interface Voltage      : ${formatVoltage(results.vi.adcsIfVoltage.value)} V    ${formatStatus(results.vi.adcsIfVoltage.status)}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Interface Current      : ${formatCurrent(results.vi.adcsIfCurrent.value)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Reaction Wheel Voltage : ${formatVoltage(results.vi.adcsRwVoltage.value)} V    ${formatStatus(results.vi.adcsRwVoltage.status)}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Reaction Wheel Current : ${formatCurrent(results.vi.adcsRwCurrent.value)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // ADCS Telemetry section\r\n        new Paragraph({\r\n          text: \"* ADCS Telemetry :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Command status\r\n        new Paragraph({\r\n          text: `TLM 128 : -- ${formatCommandStatus(results.command.status)}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Telemetry details (if available)\r\n        new Paragraph({\r\n          text: `Node type identifier        : ${results.telemetry.identifier || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Program type identifier     : ${results.telemetry.identifier || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Interface version           : ${results.telemetry.interfaceVersion || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Firmware version (Major)    : ${results.telemetry.fwVersionMajor || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Firmware version (Minor)    : ${results.telemetry.fwVersionMinor || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Runtime (seconds)           : ${results.telemetry.runtimeSec || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Runtime (milliseconds)      : ${results.telemetry.runtimeMiliSec || \"N/A\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current Summary after power off section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary :\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Power off status\r\n        new Paragraph({\r\n          text: `ADCS Interface Voltage      : ${formatVoltage(results.vi.adcsIfVoltageOff.value)} V    ${formatStatus(results.vi.adcsIfVoltageOff.status)}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Interface Current      : ${formatCurrent(results.vi.adcsIfCurrent.value)} A`,  // Reusing the first current measurement\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Reaction Wheel Voltage : ${formatVoltage(results.vi.adcsRwVoltageOff.value)} V    ${formatStatus(results.vi.adcsRwVoltageOff.status)}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `ADCS Reaction Wheel Current : ${formatCurrent(results.vi.adcsRwCurrent.value)} A`,  // Reusing the first current measurement\r\n          spacing: { after: 100 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n/**\r\n * Format voltage value to display with proper precision\r\n * @param value Voltage value as string\r\n * @returns Formatted voltage string\r\n */\r\nfunction formatVoltage(value: string): string {\r\n  try {\r\n    const voltage = parseFloat(value);\r\n    return voltage.toFixed(3).padStart(6, ' ');\r\n  } catch (error) {\r\n    return value || \"0.000\";\r\n  }\r\n}\r\n\r\n/**\r\n * Format current value to display with proper precision\r\n * @param value Current value as string\r\n * @returns Formatted current string\r\n */\r\nfunction formatCurrent(value: string): string {\r\n  try {\r\n    const current = parseFloat(value);\r\n    return current.toFixed(3).padStart(6, ' ');\r\n  } catch (error) {\r\n    return value || \"0.000\";\r\n  }\r\n}\r\n\r\n/**\r\n * Format status string for display in report\r\n * @param status Status string\r\n * @returns Formatted status for report\r\n */\r\nfunction formatStatus(status: string): string {\r\n  switch (status) {\r\n    case \"PASS\":\r\n      return \"[PASS]\";\r\n    case \"FAIL\":\r\n      return \"[FAIL]\";\r\n    case \"ERROR\":\r\n      return \"[ERROR]\";\r\n    default:\r\n      return `[${status}]`;\r\n  }\r\n}\r\n\r\n/**\r\n * Format command execution status for display in report\r\n * @param status Command status\r\n * @returns Formatted command status for report\r\n */\r\nfunction formatCommandStatus(status: string): string {\r\n  switch (status) {\r\n    case \"PASS\":\r\n      return \"[PASS]\";\r\n    case \"PASS_TIMEOUT\":\r\n      return \"[PASS] - with timeout\";\r\n    case \"FAIL_NO_REPLY\":\r\n      return \"[FAIL] - No reply\";\r\n    case \"FAIL_CMD_NOT_SENT\":\r\n      return \"[FAIL] - Command not sent\";\r\n    case \"ERROR\":\r\n      return \"[ERROR]\";\r\n    default:\r\n      return `[${status}]`;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7674, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/gpsCheckout.ts"],"sourcesContent":["// src/services/checkout/gpsCheckout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Helper function to check command results similar to cmd_check in the Python code\r\n * Verifies if TX/RX counts increased properly after sending commands\r\n */\r\nconst checkCommand = (before: string[], after: string[]): boolean => {\r\n  try {\r\n    // Get TX and RX counts before and after\r\n    const txCountBefore = parseInt(before[0]);\r\n    const rxCountBefore = parseInt(before[1]);\r\n    const txCountAfter = parseInt(after[0]);\r\n    const rxCountAfter = parseInt(after[1]);\r\n    \r\n    // Check if TX count increased (command was sent)\r\n    if (txCountAfter - txCountBefore !== 1) {\r\n      return false; // Command not sent\r\n    }\r\n    \r\n    // Check if RX count increased (response was received)\r\n    if (rxCountAfter - rxCountBefore !== 1) {\r\n      return false; // No reply\r\n    }\r\n    \r\n    return true; // Command succeeded\r\n  } catch (error) {\r\n    console.error(\"Error checking command results:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if a voltage value is near 5V (based on the Python check_v_float)\r\n */\r\nconst check5VFloat = (value: string): boolean => {\r\n  try {\r\n    const floatValue = parseFloat(value);\r\n    return floatValue >= 4.75 && floatValue <= 5.25;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if a 3.3V value is in acceptable range\r\n */\r\nconst check3V3 = (value: string): boolean => {\r\n  try {\r\n    const intValue = parseInt(value);\r\n    return intValue >= 3000 && intValue <= 3600;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if a voltage value is near 0V (power off check)\r\n */\r\nconst checkOffVFloat = (value: string): boolean => {\r\n  try {\r\n    const floatValue = parseFloat(value);\r\n    return floatValue < 0.5; // Less than 0.5V when off\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if a millivolt value is near 0mV (power off check)\r\n */\r\nconst checkOffMV = (value: string): boolean => {\r\n  try {\r\n    const intValue = parseInt(value);\r\n    return intValue < 500; // Less than 500mV when off\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Run the GPS checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runGPSCheckout(\r\n  sock: any,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      voltages: {\r\n        gps5V: { value: '', pass: false },\r\n        gps5VCurrent: { value: '' },\r\n        gps3V3: { value: '', pass: false }\r\n      },\r\n      stats: {\r\n        txCountBefore: '',\r\n        rxCountBefore: '',\r\n        txBytesBefore: '',\r\n        rxBytesBefore: '',\r\n        txCountAfter: '',\r\n        rxCountAfter: '',\r\n        txBytesAfter: '',\r\n        rxBytesAfter: '',\r\n        commandCheck: { pass: false }\r\n      },\r\n      powerOff: {\r\n        gps5V: { value: '', pass: false },\r\n        gps5VCurrent: { value: '' },\r\n        gps3V3: { value: '', pass: false }\r\n      },\r\n      allResults: [] as string[],\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Power on GPS (10%)\r\n    onProgress('Powering on GPS', 10);\r\n    \r\n    await mccifSet(sock, \"OBC1_Gps_Control\", 1);\r\n    \r\n    // Wait for GPS to initialize (60 seconds in original, but we'll reduce for testing)\r\n    const waitTime = 10; // Reduced for testing - original was 60 seconds\r\n    \r\n    // Update progress during wait time\r\n    for (let i = 0; i < waitTime; i++) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\r\n      onProgress(`Initializing GPS (${i+1}/${waitTime}s)`, 10 + (i+1) * 20 / waitTime);\r\n    }\r\n\r\n    // Step 2: Read GPS voltage and current (30%)\r\n    onProgress('Reading GPS power status', 30);\r\n    \r\n    const gpsVI = [\"HEPS1_PDM2_GPS_5V_V\", \"HEPS1_PDM2_GPS_5V_I\"];\r\n    const gpsV = [\"OBC2_GPS_3V3_V\"];\r\n    \r\n    // Read 5V supply and current\r\n    const viResults = await mccifRead(sock, gpsVI);\r\n    const viValues = viResults.map(safeParseValue);\r\n    results.allResults.push(...viValues);\r\n    \r\n    // Store and validate results\r\n    results.voltages.gps5V.value = viValues[0];\r\n    results.voltages.gps5V.pass = check5VFloat(viValues[0]);\r\n    results.voltages.gps5VCurrent.value = viValues[1];\r\n    \r\n    // Read 3.3V supply\r\n    const vResults = await mccifRead(sock, gpsV);\r\n    const vValues = vResults.map(safeParseValue);\r\n    results.allResults.push(...vValues);\r\n    \r\n    // Store and validate results\r\n    results.voltages.gps3V3.value = vValues[0];\r\n    results.voltages.gps3V3.pass = check3V3(vValues[0]);\r\n\r\n    // Step 3: Reset GPS counters (40%)\r\n    onProgress('Resetting GPS counters', 40);\r\n    \r\n    // Reset all counters\r\n    await mccifSet(sock, \"OBC1_Gps_TxCount\", 0);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    await mccifSet(sock, \"OBC1_Gps_RxCount\", 0);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    await mccifSet(sock, \"OBC1_Gps_TxBytes\", 0);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    await mccifSet(sock, \"OBC1_Gps_RxBytes\", 0);\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Step 4: Read GPS stats before command (50%)\r\n    onProgress('Reading GPS statistics before command', 50);\r\n    \r\n    const gpsStats = [\"OBC1_Gps_TxCount\", \"OBC1_Gps_RxCount\", \"OBC1_Gps_TxBytes\", \"OBC1_Gps_RxBytes\"];\r\n    \r\n    // Read stats before test command\r\n    const statsBefore = await mccifRead(sock, gpsStats);\r\n    const statsBeforeValues = statsBefore.map(safeParseValue);\r\n    results.allResults.push(...statsBeforeValues);\r\n    \r\n    // Store results\r\n    results.stats.txCountBefore = statsBeforeValues[0];\r\n    results.stats.rxCountBefore = statsBeforeValues[1];\r\n    results.stats.txBytesBefore = statsBeforeValues[2];\r\n    results.stats.rxBytesBefore = statsBeforeValues[3];\r\n\r\n    // Step 5: Send test command to GPS (60%)\r\n    onProgress('Sending test command to GPS', 60);\r\n    \r\n    // Send test command (log version)\r\n    await mccifSet(sock, \"OBC1_Gps_Control\", 2);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n    // Step 6: Read GPS stats after command (70%)\r\n    onProgress('Reading GPS statistics after command', 70);\r\n    \r\n    // Read stats after test command\r\n    const statsAfter = await mccifRead(sock, gpsStats);\r\n    const statsAfterValues = statsAfter.map(safeParseValue);\r\n    results.allResults.push(...statsAfterValues);\r\n    \r\n    // Store results\r\n    results.stats.txCountAfter = statsAfterValues[0];\r\n    results.stats.rxCountAfter = statsAfterValues[1];\r\n    results.stats.txBytesAfter = statsAfterValues[2];\r\n    results.stats.rxBytesAfter = statsAfterValues[3];\r\n    \r\n    // Check if command succeeded\r\n    results.stats.commandCheck.pass = checkCommand(\r\n      [results.stats.txCountBefore, results.stats.rxCountBefore],\r\n      [results.stats.txCountAfter, results.stats.rxCountAfter]\r\n    );\r\n\r\n    // Step 7: Power off GPS (80%)\r\n    onProgress('Powering off GPS', 80);\r\n    \r\n    await mccifSet(sock, \"OBC1_Gps_Control\", 3);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n    // Step 8: Read GPS power status after power off (90%)\r\n    onProgress('Reading GPS power status after power off', 90);\r\n    \r\n    // Read 5V supply and current after power off\r\n    const viOffResults = await mccifRead(sock, gpsVI);\r\n    const viOffValues = viOffResults.map(safeParseValue);\r\n    results.allResults.push(...viOffValues);\r\n    \r\n    // Store and validate results\r\n    results.powerOff.gps5V.value = viOffValues[0];\r\n    results.powerOff.gps5V.pass = checkOffVFloat(viOffValues[0]);\r\n    results.powerOff.gps5VCurrent.value = viOffValues[1];\r\n    \r\n    // Read 3.3V supply after power off\r\n    const vOffResults = await mccifRead(sock, gpsV);\r\n    const vOffValues = vOffResults.map(safeParseValue);\r\n    results.allResults.push(...vOffValues);\r\n    \r\n    // Store and validate results\r\n    results.powerOff.gps3V3.value = vOffValues[0];\r\n    results.powerOff.gps3V3.pass = checkOffMV(vOffValues[0]);\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during GPS checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7919, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/gpsReport.ts"],"sourcesContent":["// src/services/reports/gpsReport.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for GPS checkout results\r\n * \r\n * @param results The GPS test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateGPSReport(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `GPS_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"GPS Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // GPS power on voltage and current measurements\r\n        new Paragraph({\r\n          text: `GPS 5V Supply Voltage   : ${padFloat(results.voltages.gps5V.value, 6, 3)} V    ${results.voltages.gps5V.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `GPS 5V Supply Current   : ${padFloat(results.voltages.gps5VCurrent.value, 6, 3)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `GPS 3.3V Supply Voltage : ${padString(results.voltages.gps3V3.value, 4)} mV     ${results.voltages.gps3V3.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 100 }\r\n        }),\r\n        \r\n        // Command Check section\r\n        new Paragraph({\r\n          text: \"* Command Check:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Command check results\r\n        new Paragraph({\r\n          text: `Log Version : -- ${results.stats.commandCheck.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Transmit Count before test  : ${results.stats.txCountBefore}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Receive Count before test   : ${results.stats.rxCountBefore}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Transmit Bytes before test  : ${results.stats.txBytesBefore}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Receive Bytes before test   : ${results.stats.rxBytesBefore}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Transmit Count after test   : ${results.stats.txCountAfter}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Receive Count after test    : ${results.stats.rxCountAfter}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Transmit Bytes after test   : ${results.stats.txBytesAfter}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Receive Bytes after test    : ${results.stats.rxBytesAfter}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 100 }\r\n        }),\r\n        \r\n        // Power Off Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary (After Power Off):\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // GPS power off voltage and current measurements\r\n        new Paragraph({\r\n          text: `GPS 5V Supply Voltage   : ${padFloat(results.powerOff.gps5V.value, 6, 3)} V    ${results.powerOff.gps5V.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `GPS 5V Supply Current   : ${padFloat(results.powerOff.gps5VCurrent.value, 6, 3)} A`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `GPS 3.3V Supply Voltage : ${padString(results.powerOff.gps3V3.value, 4)} mV     ${results.powerOff.gps3V3.pass ? \"[PASS]\" : \"[FAIL]\"}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 100 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n/**\r\n * Utility function to pad a string to a specific length\r\n * \r\n * @param value The string value to pad\r\n * @param length The desired length\r\n * @returns The padded string\r\n */\r\nfunction padString(value: string, length: number): string {\r\n  if (!value) return ''.padStart(length, ' ');\r\n  return value.padStart(length, ' ');\r\n}\r\n\r\n/**\r\n * Utility function to format a float value with specified precision\r\n * \r\n * @param value The value to format (as string)\r\n * @param width The total width of the output string\r\n * @param precision The number of decimal places\r\n * @returns The formatted string\r\n */\r\nfunction padFloat(value: string, width: number, precision: number): string {\r\n  try {\r\n    const floatValue = parseFloat(value);\r\n    return floatValue.toFixed(precision).padStart(width, ' ');\r\n  } catch (error) {\r\n    return value.padStart(width, ' ');\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}