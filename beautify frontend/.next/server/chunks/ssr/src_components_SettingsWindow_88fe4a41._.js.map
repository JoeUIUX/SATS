{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/components/SettingsWindow/SettingsWindow.module.css [app-ssr] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"aboutInfo\": \"SettingsWindow-module__hn1lxq__aboutInfo\",\n  \"aboutText\": \"SettingsWindow-module__hn1lxq__aboutText\",\n  \"activeTab\": \"SettingsWindow-module__hn1lxq__activeTab\",\n  \"appTitle\": \"SettingsWindow-module__hn1lxq__appTitle\",\n  \"backgroundGrid\": \"SettingsWindow-module__hn1lxq__backgroundGrid\",\n  \"backgroundName\": \"SettingsWindow-module__hn1lxq__backgroundName\",\n  \"backgroundOption\": \"SettingsWindow-module__hn1lxq__backgroundOption\",\n  \"backgroundPreview\": \"SettingsWindow-module__hn1lxq__backgroundPreview\",\n  \"backgroundSelector\": \"SettingsWindow-module__hn1lxq__backgroundSelector\",\n  \"buttonRow\": \"SettingsWindow-module__hn1lxq__buttonRow\",\n  \"closeButton\": \"SettingsWindow-module__hn1lxq__closeButton\",\n  \"colorInput\": \"SettingsWindow-module__hn1lxq__colorInput\",\n  \"colorInputContainer\": \"SettingsWindow-module__hn1lxq__colorInputContainer\",\n  \"colorPicker\": \"SettingsWindow-module__hn1lxq__colorPicker\",\n  \"colorText\": \"SettingsWindow-module__hn1lxq__colorText\",\n  \"contentArea\": \"SettingsWindow-module__hn1lxq__contentArea\",\n  \"customSelect\": \"SettingsWindow-module__hn1lxq__customSelect\",\n  \"customSelectButton\": \"SettingsWindow-module__hn1lxq__customSelectButton\",\n  \"customSelectOption\": \"SettingsWindow-module__hn1lxq__customSelectOption\",\n  \"customSelectOptions\": \"SettingsWindow-module__hn1lxq__customSelectOptions\",\n  \"drag-handle\": \"SettingsWindow-module__hn1lxq__drag-handle\",\n  \"errorMessage\": \"SettingsWindow-module__hn1lxq__errorMessage\",\n  \"fadeOut\": \"SettingsWindow-module__hn1lxq__fadeOut\",\n  \"fileInput\": \"SettingsWindow-module__hn1lxq__fileInput\",\n  \"fontPreview\": \"SettingsWindow-module__hn1lxq__fontPreview\",\n  \"fontSelector\": \"SettingsWindow-module__hn1lxq__fontSelector\",\n  \"header\": \"SettingsWindow-module__hn1lxq__header\",\n  \"loadingSpinner\": \"SettingsWindow-module__hn1lxq__loadingSpinner\",\n  \"logo\": \"SettingsWindow-module__hn1lxq__logo\",\n  \"logoContainer\": \"SettingsWindow-module__hn1lxq__logoContainer\",\n  \"saveButton\": \"SettingsWindow-module__hn1lxq__saveButton\",\n  \"savedMessage\": \"SettingsWindow-module__hn1lxq__savedMessage\",\n  \"sectionTitle\": \"SettingsWindow-module__hn1lxq__sectionTitle\",\n  \"select\": \"SettingsWindow-module__hn1lxq__select\",\n  \"selectedBackground\": \"SettingsWindow-module__hn1lxq__selectedBackground\",\n  \"settingGroup\": \"SettingsWindow-module__hn1lxq__settingGroup\",\n  \"settingsSection\": \"SettingsWindow-module__hn1lxq__settingsSection\",\n  \"settingsWindow\": \"SettingsWindow-module__hn1lxq__settingsWindow\",\n  \"smallNote\": \"SettingsWindow-module__hn1lxq__smallNote\",\n  \"solidColorPreview\": \"SettingsWindow-module__hn1lxq__solidColorPreview\",\n  \"spin\": \"SettingsWindow-module__hn1lxq__spin\",\n  \"successMessage\": \"SettingsWindow-module__hn1lxq__successMessage\",\n  \"tabButton\": \"SettingsWindow-module__hn1lxq__tabButton\",\n  \"tabIcon\": \"SettingsWindow-module__hn1lxq__tabIcon\",\n  \"tabsContainer\": \"SettingsWindow-module__hn1lxq__tabsContainer\",\n  \"titleIcon\": \"SettingsWindow-module__hn1lxq__titleIcon\",\n  \"uploadBackground\": \"SettingsWindow-module__hn1lxq__uploadBackground\",\n  \"versionInfo\": \"SettingsWindow-module__hn1lxq__versionInfo\",\n  \"versionLabel\": \"SettingsWindow-module__hn1lxq__versionLabel\",\n  \"versionRow\": \"SettingsWindow-module__hn1lxq__versionRow\",\n  \"versionValue\": \"SettingsWindow-module__hn1lxq__versionValue\",\n  \"windowTitle\": \"SettingsWindow-module__hn1lxq__windowTitle\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/SettingsWindow/SettingsWindow.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport Draggable from \"react-draggable\";\r\nimport styles from \"./SettingsWindow.module.css\";\r\nimport { WindowName } from \"@/types/types\";\r\nimport FontLoader from '../FontLoader/FontLoader';\r\n\r\n// Define supported fonts for the application\r\nconst SUPPORTED_FONTS = [\r\n  { name: \"System Default\", value: \"Arial, sans-serif\" },\r\n  { name: \"Roboto\", value: \"Roboto, sans-serif\" },\r\n  { name: \"Open Sans\", value: \"Open Sans, sans-serif\" },\r\n  { name: \"Montserrat\", value: \"Montserrat, sans-serif\" },\r\n  { name: \"Source Code Pro\", value: \"Source Code Pro, monospace\" },\r\n];\r\n\r\ninterface BackgroundOption {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\ninterface SettingsWindowProps {\r\n  zIndex: number;\r\n  onMouseDown: () => void;\r\n  onClose: () => void;\r\n  bringWindowToFront: (windowName: WindowName) => void;\r\n  windowZIndexes: { [key: string]: number };\r\n  zIndexCounter: number;\r\n}\r\n\r\nconst SettingsWindow: React.FC<SettingsWindowProps> = ({\r\n  zIndex,\r\n  onMouseDown,\r\n  onClose,\r\n  bringWindowToFront,\r\n  windowZIndexes,\r\n  zIndexCounter,\r\n}) => {\r\n  // State for settings\r\n  const [selectedFont, setSelectedFont] = useState<string>(\"System Default\");\r\n  const [selectedBackground, setSelectedBackground] = useState<string>(\"/assets/curve_background.png\");\r\n  const [selectedLightBackground, setSelectedLightBackground] = useState<string>(\"/assets/lightcurve_background.png\");\r\n  const [defaultBackgrounds, setDefaultBackgrounds] = useState<BackgroundOption[]>([]);\r\n  const [customBackgrounds, setCustomBackgrounds] = useState<BackgroundOption[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSaved, setIsSaved] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<string>(\"appearance\");\r\n  const [savedMessage, setSavedMessage] = useState<string | null>(null);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [bgColor, setBgColor] = useState<string>(\"#000000\");\r\n  const [lightBgColor, setLightBgColor] = useState<string>(\"#ffffff\");\r\n  const [currentViewMode, setCurrentViewMode] = useState<'dark' | 'light'>('dark');\r\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\r\n  \r\n  // App version info\r\n  const appVersion = \"1.0.0\";\r\n  const buildDate = \"May 31, 2025\";\r\n  const backendUrl = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n\r\n  // Refs\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  \r\n  // Dragging functionality\r\n  const nodeRef = useRef<HTMLDivElement>(null!);\r\n  const savedPosition = sessionStorage.getItem('settingsWindowPosition');\r\n  const defaultPosition = savedPosition ? JSON.parse(savedPosition) : {\r\n    x: (window.innerWidth - 600) / 2,\r\n    y: (window.innerHeight - 500) / 2\r\n  };\r\n  const [position, setPosition] = useState(defaultPosition);\r\n\r\n  // Create portal element once on mount\r\n  const [portalElement] = useState(() => {\r\n    const existingPortal = document.getElementById(\"settingsWindow-root\");\r\n    if (existingPortal) {\r\n      return existingPortal;\r\n    }\r\n    const element = document.createElement(\"div\");\r\n    element.id = \"settingsWindow-root\";\r\n    document.body.appendChild(element);\r\n    return element;\r\n  });\r\n\r\n// 1. Create a ref for the font preview element\r\nconst fontPreviewRef = useRef<HTMLDivElement>(null);\r\n\r\n// 2. Add a function to directly apply the font to the preview element\r\nconst applyFontToPreview = useCallback((fontFamily: string) => {\r\n  if (fontPreviewRef.current) {\r\n    fontPreviewRef.current.style.fontFamily = fontFamily;\r\n    \r\n    // Force a repaint by briefly modifying another style property\r\n    fontPreviewRef.current.style.opacity = '0.99';\r\n    setTimeout(() => {\r\n      if (fontPreviewRef.current) {\r\n        fontPreviewRef.current.style.opacity = '1';\r\n      }\r\n    }, 10);\r\n  }\r\n}, []);\r\n\r\n// 3. Add effect to apply the font whenever it changes\r\nuseEffect(() => {\r\n  const fontValue = SUPPORTED_FONTS.find(f => f.name === selectedFont)?.value || 'Arial, sans-serif';\r\n  applyFontToPreview(fontValue);\r\n}, [selectedFont, applyFontToPreview]);\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      const newIsDarkMode = document.documentElement.classList.contains(\"dark\");\r\n      setIsDarkMode(newIsDarkMode);\r\n      \r\n      // Update the current view mode based on document theme\r\n      setCurrentViewMode(newIsDarkMode ? 'dark' : 'light');\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  // Load settings and custom backgrounds from backend on mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n    loadBackgrounds();\r\n  }, []);\r\n\r\n  // Save position to sessionStorage whenever it changes\r\n  useEffect(() => {\r\n    sessionStorage.setItem('settingsWindowPosition', JSON.stringify(position));\r\n  }, [position]);\r\n\r\n  // Handle any saved message display timeout\r\n  useEffect(() => {\r\n    if (savedMessage) {\r\n      const timer = setTimeout(() => {\r\n        setSavedMessage(null);\r\n      }, 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [savedMessage]);\r\n\r\n  // Load backgrounds from the backend\r\n  const loadBackgrounds = async () => {\r\n    try {\r\n      const response = await fetch(`${backendUrl}/backgrounds`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setDefaultBackgrounds(data.default_backgrounds || []);\r\n        setCustomBackgrounds(data.custom_backgrounds || []);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading backgrounds:\", error);\r\n    }\r\n  };\r\n\r\n  // Load settings from the backend\r\n  const loadSettings = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${backendUrl}/settings`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Loaded settings:\", data);\r\n        \r\n        // Set font if available\r\n        if (data.font) {\r\n          const fontName = SUPPORTED_FONTS.find(f => f.value === data.font)?.name || \"System Default\";\r\n          setSelectedFont(fontName);\r\n        }\r\n        \r\n        // Set background if available (dark mode background)\r\n        if (data.background) {\r\n          setSelectedBackground(data.background);\r\n        }\r\n        \r\n        // Set light mode background if available\r\n        if (data.background_light) {\r\n          setSelectedLightBackground(data.background_light);\r\n        }\r\n        \r\n        // Set background color if available\r\n        if (data.backgroundColor) {\r\n          setBgColor(data.backgroundColor);\r\n        }\r\n        \r\n        // Set light background color if available\r\n        if (data.backgroundColorLight) {\r\n          setLightBgColor(data.backgroundColorLight);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading settings:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Save settings to the backend, immediate font preview update\r\nconst saveSettings = async () => {\r\n  setIsLoading(true);\r\n  try {\r\n    const fontValue = SUPPORTED_FONTS.find(f => f.name === selectedFont)?.value || 'Arial, sans-serif';\r\n    applyFontToPreview(fontValue);\r\n    \r\n    // Get the refreshThemeSettings function\r\n    const { refreshThemeSettings } = await import('@/utils/themeInitializer');\r\n    \r\n    const response = await fetch(`${backendUrl}/settings`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        font: fontValue,\r\n        background: selectedBackground,\r\n        background_light: selectedLightBackground,\r\n        backgroundColor: bgColor,\r\n        backgroundColorLight: lightBgColor\r\n      }),\r\n    });\r\n    \r\n    if (response.ok) {\r\n      setIsSaved(true);\r\n      setSavedMessage(\"Settings saved successfully!\");\r\n      \r\n      // Apply font to document - COMPREHENSIVE APPROACH\r\n      document.documentElement.style.setProperty('--app-font-family', fontValue);\r\n      \r\n      // Force the font preview to update by re-rendering it\r\n      // This is done by triggering a state change\r\n      setSelectedFont(prevFont => {\r\n        // Re-set to the same value, but this will trigger a re-render with the new key\r\n        return prevFont;\r\n      });\r\n      \r\n      // Create or update the font style element\r\n      let fontStyle = document.getElementById('app-font-style');\r\n      if (!fontStyle) {\r\n        fontStyle = document.createElement('style');\r\n        fontStyle.id = 'app-font-style';\r\n        document.head.appendChild(fontStyle);\r\n      }\r\n      \r\n      // Enhanced CSS with highest specificity selectors to override component styles\r\n      // Target all components directly, especially those in the sidebar\r\n      fontStyle.textContent = `\r\n        /* General elements */\r\n        html body,\r\n        html button,\r\n        html input,\r\n        html select,\r\n        html textarea,\r\n        html a,\r\n        html p,\r\n        html h1, html h2, html h3, html h4, html h5, html h6,\r\n        html span, html div,\r\n        \r\n        /* Application components with direct targeting */\r\n        html .popup,\r\n        html .welcomeWindow,\r\n        html .mainScreen,\r\n        html .content,\r\n        html .aboutSection,\r\n        html .checkoutSection,\r\n        html .settingsWindow,\r\n        html .topSection,\r\n        html .bottomSection,\r\n        \r\n        /* Sidebar specific elements - high specificity */\r\n        html .sidebar,\r\n        html .sidebar *,\r\n        html .menu,\r\n        html .menu *,\r\n        html .menuItem,\r\n        html .profilesButton,\r\n        html .profileContainer,\r\n        html .profileSidebarItem,\r\n        html .profileButtonGroup,\r\n        html .settingsContainer,\r\n        \r\n        /* Tabs and interactive elements */\r\n        html .tabsContainer *,\r\n        html .activeTab,\r\n        html .tabButton,\r\n        \r\n        /* Force all elements to use the selected font */\r\n        html * {\r\n          font-family: ${fontValue} !important;\r\n        }\r\n      `;\r\n      \r\n      // Apply background to document body based on current theme using the improved refreshThemeSettings\r\n      if (refreshThemeSettings) {\r\n        await refreshThemeSettings();\r\n      } else {\r\n        // Fallback to direct application if import fails\r\n        applyBackground();\r\n      }\r\n      \r\n      // After 2 seconds, reset the saved state\r\n      setTimeout(() => {\r\n        setIsSaved(false);\r\n      }, 2000);\r\n      \r\n      // Also directly update sidebar elements for immediate effect\r\n      const sidebarItems = document.querySelectorAll('.sidebar, .menuItem, .profilesButton, .profileSidebarItem');\r\n      sidebarItems.forEach(el => {\r\n        (el as HTMLElement).style.fontFamily = fontValue;\r\n      });\r\n    } else {\r\n      setSavedMessage(\"Error saving settings\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving settings:\", error);\r\n    setSavedMessage(\"Error: Could not connect to server\");\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};\r\n\r\n  // Apply background to the page\r\nconst applyBackground = async () => {\r\n  // Import the refreshThemeSettings function dynamically\r\n  const { refreshThemeSettings, applyBackgroundSettings } = await import('@/utils/themeInitializer');\r\n  \r\n  // Determine which background to apply based on current theme mode\r\n  const bgPath = isDarkMode ? selectedBackground : selectedLightBackground;\r\n  const bgColorValue = isDarkMode ? bgColor : lightBgColor;\r\n  \r\n  try {\r\n    // First, try to apply using the refreshThemeSettings function which fetches fresh settings\r\n    if (refreshThemeSettings) {\r\n      console.log(\"Using refreshThemeSettings to apply background changes\");\r\n      await refreshThemeSettings();\r\n    } else {\r\n      // Fallback: Apply directly if we couldn't import the function\r\n      console.log(\"Using direct method to apply background changes\");\r\n      \r\n      // Create a settings object that mimics what would come from the server\r\n      const settings = {\r\n        background: selectedBackground,\r\n        background_light: selectedLightBackground,\r\n        backgroundColor: bgColor,\r\n        backgroundColorLight: lightBgColor\r\n      };\r\n      \r\n      // If we have the applyBackgroundSettings function, use it\r\n      if (applyBackgroundSettings) {\r\n        applyBackgroundSettings(settings, isDarkMode);\r\n      } else {\r\n        // Otherwise, fall back to direct DOM manipulation\r\n        if (bgPath === \"none\") {\r\n          document.body.style.backgroundImage = \"none\";\r\n          document.body.style.backgroundColor = bgColorValue;\r\n        } else {\r\n          document.body.style.backgroundImage = `url(${bgPath})`;\r\n          document.body.style.backgroundSize = \"cover\";\r\n          document.body.style.backgroundPosition = \"center\";\r\n          document.body.style.backgroundRepeat = \"no-repeat\";\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Tell the backend to apply the background\r\n    fetch(`${backendUrl}/apply-background`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        path: bgPath,\r\n        isDarkMode: isDarkMode\r\n      }),\r\n    }).catch(error => {\r\n      console.error(\"Error notifying backend about background change:\", error);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error applying background:\", error);\r\n  }\r\n};\r\n\r\n  // Handle background image upload\r\n  const handleBackgroundUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (!file) return;\r\n    \r\n    // Check if file is an image\r\n    if (!file.type.match('image.*')) {\r\n      setSavedMessage(\"Error: Please upload an image file\");\r\n      return;\r\n    }\r\n    \r\n    // Create a formData object\r\n    const formData = new FormData();\r\n    formData.append('background', file);\r\n    \r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${backendUrl}/upload-background`, {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        \r\n        // Add the new background to custom backgrounds\r\n        setCustomBackgrounds(prev => [\r\n          ...prev,\r\n          { name: file.name, path: data.path }\r\n        ]);\r\n        \r\n        // Select the newly uploaded background for the current theme mode\r\n        if (isDarkMode) {\r\n          setSelectedBackground(data.path);\r\n        } else {\r\n          setSelectedLightBackground(data.path);\r\n        }\r\n        \r\n        setSavedMessage(\"Background uploaded successfully!\");\r\n        \r\n        // Refresh background list\r\n        loadBackgrounds();\r\n      } else {\r\n        setSavedMessage(\"Error uploading background\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading background:\", error);\r\n      setSavedMessage(\"Error: Could not upload background\");\r\n    } finally {\r\n      setIsLoading(false);\r\n      // Clear the file input\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = '';\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle the window click event\r\n  const handleWindowClick = () => {\r\n    console.log(\"🖱️ Clicked SettingsWindow, bringing to front\");\r\n    onMouseDown();\r\n  };\r\n\r\n  // Get the effective z-index from the windowZIndexes or fall back to the provided zIndex\r\n  const effectiveZIndex = windowZIndexes[\"SettingsWindow\"] || zIndex;\r\n\r\n  // Function to toggle view mode (Dark/Light) during setting selection\r\n  const toggleViewMode = () => {\r\n    setCurrentViewMode(prev => prev === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  // Get the current background and color based on view mode (not based on actual theme)\r\n  const getCurrentBackground = () => {\r\n    return currentViewMode === 'dark' ? selectedBackground : selectedLightBackground;\r\n  };\r\n\r\n  const getCurrentBgColor = () => {\r\n    return currentViewMode === 'dark' ? bgColor : lightBgColor;\r\n  };\r\n\r\n  // Update the appropriate background setting based on current view mode\r\n  const handleBackgroundSelect = (path: string) => {\r\n    if (currentViewMode === 'dark') {\r\n      setSelectedBackground(path);\r\n    } else {\r\n      setSelectedLightBackground(path);\r\n    }\r\n  };\r\n\r\n  // Update the appropriate background color based on current view mode\r\n  const handleBgColorChange = (color: string) => {\r\n    if (currentViewMode === 'dark') {\r\n      setBgColor(color);\r\n    } else {\r\n      setLightBgColor(color);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        isSelectOpen &&\r\n        document.querySelector(`.${styles.customSelect}`) && \r\n        !(document.querySelector(`.${styles.customSelect}`) as HTMLElement).contains(event.target as Node)\r\n      ) {\r\n        setIsSelectOpen(false);\r\n      }\r\n    };\r\n  \r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [isSelectOpen, styles.customSelect]);\r\n\r\n  return (\r\n    <>\r\n      <FontLoader fontFamily={selectedFont} />\r\n      {createPortal(\r\n    <Draggable\r\n      nodeRef={nodeRef}\r\n      handle=\".drag-handle\"\r\n      position={position}\r\n      onStop={(e, data) => {\r\n        console.log(`📍 SettingsWindow moved to: x=${data.x}, y=${data.y}`);\r\n        setPosition({ x: data.x, y: data.y });\r\n      }}\r\n    >\r\n      <div\r\n        ref={nodeRef}\r\n        className={styles.settingsWindow}\r\n        style={{\r\n          position: \"fixed\",\r\n          zIndex: effectiveZIndex,\r\n          backgroundColor: isDarkMode ? \"#1e1e1e\" : \"#ffffff\",\r\n          color: isDarkMode ? \"#fff\" : \"#000\",\r\n        }}\r\n        onClick={handleWindowClick}\r\n      >\r\n        {/* Window header */}\r\n        <div className={`${styles.header} drag-handle`}>\r\n          <h2 className={styles.windowTitle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={styles.titleIcon}>\r\n              <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\" />\r\n              <circle cx=\"12\" cy=\"12\" r=\"3\" />\r\n            </svg>\r\n            Settings\r\n          </h2>\r\n          <button\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onClose();\r\n            }}\r\n            className={styles.closeButton}\r\n          >\r\n            ✖\r\n          </button>\r\n        </div>\r\n\r\n        {/* Tabs navigation */}\r\n        <div className={styles.tabsContainer}>\r\n          <button \r\n            className={`${styles.tabButton} ${activeTab === 'appearance' ? styles.activeTab : ''}`}\r\n            onClick={() => setActiveTab('appearance')}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={styles.tabIcon}>\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <path d=\"M12 2a10 10 0 1 0 10 10\" />\r\n              <path d=\"M12 12h.01\" />\r\n            </svg>\r\n            Appearance\r\n          </button>\r\n          <button \r\n            className={`${styles.tabButton} ${activeTab === 'about' ? styles.activeTab : ''}`}\r\n            onClick={() => setActiveTab('about')}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={styles.tabIcon}>\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <path d=\"M12 16v-4\" />\r\n              <path d=\"M12 8h.01\" />\r\n            </svg>\r\n            About\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content area */}\r\n        <div className={styles.contentArea}>\r\n          {/* Appearance Tab */}\r\n          {activeTab === 'appearance' && (\r\n            <div className={styles.settingsSection}>\r\n              <div className={styles.settingGroup}>\r\n                <h3 className={styles.sectionTitle}>Background</h3>\r\n                \r\n                {/* Theme toggle for background previews */}\r\n                <div style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center',\r\n                  marginBottom: '16px'\r\n                }}>\r\n                  <h4>Editing {currentViewMode === 'dark' ? 'Dark' : 'Light'} Mode Background</h4>\r\n                  <button \r\n                    onClick={toggleViewMode}\r\n                    style={{\r\n                      padding: '8px 12px',\r\n                      backgroundColor: '#00bcd4',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '4px',\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <span>{currentViewMode === 'dark' ? '☀️' : '🌙'}</span>\r\n                    Switch to {currentViewMode === 'dark' ? 'Light' : 'Dark'} Mode Editor\r\n                  </button>\r\n                </div>\r\n                \r\n                <div className={styles.backgroundSelector}>\r\n                  <div className={styles.backgroundGrid}>\r\n                    {/* Default backgrounds */}\r\n                    {defaultBackgrounds.map((bg) => (\r\n                      <div \r\n                        key={bg.path} \r\n                        className={`${styles.backgroundOption} ${getCurrentBackground() === bg.path ? styles.selectedBackground : ''}`}\r\n                        onClick={() => handleBackgroundSelect(bg.path)}\r\n                      >\r\n                        {bg.path === \"none\" ? (\r\n                          <div className={styles.solidColorPreview} style={{ backgroundColor: getCurrentBgColor() }}>\r\n                            <span>Solid Color</span>\r\n                          </div>\r\n                        ) : (\r\n                          <div className={styles.backgroundPreview}>\r\n                            <img src={bg.path} alt={bg.name} />\r\n                          </div>\r\n                        )}\r\n                        <div className={styles.backgroundName}>{bg.name}</div>\r\n                      </div>\r\n                    ))}\r\n                    \r\n                    {/* Custom backgrounds */}\r\n                    {customBackgrounds.map((bg) => (\r\n                      <div \r\n                        key={bg.path} \r\n                        className={`${styles.backgroundOption} ${getCurrentBackground() === bg.path ? styles.selectedBackground : ''}`}\r\n                        onClick={() => handleBackgroundSelect(bg.path)}\r\n                      >\r\n                        <div className={styles.backgroundPreview}>\r\n                          <img src={bg.path} alt={bg.name} />\r\n                        </div>\r\n                        <div className={styles.backgroundName}>{bg.name}</div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  \r\n                  {/* Upload new background */}\r\n                  <div className={styles.uploadBackground}>\r\n                    <h4>Upload New Background</h4>\r\n                    <input \r\n                      type=\"file\" \r\n                      accept=\"image/*\" \r\n                      ref={fileInputRef}\r\n                      onChange={handleBackgroundUpload}\r\n                      className={styles.fileInput}\r\n                    />\r\n                    <div className={styles.smallNote}>\r\n                      Recommended size: 1920x1080px or larger\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Background color picker (for solid color option) */}\r\n                  {getCurrentBackground() === \"none\" && (\r\n                    <div className={styles.colorPicker}>\r\n                      <h4>Background Color</h4>\r\n                      <div className={styles.colorInputContainer}>\r\n                        <input \r\n                          type=\"color\" \r\n                          value={getCurrentBgColor()}\r\n                          onChange={(e) => handleBgColorChange(e.target.value)}\r\n                          className={styles.colorInput}\r\n                        />\r\n                        <input \r\n                          type=\"text\" \r\n                          value={getCurrentBgColor()}\r\n                          onChange={(e) => handleBgColorChange(e.target.value)}\r\n                          className={styles.colorText}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styles.settingGroup}>\r\n                <h3 className={styles.sectionTitle}>Font</h3>\r\n                <div className={styles.fontSelector}>\r\n  {/* Custom select with fonts displayed in their own typeface */}\r\n  <div className={styles.customSelect}>\r\n    <button \r\n      className={styles.customSelectButton}\r\n      onClick={() => setIsSelectOpen(!isSelectOpen)}\r\n      type=\"button\"\r\n    >\r\n      <span>{selectedFont}</span>\r\n      <span>{isSelectOpen ? '▲' : '▼'}</span>\r\n    </button>\r\n    \r\n    {isSelectOpen && (\r\n      <div className={styles.customSelectOptions}>\r\n        {SUPPORTED_FONTS.map((font) => (\r\n          <div \r\n            key={font.name} \r\n            className={styles.customSelectOption}\r\n            onClick={() => {\r\n              setSelectedFont(font.name);\r\n              setIsSelectOpen(false);\r\n            }}\r\n            style={{\r\n              fontFamily: font.value\r\n            }}\r\n          >\r\n            {font.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )}\r\n  </div>\r\n  \r\n  {/* Font preview with iframe that loads all fonts */}\r\n  <div className={styles.fontPreview}>\r\n  <h4 style={{ \r\n    marginBottom: '8px', \r\n    fontSize: '14px', \r\n    fontWeight: '500' \r\n  }}>Preview</h4>\r\n    <iframe\r\n      srcDoc={`\r\n        <html>\r\n        <head>\r\n          <!-- Load all fonts directly in the iframe -->\r\n          <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\" rel=\"stylesheet\">\r\n          <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap\" rel=\"stylesheet\">\r\n          <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap\" rel=\"stylesheet\">\r\n          <link href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap\" rel=\"stylesheet\">\r\n          <style>\r\n            body {\r\n              font-family: ${SUPPORTED_FONTS.find(f => f.name === selectedFont)?.value || 'Arial, sans-serif'};\r\n              margin: 0;\r\n              padding: 16px;\r\n              color: ${isDarkMode ? '#fff' : '#000'};\r\n              background-color: ${isDarkMode ? '#1e1e1e' : '#f5f5f5'};\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <p>The quick brown fox jumps over the lazy dog.</p>\r\n          <p>0123456789</p>\r\n        </body>\r\n        </html>\r\n      `}\r\n      style={{\r\n        width: '100%',\r\n        height: '100px',\r\n        border: 'none',\r\n        overflow: 'hidden',\r\n        backgroundColor: 'transparent'\r\n      }}\r\n      title=\"Font Preview\"\r\n    />\r\n  </div>\r\n</div>\r\n              </div>\r\n\r\n              <div className={styles.buttonRow}>\r\n                <button \r\n                  className={styles.saveButton}\r\n                  onClick={saveSettings}\r\n                  disabled={isLoading || isSaved}\r\n                >\r\n                  {isLoading ? (\r\n                    <span className={styles.loadingSpinner}>⟳</span>\r\n                  ) : isSaved ? (\r\n                    <span>✓ Saved</span>\r\n                  ) : (\r\n<span>Save Settings</span>\r\n                  )}\r\n                </button>\r\n                \r\n                {savedMessage && (\r\n                  <div className={`${styles.savedMessage} ${\r\n                    savedMessage.includes('Error') ? styles.errorMessage : styles.successMessage\r\n                  }`}>\r\n                    {savedMessage}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* About Tab */}\r\n          {activeTab === 'about' && (\r\n            <div className={styles.settingsSection}>\r\n              <div className={styles.aboutInfo}>\r\n                <div className={styles.logoContainer}>\r\n                  <img \r\n                    src=\"/assets/SaRCLogo.png\" \r\n                    alt=\"Satellite Research Centre Logo\" \r\n                    className={styles.logo}\r\n                  />\r\n                </div>\r\n                \r\n                <h3 className={styles.appTitle}>Satellite Automated Testing System</h3>\r\n                <div className={styles.versionInfo}>\r\n                  <div className={styles.versionRow}>\r\n                    <span className={styles.versionLabel}>Version:</span>\r\n                    <span className={styles.versionValue}>{appVersion}</span>\r\n                  </div>\r\n                  <div className={styles.versionRow}>\r\n                    <span className={styles.versionLabel}>Build Date:</span>\r\n                    <span className={styles.versionValue}>{buildDate}</span>\r\n                  </div>\r\n                  <div className={styles.versionRow}>\r\n                    <span className={styles.versionLabel}>Environment:</span>\r\n                    <span className={styles.versionValue}>{process.env.NODE_ENV}</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className={styles.aboutText}>\r\n                  <p>\r\n                    This application provides a comprehensive interface for automated testing\r\n                    of satellite components and systems. It facilitates test management, execution,\r\n                    and result analysis.\r\n                  </p>\r\n                  \r\n                  <h4>Main Features:</h4>\r\n<ul>\r\n  <li>Checkout Test - Subsystems and Components</li>\r\n  <li>Real-time hardware integration with simulation fallback capability</li>\r\n  <li>Interactive Satellite 3D model Viewer</li>\r\n  <li>Comprehensive test result logging and report generation</li>\r\n  <li>Customisability features</li>\r\n</ul>\r\n                  \r\n\r\n<h4>NTU Professional Internship Project:</h4>\r\n<p><em>Building Satellite - Development and implementation of Automated Testing System for Satellite</em></p>\r\n<p>Developed from January to May 2025</p>\r\n\r\n<p className=\"mt-4 text-sm\">\r\n  <span className=\"opacity-60\">For more information: </span>\r\n  <a href=\"https://github.com/JoeUIUX\" className=\"text-blue-500 hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/JoeUIUX</a>\r\n</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Draggable>,\r\n    portalElement\r\n  )}\r\n  </>\r\n  );\r\n}\r\n\r\nexport default SettingsWindow;"],"names":[],"mappings":"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","debugId":null}}]
}