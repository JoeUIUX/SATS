{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/app/layout.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./globals.css\";\nimport { initializeThemeBackgrounds, refreshThemeSettings } from \"@/utils/themeInitializer\";\n\n/* LIGHT DARK MODE SLIDER TOGGLER - START */\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\n\n// Define TypeScript types for font handling\ntype FontName = 'Roboto' | 'Open Sans' | 'Montserrat' | 'Source Code Pro';\n\ninterface FontUrls {\n  [key: string]: string; // Add index signature for string keys\n}\n\n/* memory of user specified light/dark mode */\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    const savedMode = localStorage.getItem(\"darkMode\");\n    if (savedMode) setDarkMode(savedMode === \"true\");\n\n    // Apply dark/light mode classes to <html> on component mount\n    const htmlElement = document.documentElement;\n    if (savedMode === \"true\") {\n      htmlElement.classList.add(\"dark\");\n      htmlElement.classList.remove(\"light\");\n    } else {\n      htmlElement.classList.add(\"light\");\n      htmlElement.classList.remove(\"dark\");\n    }\n    \n    // Initialize theme backgrounds from database settings\n    initializeThemeBackgrounds();\n    \n    // Load and apply previously saved font from localStorage\n    const loadSavedFont = async () => {\n      // Try to get font setting from backend\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\"}/settings`);\n        if (response.ok) {\n          const settings = await response.json();\n          if (settings.font) {\n            // Apply the font immediately\n            applyFontToDocument(settings.font);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading font settings:\", error);\n      }\n    };\n    \n    loadSavedFont();\n  }, []);\n\n  // Helper function to apply font - with proper type annotation\n  const applyFontToDocument = (fontFamily: string): void => {\n    if (!fontFamily) return;\n    \n    // Set CSS variable\n    document.documentElement.style.setProperty('--app-font-family', fontFamily);\n    \n    // Create or update style element\n    let fontStyle = document.getElementById('app-font-style');\n    if (!fontStyle) {\n      fontStyle = document.createElement('style');\n      fontStyle.id = 'app-font-style';\n      document.head.appendChild(fontStyle);\n    }\n    \n    // Set comprehensive CSS rules\n    fontStyle.textContent = `\n      html body,\n      html button,\n      html input,\n      html select,\n      html textarea,\n      html a,\n      html p,\n      html h1, html h2, html h3, html h4, html h5, html h6,\n      html span, html div,\n      html .sidebar,\n      html .sidebar *,\n      html .menu,\n      html .menu *,\n      html .menuItem,\n      html .profilesButton,\n      html .profileContainer,\n      html .profileSidebarItem,\n      html .profileButtonGroup,\n      html .settingsContainer,\n      html .popup,\n      html .welcomeWindow,\n      html .mainScreen,\n      html .content,\n      html .aboutSection,\n      html .checkoutSection,\n      html .settingsWindow,\n      html .topSection,\n      html .bottomSection,\n      html * {\n        font-family: ${fontFamily} !important;\n      }\n    `;\n    \n    // Load font file if needed (for non-system fonts)\n    const loadFontFile = (fontName: string): void => {\n      const fontUrls: FontUrls = {\n        'Roboto': 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap',\n        'Open Sans': 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap',\n        'Montserrat': 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap',\n        'Source Code Pro': 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap'\n      };\n      \n      // Find the font name from the value\n      const fontMatch = Object.entries(fontUrls).find(([_, value]) => \n        fontFamily.includes(value.split(',')[0])\n      );\n      \n      if (fontMatch) {\n        const [matchedFontName] = fontMatch;\n        // Type guard to ensure matchedFontName is a valid key\n        if (matchedFontName in fontUrls) {\n          const url = fontUrls[matchedFontName as keyof typeof fontUrls];\n          const link = document.createElement('link');\n          link.href = url;\n          link.rel = 'stylesheet';\n          document.head.appendChild(link);\n        }\n      }\n    };\n    \n    // Only load external fonts, not system fonts\n    if (!fontFamily.includes('Arial') && !fontFamily.includes('sans-serif')) {\n      loadFontFile(fontFamily);\n    }\n  };\n\n  // Add to layout.tsx with proper typing\n  const loadFonts = (): void => {\n    // Define valid font names as a type to ensure type safety\n    type FontName = 'Roboto' | 'Open Sans' | 'Montserrat' | 'Source Code Pro';\n    \n    const fontUrls: Record<FontName, string> = {\n      'Roboto': 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap',\n      'Open Sans': 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap',\n      'Montserrat': 'https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap',\n      'Source Code Pro': 'https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600&display=swap'\n    };\n    \n    // Add each font link to the document head\n    Object.entries(fontUrls).forEach(([name, url]) => {\n      // Check if link already exists to prevent duplicates\n      const existingLink = document.querySelector(`link[href=\"${url}\"]`);\n      if (!existingLink) {\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = url;\n        document.head.appendChild(link);\n        console.log(`Loaded font: ${name}`);\n      }\n    });\n  };\n\n  useEffect(() => {\n    // Your existing code...\n    \n    // Load fonts\n    loadFonts();\n  }, []);\n\n  const toggleDarkMode = async () => {\n    setDarkMode((prevMode) => {\n      const newMode = !prevMode;\n      localStorage.setItem(\"darkMode\", newMode.toString());\n\n      // Update <html> class dynamically\n      const htmlElement = document.documentElement;\n      if (newMode) {\n        htmlElement.classList.add(\"dark\");\n        htmlElement.classList.remove(\"light\");\n      } else {\n        htmlElement.classList.add(\"light\");\n        htmlElement.classList.remove(\"dark\");\n      }\n\n      // Refresh theme settings to ensure we apply the latest backgrounds\n      setTimeout(async () => {\n        await refreshThemeSettings();\n      }, 50);\n\n      return newMode;\n    });\n  };\n\n  return (\n    <html lang=\"en\" className={darkMode ? \"dark\" : \"light\"}>\n      <body>\n        <div className=\"toggleContainer\">\n          <label className=\"switch\">\n            <input type=\"checkbox\" checked={darkMode} onChange={toggleDarkMode} />\n            <span className=\"slider\">\n              <FontAwesomeIcon icon={faMoon} className=\"icon moon\" />\n              <FontAwesomeIcon icon={faSun} className=\"icon sun\" />\n            </span>\n          </label>\n        </div>\n        {children}\n      </body>\n    </html>\n  );\n}\n\n/* LIGHT DARK MODE SLIDER TOGGLER - END */"],"names":[],"mappings":"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","debugId":null}}]
}