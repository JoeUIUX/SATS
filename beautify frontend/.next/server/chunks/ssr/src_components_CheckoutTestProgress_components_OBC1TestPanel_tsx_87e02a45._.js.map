{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/OBC1TestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/OBC1TestPanel.tsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { runOBC1CheckoutWithDetection } from '@/services/checkout/obc1Checkout';\r\nimport { isUsingSimulation } from '@/utils/mccUtils';\r\n\r\n// Import the OBC1-specific functions\r\nimport { runOBC1Checkout } from '@/services/checkout/obc1Checkout';\r\nimport { generateOBC1Report } from '@/services/reports/obc1Report';\r\n\r\n// Import test history components\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface OBC1TestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Update your TestHistoryItem interface definition to include is_simulated\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    vi?: {\r\n      d3v3?: any;\r\n      ps3v3Obc2?: any;\r\n      ps5vObc2?: any;\r\n    };\r\n    temperatures?: {\r\n      thruster1?: string;\r\n      thruster2?: string;\r\n      leocam?: string[];\r\n    };\r\n    firmware?: {\r\n      major: string;\r\n      minor: string;\r\n      patch: string;\r\n    };\r\n    kernel?: {\r\n      uptime: string;\r\n      loads: {\r\n        oneMinute: string;\r\n        fiveMinute: string;\r\n        fifteenMinute: string;\r\n      };\r\n      memory: {\r\n        totalRam: string;\r\n        freeRam: string;\r\n        sharedRam: string;\r\n        bufferRam: string;\r\n        totalSwap: string;\r\n        freeSwap: string;\r\n        memUnit: string;\r\n        totalHigh: string;\r\n        freeHigh: string;\r\n      };\r\n      processes: string;\r\n    };\r\n    fpga?: {\r\n      voltages: {\r\n        vccPspll: string;\r\n        vccPsbatt: string;\r\n        vccint: string;\r\n        vccbram: string;\r\n        vccaux: string;\r\n      };\r\n      temperatures: {\r\n        psTemp: string;\r\n        remoteTemp: string;\r\n        plTemp: string;\r\n      };\r\n    };\r\n    emmc?: {\r\n      emmc0States: string[];\r\n      emmc1States: string[];\r\n    };\r\n    testedOptions?: string[];\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean; \r\n}\r\n\r\nexport const OBC1TestPanel: React.FC<OBC1TestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('vi.d3v3.value');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  // Add state variables for messages\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({\r\n    firmware: true,\r\n    voltage: true,\r\n    temperature: true,\r\n    fpga: true,\r\n    kernel: true,\r\n    emmc: options.includes('eMMC'),\r\n    rawParameters: false // Default to collapsed\r\n\r\n  });\r\n  \r\n  // Available metrics for visualization\r\n  const metricOptions = [\r\n    { label: '3V3 D Voltage', value: 'vi.d3v3.value' },\r\n    { label: 'PS 3V3 OBC-2 Voltage', value: 'vi.ps3v3Obc2.value' },\r\n    { label: 'PS 5V OBC-2 Voltage', value: 'vi.ps5vObc2.value' },\r\n    { label: 'Thruster Temp 1', value: 'temperatures.thruster1' },\r\n    { label: 'Thruster Temp 2', value: 'temperatures.thruster2' },\r\n    { label: 'FPGA PS Temp', value: 'fpga.temperatures.psTemp' },\r\n    { label: 'FPGA Remote Temp', value: 'fpga.temperatures.remoteTemp' },\r\n    { label: 'FPGA PL Temp', value: 'fpga.temperatures.plTemp' },\r\n  ];\r\n  \r\n  // Determine if eMMC option is enabled\r\n  const enableEmmc = options.includes('eMMC');\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n\r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n\r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n// Create a more responsive version of the useEffect hook\r\nuseEffect(() => {\r\n  // This will run whenever isInitialRun changes\r\n  if (isInitialRun) {\r\n    console.log(`🔄 OBC-1 Test Panel received isInitialRun=true signal, running test`);\r\n    // Reset state for a fresh run\r\n    setIsRunning(false); \r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(false);\r\n    \r\n    // Start test after a short delay to ensure state is updated\r\n    setTimeout(() => {\r\n      startTest();\r\n    }, 50);\r\n  }\r\n}, [isInitialRun]); // Only depend on isInitialRun\r\n  \r\n  // Add function to fetch test history\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component OBC-1`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=OBC-1`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have voltage values to be a legitimate test\r\n            const hasVoltageData = item.results.vi && \r\n              (item.results.vi.d3v3 || item.results.vi.ps3v3Obc2 || item.results.vi.ps5vObc2);\r\n            \r\n            // Must have some temperature data\r\n            const hasTempData = item.results.temperatures && \r\n              (item.results.temperatures.thruster1 || \r\n               item.results.temperatures.thruster2 || \r\n               (item.results.temperatures.leocam && item.results.temperatures.leocam.length > 0));\r\n            \r\n            // Consider it a real test if it has both voltage and temperature data\r\n            return hasVoltageData && hasTempData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `obc1_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Function to save test result to history\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform our standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                      (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"OBC-1\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: enableEmmc ? \"eMMC Test Enabled\" : \"eMMC Test Disabled\",\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `obc1_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"OBC-1\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting OBC-1 Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for common parameters\r\n              if (param.includes(\"FW_Ver\")) {\r\n                const version = param.includes(\"Major\") ? \"1\" : \r\n                               param.includes(\"Minor\") ? \"2\" : \"3\";\r\n                return `${param}=${version}`;\r\n              } else if (param.includes(\"3V3\") || param.includes(\"5V\")) {\r\n                // Voltage values in mV\r\n                return `${param}=${3300 + Math.floor(Math.random() * 100)}`;\r\n              } else if (param.includes(\"temp\") || param.includes(\"Temp\")) {\r\n                // Temperature values\r\n                return `${param}=${20 + Math.floor(Math.random() * 10)}`;\r\n              } else if (param.includes(\"eMMC\")) {\r\n                return `${param}=1`;\r\n              } else {\r\n                return `${param}=simulated`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n      }\r\n      \r\n      // Run the OBC-1 checkout test with the enhanced detection version\r\n      // This will accurately track if simulation was used at any point\r\n      const { results, usedSimulation } = await runOBC1CheckoutWithDetection(sock, enableEmmc, (step, percent) => {\r\n        setCurrentStep(step);\r\n        setProgress(percent);\r\n      });\r\n      \r\n      // Update the detected simulation state based on the test results\r\n      setDetectedSimulation(usedSimulation);\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Save result to history - use the accurate simulation detection\r\n      await saveTestResult(results, 'completed', usedSimulation);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running test:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history - any error means simulation was likely used\r\n      if (results) {\r\n        await saveTestResult(results, 'error', true);\r\n      }\r\n      \r\n      // Notify parent of error\r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateOBC1Report(results);\r\n      alert(`OBC-1 report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  // Clean up simulated test results from the database\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Limit test history to a certain number of records\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'OBC-1'  // Limit only OBC-1 records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Clear all test history for this profile and component\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n\r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for OBC-1?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=OBC-1`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`obc1_real_history_${profileId}`);\r\n        localStorage.removeItem(`obc1_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete a single test history item\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Toggle multi-select mode\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n\r\n  // Toggle selection of a single history item\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Select all visible history items\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n\r\n  // Deselect all history items\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  // Delete all selected items\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to toggle section expansion\r\n  const toggleSection = (section: string) => {\r\n    setExpandedSections(prev => ({\r\n      ...prev,\r\n      [section]: !prev[section]\r\n    }));\r\n  };\r\n\r\n  // Modify the useEffect for socket detection to watch for simulation indicators\r\n  useEffect(() => {\r\n    // Check if we have real socket info saved\r\n    const socketInfo = localStorage.getItem('mccSocketInfo');\r\n    let shouldUseSimulation = true; // Default to simulation\r\n\r\n    if (socketInfo) {\r\n      try {\r\n        const parsed = JSON.parse(socketInfo);\r\n        if (parsed && parsed.isReal) {\r\n          console.log(\"📡 Using real socket based on stored configuration\");\r\n          shouldUseSimulation = false;\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error parsing socket info:\", e);\r\n      }\r\n    }\r\n\r\n    // Check the actual socket type more thoroughly\r\n    let isActuallySimulated = true;\r\n    \r\n    if (sock) {\r\n      // Direct simulation flag check\r\n      if (typeof sock.isSimulated === 'boolean') {\r\n        isActuallySimulated = sock.isSimulated;\r\n      } \r\n      // Check if it's using the simulation fallback\r\n      else if (typeof sock.simulateRead === 'function') {\r\n        isActuallySimulated = true;\r\n      }\r\n      // Check if it's a real socket with a receive method but no simulation methods\r\n      else if (typeof sock.send === 'function' && typeof sock.receive === 'function' && typeof sock.simulateRead === 'undefined') {\r\n        // Additional check to see if it's been correctly initialized\r\n        if (sock.readyState === undefined || sock.readyState === 1) { // 1 = OPEN for WebSocket\r\n          isActuallySimulated = false;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Set both states\r\n    setIsForceSimulation(shouldUseSimulation);\r\n    setDetectedSimulation(isActuallySimulated);\r\n    \r\n    console.log(`🔧 Socket analysis: Config says simulation=${shouldUseSimulation}, actual detection=${isActuallySimulated}`);\r\n    \r\n    // Set global simulation mode based on the most accurate information\r\n    setSimulationMode(isActuallySimulated);\r\n  }, [sock]);\r\n\r\n  // Optionally add automatic cleanup on component mount\r\n  useEffect(() => {\r\n    if (profileId) {\r\n      // Automatically limit history to 30 records when the component mounts\r\n      limitTestHistory(30);\r\n    }\r\n  }, [profileId]); // Only run when profileId changes\r\n\r\n  // Helper function to check voltage ranges\r\n  const isVoltageInRange = (value: string, isThreeVolt: boolean): boolean => {\r\n    const numVal = parseFloat(value);\r\n    if (isNaN(numVal)) return false;\r\n    \r\n    if (isThreeVolt) {\r\n      // 3.3V typical range (3000-3600 mV)\r\n      return numVal >= 3000 && numVal <= 3600;\r\n    } else {\r\n      // 5V typical range (4750-5250 mV)\r\n      return numVal >= 4750 && numVal <= 5250;\r\n    }\r\n  };\r\n\r\n  // Function to format the voltage display with color based on range\r\n  const formatVoltage = (value: string, isThreeVolt: boolean, isDark: boolean) => {\r\n    const isValid = isVoltageInRange(value, isThreeVolt);\r\n    \r\n    return (\r\n      <span style={{\r\n        color: isValid \r\n          ? (isDark ? '#10b981' : '#059669') \r\n          : (isDark ? '#ef4444' : '#b91c1c')\r\n      }}>\r\n        {parseFloat(value).toFixed(0)} mV\r\n      </span>\r\n    );\r\n  };\r\n\r\n  // Function to format temperature for display\r\n  const formatTemp = (value: string, isDark: boolean) => {\r\n    const numVal = parseFloat(value);\r\n    // Detecting extreme temperatures (example thresholds)\r\n    const isExtreme = numVal < -10 || numVal > 80;\r\n    \r\n    return (\r\n      <span style={{\r\n        color: isExtreme\r\n          ? (isDark ? '#ef4444' : '#b91c1c')\r\n          : (isDark ? '#fcd34d' : '#92400e')\r\n      }}>\r\n        {numVal.toFixed(1)}°C\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div className={styles.tabsContainer} style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        padding: '8px',\r\n        borderRadius: '8px',\r\n        marginBottom: '16px',\r\n      }}>\r\n        <button\r\n          onClick={() => setShowHistory(false)}\r\n          className={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Current Test\r\n        </button>\r\n        <button\r\n          onClick={() => setShowHistory(true)}\r\n          className={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Test History\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Current Test Panel */}\r\n      {!showHistory ? (\r\n        <>\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M10 1.944A11.954 11.954 0 012.166 5C2.056 5.649 2 6.319 2 7c0 5.225 3.34 9.67 8 11.317C14.66 16.67 18 12.225 18 7c0-.682-.057-1.35-.166-2.001A11.954 11.954 0 0110 1.944zM11 14a1 1 0 11-2 0 1 1 0 012 0zm0-7a1 1 0 10-2 0v3a1 1 0 102 0V7z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                OBC-1 Test Status\r\n                \r\n                {/* Add simulation indicator directly in the title */}\r\n                {(isForceSimulation || detectedSimulation) && (\r\n                  <span style={{\r\n                    fontSize: '12px',\r\n                    padding: '2px 8px',\r\n                    marginLeft: '8px',\r\n                    borderRadius: '20px',\r\n                    backgroundColor: 'rgba(245, 158, 11, 0.2)',\r\n                    color: '#f59e0b'\r\n                  }}>\r\n                    SIMULATION MODE\r\n                  </span>\r\n                )}\r\n              </h3>\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div className={styles.progressContainer}>\r\n                <div className={styles.progressLabel}>\r\n                  <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                    {currentStep || 'Waiting to start test...'}\r\n                  </span>\r\n                  <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                    {progress}%\r\n                  </span>\r\n                </div>\r\n                <div \r\n                  className={styles.progressBar}\r\n                  style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n                >\r\n                  <div \r\n                    className={styles.progressBarFill}\r\n                    style={{ \r\n                      width: `${progress}%`,\r\n                      backgroundColor: isRunning \r\n                        ? (isDarkMode ? '#4f46e5' : '#3b82f6') \r\n                        : (progress === 100 ? '#10b981' : '#3b82f6')\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Display the testing options */}\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <h4 style={{ \r\n                  fontSize: '14px', \r\n                  marginBottom: '10px',\r\n                  color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n                }}>\r\n                  Selected Test Options:\r\n                </h4>\r\n                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                  {options.map((option, index) => (\r\n                    <div key={index} style={{ \r\n                      padding: '6px 10px', \r\n                      backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                      borderRadius: '4px',\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '6px'\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {option}\r\n                    </div>\r\n                  ))}\r\n                  {options.length === 0 && (\r\n                    <div style={{ \r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      fontStyle: 'italic',\r\n                      fontSize: '13px'\r\n                    }}>\r\n                      No specific options selected. Running with defaults.\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Run/Re-run Test Button */}\r\n              <button \r\n                onClick={startTest} \r\n                className={styles.button}\r\n                disabled={isRunning}\r\n                style={{ \r\n                  backgroundColor: isRunning ? '#9ca3af' :\r\n                    hasRunTest ? '#4f46e5' : '#10b981',\r\n                  color: 'white'\r\n                }}\r\n              >\r\n                {isRunning ? (\r\n                  <>\r\n                    <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                      <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                    </svg>\r\n                    Running Test...\r\n                  </>\r\n                ) : hasRunTest ? (\r\n                  <>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Re-run Test\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Run Test\r\n                  </>\r\n                )}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Current Test Results (only shown if we have results) */}\r\n          {results && (\r\n            <div className=\"space-y-4 mt-4\">\r\n              {/* Collapsible Section: Firmware Version */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                      : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                    color: isDarkMode ? \"#d1fae5\" : \"#065f46\",\r\n                    cursor: 'pointer'\r\n                  }}\r\n                  onClick={() => toggleSection('firmware')}\r\n                >\r\n                  <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm3.293 1.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 10 5.293 7.707a1 1 0 010-1.414zM11 12a1 1 0 100 2h3a1 1 0 100-2h-3z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Firmware Version\r\n                    <svg \r\n                      xmlns=\"http://www.w3.org/2000/svg\" \r\n                      viewBox=\"0 0 20 20\" \r\n                      fill=\"currentColor\" \r\n                      style={{ \r\n                        width: '16px', \r\n                        height: '16px',\r\n                        transform: expandedSections.firmware ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                        transition: 'transform 0.2s ease-in-out'\r\n                      }}\r\n                    >\r\n                      <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                {expandedSections.firmware && (\r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                      <div style={{\r\n                        padding: '12px 16px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderRadius: '8px',\r\n                        flex: 1,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                      }}>\r\n                        <div style={{ fontSize: '13px', fontWeight: 500, color: isDarkMode ? '#9ca3af' : '#6b7280', marginBottom: '4px' }}>\r\n                          Version\r\n                        </div>\r\n                        <div style={{ fontSize: '18px', fontWeight: 600, color: isDarkMode ? '#f3f4f6' : '#111827' }}>\r\n                          {results.firmware.major}.{results.firmware.minor}.{results.firmware.patch}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Collapsible Section: Voltages */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n                      : \"linear-gradient(to right, #dbeafe, #eff6ff)\",\r\n                    color: isDarkMode ? \"#bfdbfe\" : \"#1e40af\",\r\n                    cursor: 'pointer'\r\n                  }}\r\n                  onClick={() => toggleSection('voltage')}\r\n                >\r\n                  <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Voltage & Current Summary\r\n                    <svg \r\n                      xmlns=\"http://www.w3.org/2000/svg\" \r\n                      viewBox=\"0 0 20 20\" \r\n                      fill=\"currentColor\" \r\n                      style={{ \r\n                        width: '16px', \r\n                        height: '16px',\r\n                        transform: expandedSections.voltage ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                        transition: 'transform 0.2s ease-in-out'\r\n                      }}\r\n                    >\r\n                      <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                {expandedSections.voltage && (\r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ \r\n                      display: 'grid',\r\n                      gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                      gap: '16px',\r\n                    }}>\r\n                      {/* 3V3 D */}\r\n                      <div className={styles.parameterBox} style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}>\r\n                        <div className={styles.parameterLabel}>\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                            <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          OBC-1 3V3 D\r\n                        </div>\r\n                        <span className={styles.parameterValue} style={{\r\n                          backgroundColor: results.vi.d3v3.pass ? \r\n                            (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5') : \r\n                            (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                          color: results.vi.d3v3.pass ?\r\n                            (isDarkMode ? '#10b981' : '#059669') :\r\n                            (isDarkMode ? '#ef4444' : '#b91c1c')\r\n                        }}>\r\n                          {parseFloat(results.vi.d3v3.value).toFixed(0)} mV\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {/* PS 3V3 OBC-2 */}\r\n                      <div className={styles.parameterBox} style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}>\r\n                        <div className={styles.parameterLabel}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                            <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          PS 3V3 OBC-2\r\n                        </div>\r\n                        <span className={styles.parameterValue} style={{\r\n                          backgroundColor: results.vi.ps3v3Obc2.pass ? \r\n                            (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5') : \r\n                            (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                          color: results.vi.ps3v3Obc2.pass ?\r\n                            (isDarkMode ? '#10b981' : '#059669') :\r\n                            (isDarkMode ? '#ef4444' : '#b91c1c')\r\n                        }}>\r\n                          {parseFloat(results.vi.ps3v3Obc2.value).toFixed(0)} mV\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {/* PS 5V OBC-2 */}\r\n                      <div className={styles.parameterBox} style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}>\r\n                        <div className={styles.parameterLabel}>\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                            <path fillRule=\"evenodd\" d=\"M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          PS 5V OBC-2\r\n                        </div>\r\n                        <span className={styles.parameterValue} style={{\r\n                          backgroundColor: results.vi.ps5vObc2.pass ? \r\n                            (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5') : \r\n                            (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                          color: results.vi.ps5vObc2.pass ?\r\n                            (isDarkMode ? '#10b981' : '#059669') :\r\n                            (isDarkMode ? '#ef4444' : '#b91c1c')\r\n                        }}>\r\n                          {parseFloat(results.vi.ps5vObc2.value).toFixed(0)} mV\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {/* PS 5V OBC-2 Current */}\r\n                      <div className={styles.parameterBox} style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}>\r\n                        <div className={styles.parameterLabel}>\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                            <path d=\"M13 7H7v6h6V7z\" />\r\n                            <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          PS 5V OBC-2 Current\r\n                        </div>\r\n                        <span className={styles.parameterValue}>\r\n                          {parseFloat(results.vi.ps5vObc2I).toFixed(0)} mA\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      {/* PS 3V3 OBC-2 Current */}\r\n                      <div className={styles.parameterBox} style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}>\r\n                        <div className={styles.parameterLabel}>\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                            <path d=\"M13 7H7v6h6V7z\" />\r\n                            <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          PS 3V3 OBC-2 Current\r\n                        </div>\r\n                        <span className={styles.parameterValue}>\r\n                          {parseFloat(results.vi.ps3v3Obc2I).toFixed(0)} mA\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n{/* Collapsible Section: Temperature Sensors */}\r\n<div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #92400e, #b45309)\" \r\n                      : \"linear-gradient(to right, #fef3c7, #fffbeb)\",\r\n                    color: isDarkMode ? \"#fef3c7\" : \"#92400e\",\r\n                    cursor: 'pointer'\r\n                  }}\r\n                  onClick={() => toggleSection('temperature')}\r\n                >\r\n                  <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Temperature Readings\r\n                    <svg \r\n                      xmlns=\"http://www.w3.org/2000/svg\" \r\n                      viewBox=\"0 0 20 20\" \r\n                      fill=\"currentColor\" \r\n                      style={{ \r\n                        width: '16px', \r\n                        height: '16px',\r\n                        transform: expandedSections.temperature ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                        transition: 'transform 0.2s ease-in-out'\r\n                      }}\r\n                    >\r\n                      <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                {expandedSections.temperature && (\r\n                  <div className={styles.cardContent}>\r\n                    <div className={styles.tempGrid}>\r\n                      {/* Thruster Temp 1 */}\r\n                      <div className={styles.tempCard} style={{\r\n                        backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                        borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                      }}>\r\n                        <div className={styles.tempLabel} style={{\r\n                          color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                        }}>\r\n                          Thruster 1\r\n                        </div>\r\n                        <div className={styles.tempValue} style={{\r\n                          color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                        }}>\r\n                          {parseFloat(results.temperatures.thruster1).toFixed(1)}°C\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* Thruster Temp 2 */}\r\n                      <div className={styles.tempCard} style={{\r\n                        backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                        borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                      }}>\r\n                        <div className={styles.tempLabel} style={{\r\n                          color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                        }}>\r\n                          Thruster 2\r\n                        </div>\r\n                        <div className={styles.tempValue} style={{\r\n                          color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                        }}>\r\n                          {parseFloat(results.temperatures.thruster2).toFixed(1)}°C\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      {/* LEOCAM Temps */}\r\n                      {results.temperatures.leocam.map((temp: string, i: number) => (\r\n                        <div key={i} className={styles.tempCard} style={{\r\n                          backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                          borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                        }}>\r\n                          <div className={styles.tempLabel} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            LEOCAM {i+1}\r\n                          </div>\r\n                          <div className={styles.tempValue} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            {parseFloat(temp).toFixed(1)}°C\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Collapsible Section: FPGA Voltages & Temperatures */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #6d28d9, #7c3aed)\" \r\n                      : \"linear-gradient(to right, #ede9fe, #f5f3ff)\",\r\n                    color: isDarkMode ? \"#ede9fe\" : \"#6d28d9\",\r\n                    cursor: 'pointer'\r\n                  }}\r\n                  onClick={() => toggleSection('fpga')}\r\n                >\r\n                  <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                      <path d=\"M13 7H7v6h6V7z\" />\r\n                      <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    FPGA Voltages & Temperatures\r\n                    <svg \r\n                      xmlns=\"http://www.w3.org/2000/svg\" \r\n                      viewBox=\"0 0 20 20\" \r\n                      fill=\"currentColor\" \r\n                      style={{ \r\n                        width: '16px', \r\n                        height: '16px',\r\n                        transform: expandedSections.fpga ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                        transition: 'transform 0.2s ease-in-out'\r\n                      }}\r\n                    >\r\n                      <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </h3>\r\n                  \r\n                  {/* Add simulation badge */}\r\n                  <SimulationBadge isSimulation={isForceSimulation} />\r\n                </div>\r\n                \r\n                {expandedSections.fpga && (\r\n                  <div className={styles.cardContent}>\r\n                    <div style={{ marginBottom: '16px' }}>\r\n                      <h4 style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                        Voltages\r\n                      </h4>\r\n                      \r\n                      <div style={{ \r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                        gap: '12px',\r\n                      }}>\r\n                        {/* vcc_pspll */}\r\n                        <div className={styles.parameterBox} style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                        }}>\r\n                          <div className={styles.parameterLabel}>\r\n                            vcc_pspll\r\n                          </div>\r\n                          <span className={styles.parameterValue}>\r\n                            {results.fpga.voltages.vccPspll} V\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* vcc_psbatt */}\r\n                        <div className={styles.parameterBox} style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                        }}>\r\n                          <div className={styles.parameterLabel}>\r\n                            vcc_psbatt\r\n                          </div>\r\n                          <span className={styles.parameterValue}>\r\n                            {results.fpga.voltages.vccPsbatt} V\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* vccint */}\r\n                        <div className={styles.parameterBox} style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                        }}>\r\n                          <div className={styles.parameterLabel}>\r\n                            vccint\r\n                          </div>\r\n                          <span className={styles.parameterValue}>\r\n                            {results.fpga.voltages.vccint} V\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* vccbram */}\r\n                        <div className={styles.parameterBox} style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                        }}>\r\n                          <div className={styles.parameterLabel}>\r\n                            vccbram\r\n                          </div>\r\n                          <span className={styles.parameterValue}>\r\n                            {results.fpga.voltages.vccbram} V\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        {/* vccaux */}\r\n                        <div className={styles.parameterBox} style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                        }}>\r\n                          <div className={styles.parameterLabel}>\r\n                            vccaux\r\n                          </div>\r\n                          <span className={styles.parameterValue}>\r\n                            {results.fpga.voltages.vccaux} V\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <h4 style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                        Temperatures\r\n                      </h4>\r\n                      \r\n                      <div style={{ \r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                        gap: '12px',\r\n                      }}>\r\n                        {/* PS Temp */}\r\n                        <div className={styles.tempCard} style={{\r\n                          backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                          borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                        }}>\r\n                          <div className={styles.tempLabel} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            PS Temperature\r\n                          </div>\r\n                          <div className={styles.tempValue} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            {results.fpga.temperatures.psTemp} °C\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {/* Remote Temp */}\r\n                        <div className={styles.tempCard} style={{\r\n                          backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                          borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                        }}>\r\n                          <div className={styles.tempLabel} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            Remote Temperature\r\n                          </div>\r\n                          <div className={styles.tempValue} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            {results.fpga.temperatures.remoteTemp} °C\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {/* PL Temp */}\r\n                        <div className={styles.tempCard} style={{\r\n                          backgroundColor: isDarkMode ? \"rgba(146, 64, 14, 0.1)\" : \"#fffbeb\",\r\n                          borderColor: isDarkMode ? \"rgba(252, 211, 77, 0.3)\" : \"#fcd34d\"\r\n                        }}>\r\n                          <div className={styles.tempLabel} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            PL Temperature\r\n                          </div>\r\n                          <div className={styles.tempValue} style={{\r\n                            color: isDarkMode ? \"#fcd34d\" : \"#92400e\"\r\n                          }}>\r\n                            {results.fpga.temperatures.plTemp} °C\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Collapsible Section: Kernel Info */}\r\n              <div \r\n                className={styles.card}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div \r\n                  className={styles.cardHeader} \r\n                  style={{ \r\n                    background: isDarkMode \r\n                      ? \"linear-gradient(to right, #0f766e,#134e4a)\" \r\n                        : \"linear-gradient(to right, #ccfbf1, #ecfdf5)\",\r\n                      color: isDarkMode ? \"#ccfbf1\" : \"#134e4a\",\r\n                      cursor: 'pointer'\r\n                    }}\r\n                    onClick={() => toggleSection('kernel')}\r\n                  >\r\n                    <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm3.293 1.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 10 5.293 7.707a1 1 0 010-1.414zM11 12a1 1 0 100 2h3a1 1 0 100-2h-3z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Kernel Information\r\n                      <svg \r\n                        xmlns=\"http://www.w3.org/2000/svg\" \r\n                        viewBox=\"0 0 20 20\" \r\n                        fill=\"currentColor\" \r\n                        style={{ \r\n                          width: '16px', \r\n                          height: '16px',\r\n                          transform: expandedSections.kernel ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                          transition: 'transform 0.2s ease-in-out'\r\n                        }}\r\n                      >\r\n                        <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation} />\r\n                  </div>\r\n                  \r\n                  {expandedSections.kernel && (\r\n                    <div className={styles.cardContent}>\r\n                      <div style={{ marginBottom: '16px' }}>\r\n                        <h4 style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                          System Information\r\n                        </h4>\r\n                        \r\n                        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '13px' }}>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280', width: '50%' }}>\r\n                                Uptime\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {results.kernel.uptime} s\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                1 minute load average\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {results.kernel.loads.oneMinute}\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                5 minute load average\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {results.kernel.loads.fiveMinute}\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                15 minute load average\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {results.kernel.loads.fifteenMinute}\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Number of processes\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {results.kernel.processes}\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                      \r\n                      <div>\r\n                        <h4 style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                          Memory Information\r\n                        </h4>\r\n                        \r\n                        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '13px' }}>\r\n                          <tbody>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280', width: '50%' }}>\r\n                                Total usable main memory\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.totalRam).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Available memory\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.freeRam).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Shared memory\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.sharedRam).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Buffer memory\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.bufferRam).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                            <tr>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Total swap space\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.totalSwap).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                            <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                                Available swap space\r\n                              </td>\r\n                              <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                {parseInt(results.kernel.memory.freeSwap).toLocaleString()} bytes\r\n                              </td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                {/* Collapsible Section: eMMC Test Results (conditional based on enableEmmc) */}\r\n                {enableEmmc && (\r\n                  <div \r\n                    className={styles.card}\r\n                    style={{\r\n                      backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                      borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                    }}\r\n                  >\r\n                    <div \r\n                      className={styles.cardHeader} \r\n                      style={{ \r\n                        background: isDarkMode \r\n                          ? \"linear-gradient(to right, #4f46e5, #6366f1)\" \r\n                          : \"linear-gradient(to right, #e0e7ff, #eef2ff)\",\r\n                        color: isDarkMode ? \"#e0e7ff\" : \"#4f46e5\",\r\n                        cursor: 'pointer'\r\n                      }}\r\n                      onClick={() => toggleSection('emmc')}\r\n                    >\r\n                      <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                          <path d=\"M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z\" />\r\n                        </svg>\r\n                        eMMC Test Results\r\n                        <svg \r\n                          xmlns=\"http://www.w3.org/2000/svg\" \r\n                          viewBox=\"0 0 20 20\" \r\n                          fill=\"currentColor\" \r\n                          style={{ \r\n                            width: '16px', \r\n                            height: '16px',\r\n                            transform: expandedSections.emmc ? 'rotate(180deg)' : 'rotate(0deg)',\r\n                            transition: 'transform 0.2s ease-in-out'\r\n                          }}\r\n                        >\r\n                          <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                      </h3>\r\n                      \r\n{/* Add simulation badge */}\r\n<SimulationBadge isSimulation={isForceSimulation} />\r\n                    </div>\r\n                    \r\n                    {expandedSections.emmc && (\r\n                      <div className={styles.cardContent}>\r\n                        {results.emmc.emmc0States && results.emmc.emmc0States.length > 0 && results.emmc.emmc0States[0] !== 'N.A.' ? (\r\n                          <div>\r\n                            <div style={{ marginBottom: '16px' }}>\r\n                              <h4 style={{ fontSize: '14px', fontWeight: 600, marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                eMMC State Transitions\r\n                              </h4>\r\n                              \r\n                              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '13px' }}>\r\n                                <thead>\r\n                                  <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                                    <th style={{ padding: '8px 12px', textAlign: 'left', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n                                      Test State\r\n                                    </th>\r\n                                    <th style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n                                      eMMC-0\r\n                                    </th>\r\n                                    <th style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n                                      eMMC-1\r\n                                    </th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  <tr>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      Before ON eMMC-0\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[0]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[0]}\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      After ON eMMC-0\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[1]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[1]}\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      After OFF eMMC-0\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[2]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[2]}\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      Before ON eMMC-1\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[3]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[3]}\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      After ON eMMC-1\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[4]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[4]}\r\n                                    </td>\r\n                                  </tr>\r\n                                  <tr style={{ backgroundColor: isDarkMode ? '#111827' : '#f9fafb' }}>\r\n                                    <td style={{ padding: '8px 12px', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      After OFF eMMC-1\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc0States[5]}\r\n                                    </td>\r\n                                    <td style={{ padding: '8px 12px', textAlign: 'center', borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`, color: isDarkMode ? '#e5e7eb' : '#111827' }}>\r\n                                      {results.emmc.emmc1States[5]}\r\n                                    </td>\r\n                                  </tr>\r\n                                </tbody>\r\n                              </table>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <div style={{ textAlign: 'center', padding: '16px', color: isDarkMode ? '#9ca3af' : '#6b7280' }}>\r\n                            eMMC test was skipped or no data available\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Collapsible Section: Raw Parameters */}\r\n<div \r\n  className={styles.card}\r\n  style={{\r\n    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n  }}\r\n>\r\n  <div \r\n    className={styles.cardHeader} \r\n    style={{ \r\n      background: isDarkMode \r\n        ? \"linear-gradient(to right, #1e3a8a, #2563eb)\" \r\n        : \"linear-gradient(to right, #dbeafe, #eff6ff)\",\r\n      color: isDarkMode ? \"#bfdbfe\" : \"#1e3a8a\",\r\n      cursor: 'pointer'\r\n    }}\r\n    onClick={() => toggleSection('rawParameters')}\r\n  >\r\n    <h3 className={styles.cardTitle} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n        <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n      Raw Parameter Values\r\n      <svg \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        viewBox=\"0 0 20 20\" \r\n        fill=\"currentColor\" \r\n        style={{ \r\n          width: '16px', \r\n          height: '16px',\r\n          transform: expandedSections.rawParameters ? 'rotate(180deg)' : 'rotate(0deg)',\r\n          transition: 'transform 0.2s ease-in-out'\r\n        }}\r\n      >\r\n        <path fillRule=\"evenodd\" d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n      </svg>\r\n    </h3>\r\n    \r\n    {/* Add simulation badge */}\r\n    <SimulationBadge isSimulation={isForceSimulation} />\r\n  </div>\r\n  \r\n  {expandedSections.rawParameters && (\r\n    <div className={styles.cardContent}>\r\n      <div style={{ marginBottom: '16px' }}>\r\n        <p style={{ fontSize: '14px', color: isDarkMode ? '#d1d5db' : '#6b7280' }}>\r\n          Displaying all parameters with their exact names as read from the hardware or simulation.\r\n        </p>\r\n      </div>\r\n      \r\n      {/* Firmware Parameters */}\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        fontWeight: 'bold',\r\n        margin: '16px 0 10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        Firmware Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {[\"OBC1_FW_Ver_Major\", \"OBC1_FW_Ver_Minor\", \"OBC1_FW_Ver_Patch\"].map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.rawParameters?.[param] || 'N/A'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      \r\n      {/* Kernel Parameters */}\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        fontWeight: 'bold',\r\n        margin: '20px 0 10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        Kernel Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {[\r\n            \"OBC1_Sys_uptime\", \"OBC1_Sys_loads_1m\", \"OBC1_Sys_loads_5m\", \"OBC1_Sys_loads_15m\",\r\n            \"OBC1_Sys_totalram\", \"OBC1_Sys_freeram\", \"OBC1_Sys_sharedram\", \"OBC1_Sys_bufferram\",\r\n            \"OBC1_Sys_totalswap\", \"OBC1_Sys_freeswap\", \"OBC1_Sys_procs\", \"OBC1_Sys_pad\",\r\n            \"OBC1_Sys_totalhigh\", \"OBC1_Sys_freehigh\", \"OBC1_Sys_mem_unit\"\r\n          ].map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.rawParameters?.[param] || 'N/A'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      \r\n      {/* FPGA Parameters */}\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        fontWeight: 'bold',\r\n        margin: '20px 0 10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        FPGA Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {[\r\n            \"OBC1_vcc_pspll\", \"OBC1_vcc_psbatt\", \"OBC1_vccint\", \"OBC1_vccbram\", \"OBC1_vccaux\",\r\n            \"OBC1_vcc_psddr_pll\", \"OBC1_vccpsintfp_ddr\", \"OBC1_vccint1\", \"OBC1_vccaux1\", \"OBC1_vccvrefp\",\r\n            \"OBC1_vccvrefn\", \"OBC1_vccbram1\", \"OBC1_vccplintlp\", \"OBC1_vccplintfp\", \"OBC1_vccplaux\",\r\n            \"OBC1_vccams\", \"OBC1_vccpsintlp\", \"OBC1_vccpsintfp\", \"OBC1_vccpsaux\", \"OBC1_vccpsddr\",\r\n            \"OBC1_vccpsio3\", \"OBC1_vccpsio0\", \"OBC1_vccpsio1\", \"OBC1_vccpsio2\", \"OBC1_psmgtravcc\",\r\n            \"OBC1_psmgtravtt\", \"OBC1_vccams1\", \"OBC1_ps_temp\", \"OBC1_remote_temp\", \"OBC1_pl_temp\"\r\n          ].map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.rawParameters?.[param] || 'N/A'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      \r\n      {/* Voltage and Current Parameters */}\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        fontWeight: 'bold',\r\n        margin: '20px 0 10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        Voltage and Current Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {[\r\n            \"OBC1_3V3_D\", \"OBC1_PS_3V3_OBC2_V\", \"OBC1_PS_5V_OBC2_V\", \r\n            \"OBC1_PS_5V_OBC2_I\", \"OBC1_PS_3V3_OBC2_I\"\r\n          ].map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.rawParameters?.[param] || 'N/A'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      \r\n      {/* Temperature Parameters */}\r\n      <h4 style={{ \r\n        fontSize: '14px', \r\n        fontWeight: 'bold',\r\n        margin: '20px 0 10px',\r\n        color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n      }}>\r\n        Temperature Parameters\r\n      </h4>\r\n      \r\n      <table \r\n        className={styles.table}\r\n        style={{\r\n          color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n          width: '100%',\r\n          borderCollapse: 'collapse',\r\n          fontSize: '14px'\r\n        }}\r\n      >\r\n        <thead \r\n          className={styles.tableHeader}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n            color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n          }}\r\n        >\r\n          <tr>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n            <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {[\r\n            \"OBC1_thruster_ch1_T\", \"OBC1_thruster_ch2_T\", \r\n            \"OBC1_leocam_ch1_T\", \"OBC1_leocam_ch2_T\",\r\n            \"OBC1_leocam_ch3_T\", \"OBC1_leocam_ch4_T\"\r\n          ].map((param, index) => (\r\n            <tr \r\n              key={param} \r\n              className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n              style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n            >\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n              <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{results.rawParameters?.[param] || 'N/A'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      \r\n      {/* eMMC Parameters (if enabled) */}\r\n      {enableEmmc && (\r\n        <>\r\n          <h4 style={{ \r\n            fontSize: '14px', \r\n            fontWeight: 'bold',\r\n            margin: '20px 0 10px',\r\n            color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n          }}>\r\n            eMMC Parameters\r\n          </h4>\r\n          \r\n          <table \r\n            className={styles.table}\r\n            style={{\r\n              color: isDarkMode ? \"#e5e7eb\" : \"inherit\",\r\n              width: '100%',\r\n              borderCollapse: 'collapse',\r\n              fontSize: '14px'\r\n            }}\r\n          >\r\n            <thead \r\n              className={styles.tableHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                color: isDarkMode ? \"#d1d5db\" : \"#6b7280\"\r\n              }}\r\n            >\r\n              <tr>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Parameter</th>\r\n                <th style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px', textAlign: 'left' }}>Value</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Show the raw values for all states of eMMC */}\r\n{Object.entries(results.rawParameters || {})\r\n  .filter(([key]) => key.includes('eMMC'))\r\n  .map(([param, value], index) => (\r\n    <tr \r\n      key={param} \r\n      className={index % 2 === 1 ? styles.tableRowAlt : ''}\r\n      style={{ backgroundColor: index % 2 === 1 && isDarkMode ? \"#111827\" : undefined }}\r\n    >\r\n      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{param}</td>\r\n      <td style={{ borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\", padding: '8px 12px' }}>{String(value) || 'N/A'}</td>\r\n    </tr>\r\n  ))}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n    </div>\r\n  )}\r\n</div>\r\n              \r\n              <div>\r\n                <button \r\n                  onClick={generateReport}\r\n                  className={styles.reportButton}\r\n                  style={{\r\n                    backgroundColor: \"#10b981\",\r\n                    color: \"white\"\r\n                  }}\r\n                >\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  Generate Report\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      ) : (\r\n        /* Test History Panel */\r\n        <div \r\n          className={styles.card}\r\n          style={{\r\n            backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n            borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n          }}\r\n        >\r\n          <div \r\n            className={styles.cardHeader}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n              background: isDarkMode \r\n                ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n                : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n            }}\r\n          >\r\n            <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n              OBC-1 Test History\r\n            </h3>\r\n          </div>\r\n          \r\n          <div className={styles.cardContent}>\r\n            {historyLoading ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n              }}>\r\n                <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                  <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                </svg>\r\n                <p>Loading test history...</p>\r\n              </div>\r\n            ) : testHistory.length === 0 ? (\r\n              <div style={{ \r\n                textAlign: 'center',\r\n                padding: '20px',\r\n                color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                fontStyle: 'italic'\r\n              }}>\r\n                <p>No test history available for this profile.</p>\r\n                <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                  Run a test to start building your history.\r\n                </p>\r\n                \r\n                {!profileId && (\r\n                  <div style={{\r\n                    marginTop: '16px',\r\n                    padding: '12px',\r\n                    backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                    borderRadius: '6px',\r\n                    color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {/* Visualization Controls */}\r\n                <div style={{ marginBottom: '16px' }}>\r\n                  <label style={{ \r\n                    display: 'block',\r\n                    marginBottom: '8px',\r\n                    color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                    fontWeight: 500\r\n                  }}>\r\n                    Select Metric:\r\n                  </label>\r\n                  <select\r\n                    value={selectedMetric}\r\n                    onChange={(e) => setSelectedMetric(e.target.value)}\r\n                    style={{\r\n                      width: '100%',\r\n                      padding: '8px 12px',\r\n                      borderRadius: '6px',\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                    {metricOptions.map(option => (\r\n                      <option key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                \r\n                {/* Metric Trend Chart */}\r\n                <div style={{\r\n                  height: '300px',\r\n                  marginBottom: '20px',\r\n                  backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                  padding: '16px',\r\n                  borderRadius: '8px'\r\n                }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    {metricOptions.find(m => m.value === selectedMetric)?.label} Trend\r\n                  </h4>\r\n                  \r\n                  <TestHistoryChart\r\n                    data={testHistory}\r\n                    metricPath={selectedMetric}\r\n                    metricLabel={metricOptions.find(m => m.value === selectedMetric)?.label || 'Value'}\r\n                    isDarkMode={isDarkMode}\r\n                  />\r\n                </div>\r\n\r\n                {/* Multi-select controls */}\r\n                <div style={{ \r\n                  marginTop: '20px', \r\n                  marginBottom: '12px', \r\n                  display: 'flex', \r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <div>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                      marginBottom: '6px'\r\n                    }}>\r\n                      Test History Records\r\n                    </h4>\r\n                  </div>\r\n                  \r\n                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                    {/* Toggle button for multi-select mode */}\r\n                    <button\r\n                      onClick={toggleMultiSelectMode}\r\n                      style={{\r\n                        backgroundColor: isMultiSelectMode \r\n                          ? (isDarkMode ? '#4f46e5' : '#6366f1') \r\n                          : (isDarkMode ? '#1f2937' : '#f3f4f6'),\r\n                        color: isMultiSelectMode \r\n                          ? 'white' \r\n                          : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        padding: '6px 12px',\r\n                        fontSize: '13px',\r\n                        fontWeight: 500,\r\n                        cursor: 'pointer',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '6px',\r\n                        transition: 'all 0.2s ease'\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\r\n                        <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {isMultiSelectMode ? 'Exit Selection Mode' : 'Select Items'}\r\n                    </button>\r\n                    \r\n                    {/* Only show these controls when in multi-select mode */}\r\n                    {isMultiSelectMode && (\r\n                      <>\r\n                        <button\r\n                          onClick={selectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Select All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deselectAllItems}\r\n                          style={{\r\n                            backgroundColor: 'transparent',\r\n                            color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 8px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: 'pointer'\r\n                          }}\r\n                        >\r\n                          Deselect All\r\n                        </button>\r\n                        \r\n                        <button\r\n                          onClick={deleteSelectedItems}\r\n                          disabled={selectedItems.length === 0}\r\n                          style={{\r\n                            backgroundColor: selectedItems.length === 0 \r\n                              ? (isDarkMode ? '#6b7280' : '#9ca3af') \r\n                              : (isDarkMode ? '#dc2626' : '#ef4444'),\r\n                            color: 'white',\r\n                            border: 'none',\r\n                            borderRadius: '6px',\r\n                            padding: '6px 12px',\r\n                            fontSize: '13px',\r\n                            fontWeight: 500,\r\n                            cursor: selectedItems.length === 0 ? 'not-allowed' : 'pointer',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            gap: '6px'\r\n                          }}\r\n                        >\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                            <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                          </svg>\r\n                          Delete Selected ({selectedItems.length})\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Test History Table - using the imported TestHistoryTable component */}\r\n                <TestHistoryTable\r\n                  testHistory={testHistory}\r\n                  isDarkMode={isDarkMode}\r\n                  onViewDetails={(item) => setSelectedHistoryItem(item)}\r\n                />\r\n                \r\n                {/* Additional Metrics Summary */}\r\n                <div style={{ marginTop: '20px' }}>\r\n                  <h4 style={{ \r\n                    fontSize: '14px',\r\n                    fontWeight: 600,\r\n                    marginBottom: '12px',\r\n                    color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                  }}>\r\n                    Key Metrics Summary\r\n                  </h4>\r\n                  \r\n                  <div style={{ \r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                    gap: '12px'\r\n                  }}>\r\n                    {/* Metric Card: Average 3V3 D Voltage */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Average 3V3 D Voltage\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const values = testHistory\r\n                            .map(item => extractValue(item.results, 'vi.d3v3.value'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (values.length === 0) return 'N/A';\r\n                          \r\n                          const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                          return `${avg.toFixed(2)} mV`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: 3V3 Pass Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        3V3 Pass Rate\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          const testResults = testHistory\r\n                            .map(item => item.results?.vi?.d3v3?.pass)\r\n                            .filter(pass => pass !== undefined);\r\n                            \r\n                          if (testResults.length === 0) return 'N/A';\r\n                          \r\n                          const passCount = testResults.filter(Boolean).length;\r\n                          const passRate = (passCount / testResults.length) * 100;\r\n                          \r\n                          return `${passRate.toFixed(1)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Average Temperature */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Avg. Thruster Temp\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          // Get all thruster1 temperatures from history\r\n                          const temps1 = testHistory\r\n                            .map(item => extractValue(item.results, 'temperatures.thruster1'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          // Get all thruster2 temperatures from history\r\n                          const temps2 = testHistory\r\n                            .map(item => extractValue(item.results, 'temperatures.thruster2'))\r\n                            .filter(v => v !== null) as number[];\r\n                            \r\n                          if (temps1.length === 0 && temps2.length === 0) return 'N/A';\r\n                          \r\n                          // Calculate average of all readings\r\n                          const allTemps = [...temps1, ...temps2];\r\n                          const avg = allTemps.reduce((sum, v) => sum + v, 0) / allTemps.length;\r\n                          \r\n                          return `${avg.toFixed(1)} °C`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {/* Metric Card: Test Success Rate */}\r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '8px',\r\n                      padding: '12px',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                    }}>\r\n                      <div style={{ \r\n                        fontSize: '12px',\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Overall Success Rate\r\n                      </div>\r\n                      <div style={{ \r\n                        fontSize: '18px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        {(() => {\r\n                          if (testHistory.length === 0) return 'N/A';\r\n                          \r\n                          const successes = testHistory.filter(item => item.status === 'completed').length;\r\n                          const successRate = (successes / testHistory.length) * 100;\r\n                          \r\n                          return `${successRate.toFixed(0)}%`;\r\n                        })()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Export History Button */}\r\n                <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'flex-end', gap: '10px', flexWrap: 'wrap' }}>\r\n                  {/* Clear All History Button - New */}\r\n                  <button \r\n                    onClick={clearAllTestHistory}\r\n                    style={{\r\n                      backgroundColor: '#dc2626', /* Deeper red for more dangerous action */\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clear All History\r\n                  </button>\r\n                  \r\n                  {/* Clean Up Simulated Data Button */}\r\n                  <button \r\n                    onClick={() => cleanupSimulatedData()}\r\n                    style={{\r\n                      backgroundColor: '#ef4444',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Clean Up Simulated Data\r\n                  </button>\r\n                  \r\n                  {/* Limit History Button */}\r\n                  <button \r\n                    onClick={() => limitTestHistory(30)}\r\n                    style={{\r\n                      backgroundColor: '#3b82f6',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Limit History (30 Records)\r\n                  </button>\r\n                  \r\n                  <button \r\n                    onClick={() => {\r\n                      // Implement history export functionality\r\n                      const historyData = JSON.stringify(testHistory, null, 2);\r\n                      const blob = new Blob([historyData], { type: 'application/json' });\r\n                      const url = URL.createObjectURL(blob);\r\n                      const a = document.createElement('a');\r\n                      a.href = url;\r\n                      a.download = `obc1_test_history_${profileId || 'unknown'}.json`;\r\n                      document.body.appendChild(a);\r\n                      a.click();\r\n                      document.body.removeChild(a);\r\n                      URL.revokeObjectURL(url);\r\n                    }}\r\n                    style={{\r\n                      backgroundColor: '#10b981',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      padding: '8px 16px',\r\n                      fontSize: '14px',\r\n                      fontWeight: 500,\r\n                      cursor: 'pointer',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '8px'\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                      <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Export Test History\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Status Messages for Cleanup and Limit Operations */}\r\n                {(cleanupMessage || limitMessage) && (\r\n                  <div style={{ \r\n                    marginTop: '12px',\r\n                    padding: '12px',\r\n                    borderRadius: '6px',\r\n                    backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    {cleanupMessage && (\r\n                      <div style={{ \r\n                        color: cleanupMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c'),\r\n                        marginBottom: limitMessage ? '8px' : '0'\r\n                      }}>\r\n                        {cleanupMessage}\r\n                      </div>\r\n                    )}\r\n                    \r\n                    {limitMessage && (\r\n                      <div style={{ \r\n                        color: limitMessage.includes('✅') ? \r\n                          (isDarkMode ? '#34d399' : '#047857') : \r\n                          (isDarkMode ? '#f87171' : '#b91c1c')\r\n                      }}>\r\n                        {limitMessage}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Test Details Modal */}\r\n      {selectedHistoryItem && (\r\n        <TestDetailsModal\r\n          test={selectedHistoryItem}\r\n          onClose={() => setSelectedHistoryItem(null)}\r\n          isDarkMode={isDarkMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};"],"names":[],"mappings":"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","debugId":null}}]
}