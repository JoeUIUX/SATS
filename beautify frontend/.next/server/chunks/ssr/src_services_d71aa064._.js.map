{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc1Checkout.ts"],"sourcesContent":["// src/services/checkout/obc1Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Run the OBC-1 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param enableEmmc Whether to test the eMMC functionality\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC1Checkout(\r\n  sock: any, \r\n  enableEmmc: boolean,\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      kernel: { \r\n        uptime: '', \r\n        loads: { oneMinute: '', fiveMinute: '', fifteenMinute: '' },\r\n        memory: { \r\n          totalRam: '', freeRam: '', sharedRam: '', bufferRam: '', \r\n          totalSwap: '', freeSwap: '', memUnit: '', totalHigh: '', freeHigh: '' \r\n        },\r\n        processes: ''\r\n      },\r\n      fpga: { \r\n        voltages: { \r\n          vccPspll: '', vccPsbatt: '', vccint: '', vccbram: '', vccaux: '' \r\n          // Add others as needed\r\n        },\r\n        temperatures: { psTemp: '', remoteTemp: '', plTemp: '' }\r\n      },\r\n      vi: {\r\n        d3v3: { value: '', pass: false },\r\n        ps3v3Obc2: { value: '', pass: false },\r\n        ps5vObc2: { value: '', pass: false },\r\n        ps5vObc2I: '',\r\n        ps3v3Obc2I: ''\r\n      },\r\n      temperatures: {\r\n        thruster1: '',\r\n        thruster2: '',\r\n        leocam: ['', '', '', ''] \r\n      },\r\n      emmc: {\r\n        emmc0States: [] as string[],  // Define explicit type as string array\r\n        emmc1States: [] as string[]   // Define explicit type as string array\r\n      },\r\n      reportGenerated: false\r\n    };\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading Firmware Version', 5);\r\n    const fwVars = [\"OBC1_FW_Ver_Major\", \"OBC1_FW_Ver_Minor\", \"OBC1_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 2: Read kernel info (20%)\r\n    onProgress('Reading Kernel Information', 20);\r\n    const kernelVars = [\r\n      \"OBC1_Sys_uptime\", \"OBC1_Sys_loads_1m\", \"OBC1_Sys_loads_5m\", \"OBC1_Sys_loads_15m\",\r\n      \"OBC1_Sys_totalram\", \"OBC1_Sys_freeram\", \"OBC1_Sys_sharedram\", \"OBC1_Sys_bufferram\",\r\n      \"OBC1_Sys_totalswap\", \"OBC1_Sys_freeswap\", \"OBC1_Sys_procs\", \"OBC1_Sys_pad\",\r\n      \"OBC1_Sys_totalhigh\", \"OBC1_Sys_freehigh\", \"OBC1_Sys_mem_unit\"\r\n    ];\r\n    \r\n    try {\r\n      const kernelResults = await mccifRead(sock, kernelVars);\r\n      results.kernel.uptime = safeParseValue(kernelResults[0]);\r\n      results.kernel.loads.oneMinute = safeParseValue(kernelResults[1]);\r\n      results.kernel.loads.fiveMinute = safeParseValue(kernelResults[2]);\r\n      results.kernel.loads.fifteenMinute = safeParseValue(kernelResults[3]);\r\n      results.kernel.memory.totalRam = safeParseValue(kernelResults[4]);\r\n      results.kernel.memory.freeRam = safeParseValue(kernelResults[5]);\r\n      results.kernel.memory.sharedRam = safeParseValue(kernelResults[6]);\r\n      results.kernel.memory.bufferRam = safeParseValue(kernelResults[7]);\r\n      results.kernel.memory.totalSwap = safeParseValue(kernelResults[8]);\r\n      results.kernel.memory.freeSwap = safeParseValue(kernelResults[9]);\r\n      results.kernel.processes = safeParseValue(kernelResults[10]);\r\n      // Skip pad\r\n      results.kernel.memory.totalHigh = safeParseValue(kernelResults[12]);\r\n      results.kernel.memory.freeHigh = safeParseValue(kernelResults[13]);\r\n      results.kernel.memory.memUnit = safeParseValue(kernelResults[14]);\r\n    } catch (error) {\r\n      console.error(\"Error reading kernel info:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 3: Read FPGA values (40%)\r\n    onProgress('Reading FPGA Values', 40);\r\n    const fpgaVars = [\r\n      \"OBC1_vcc_pspll\", \"OBC1_vcc_psbatt\", \"OBC1_vccint\", \"OBC1_vccbram\", \"OBC1_vccaux\",\r\n      \"OBC1_vcc_psddr_pll\", \"OBC1_vccpsintfp_ddr\", \"OBC1_vccint1\", \"OBC1_vccaux1\", \"OBC1_vccvrefp\",\r\n      \"OBC1_vccvrefn\", \"OBC1_vccbram1\", \"OBC1_vccplintlp\", \"OBC1_vccplintfp\", \"OBC1_vccplaux\",\r\n      \"OBC1_vccams\", \"OBC1_vccpsintlp\", \"OBC1_vccpsintfp\", \"OBC1_vccpsaux\", \"OBC1_vccpsddr\",\r\n      \"OBC1_vccpsio3\", \"OBC1_vccpsio0\", \"OBC1_vccpsio1\", \"OBC1_vccpsio2\", \"OBC1_psmgtravcc\",\r\n      \"OBC1_psmgtravtt\", \"OBC1_vccams1\", \"OBC1_ps_temp\", \"OBC1_remote_temp\", \"OBC1_pl_temp\"\r\n    ];\r\n    \r\n    try {\r\n      const fpgaResults = await mccifRead(sock, fpgaVars);\r\n      \r\n      // First 27 are voltages, last 3 are temperatures\r\n      results.fpga.voltages.vccPspll = safeParseValue(fpgaResults[0]);\r\n      results.fpga.voltages.vccPsbatt = safeParseValue(fpgaResults[1]);\r\n      results.fpga.voltages.vccint = safeParseValue(fpgaResults[2]);\r\n      results.fpga.voltages.vccbram = safeParseValue(fpgaResults[3]);\r\n      results.fpga.voltages.vccaux = safeParseValue(fpgaResults[4]);\r\n      // ... Set other voltages\r\n\r\n      results.fpga.temperatures.psTemp = safeParseValue(fpgaResults[27]);\r\n      results.fpga.temperatures.remoteTemp = safeParseValue(fpgaResults[28]);\r\n      results.fpga.temperatures.plTemp = safeParseValue(fpgaResults[29]);\r\n    } catch (error) {\r\n      console.error(\"Error reading FPGA values:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 4: Read voltage and current (60%)\r\n    onProgress('Reading Voltage and Current', 60);\r\n    const viVars = [\r\n      \"OBC1_3V3_D\", \"OBC1_PS_3V3_OBC2_V\", \"OBC1_PS_5V_OBC2_V\", \r\n      \"OBC1_PS_5V_OBC2_I\", \"OBC1_PS_3V3_OBC2_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      \r\n      const d3v3Value = safeParseValue(viResults[0]);\r\n      const ps3v3Obc2Value = safeParseValue(viResults[1]);\r\n      const ps5vObc2Value = safeParseValue(viResults[2]);\r\n      \r\n      results.vi.d3v3 = { \r\n        value: d3v3Value, \r\n        pass: checkVoltage(d3v3Value, true) \r\n      };\r\n      results.vi.ps3v3Obc2 = { \r\n        value: ps3v3Obc2Value, \r\n        pass: checkVoltage(ps3v3Obc2Value, true) \r\n      };\r\n      results.vi.ps5vObc2 = { \r\n        value: ps5vObc2Value, \r\n        pass: checkVoltage(ps5vObc2Value, false) \r\n      };\r\n      results.vi.ps5vObc2I = safeParseValue(viResults[3]);\r\n      results.vi.ps3v3Obc2I = safeParseValue(viResults[4]);\r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n    // Step 5: Read temperature sensors (80%)\r\n    onProgress('Reading Temperature Sensors', 80);\r\n    const tempVars = [\r\n      \"OBC1_thruster_ch1_T\", \"OBC1_thruster_ch2_T\", \r\n      \"OBC1_leocam_ch1_T\", \"OBC1_leocam_ch2_T\",\r\n      \"OBC1_leocam_ch3_T\", \"OBC1_leocam_ch4_T\"\r\n    ];\r\n    \r\n    try {\r\n      const tempResults = await mccifRead(sock, tempVars);\r\n      \r\n      results.temperatures.thruster1 = safeParseValue(tempResults[0]);\r\n      results.temperatures.thruster2 = safeParseValue(tempResults[1]);\r\n      results.temperatures.leocam[0] = safeParseValue(tempResults[2]);\r\n      results.temperatures.leocam[1] = safeParseValue(tempResults[3]);\r\n      results.temperatures.leocam[2] = safeParseValue(tempResults[4]);\r\n      results.temperatures.leocam[3] = safeParseValue(tempResults[5]);\r\n    } catch (error) {\r\n      console.error(\"Error reading temperature sensors:\", error);\r\n      // Continue with other tests despite this error\r\n    }\r\n\r\n// Step 6: EMMC test if enabled (90-100%)\r\nif (enableEmmc) {\r\n  onProgress('Testing eMMC', 90);\r\n  \r\n  const emmcVars = [\"OBC1_Q8_eMMC0_state\", \"OBC1_Q8_eMMC1_state\"];\r\n  \r\n  try {\r\n    // Initial check\r\n    const emmcResult1 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult1[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult1[1]));\r\n    \r\n    // Modified command format: OBC1_Emmc_Control needs 8 or fewer tokens\r\n    // Test eMMC0 - Use single digit values instead of multi-digit\r\n    // Change from value=1 to value=1 (same in this case but follow the pattern)\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 1);\r\n    const emmcResult2 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult2[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult2[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 3);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 5);\r\n    const emmcResult3 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult3[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult3[1]));\r\n    \r\n    // Test eMMC1\r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 2);\r\n    const emmcResult4 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult4[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult4[1]));\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 4);\r\n    await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds\r\n    \r\n    await mccifSet(sock, \"OBC1_Emmc_Control\", 6);\r\n    const emmcResult5 = await mccifRead(sock, emmcVars);\r\n    results.emmc.emmc0States.push(safeParseValue(emmcResult5[0]));\r\n    results.emmc.emmc1States.push(safeParseValue(emmcResult5[1]));\r\n  } catch (error) {\r\n    console.error(\"Error during eMMC test:\", error);\r\n    // Fill with N/A values if the test fails\r\n    results.emmc.emmc0States = Array(6).fill('N.A.');\r\n    results.emmc.emmc1States = Array(6).fill('N.A.');\r\n  }\r\n} else {\r\n  // If eMMC test is disabled, set empty results\r\n  results.emmc.emmc0States = Array(6).fill('N.A.');\r\n  results.emmc.emmc1States = Array(6).fill('N.A.');\r\n}\r\n\r\n    // Complete checkout (100%)\r\n    onProgress('Checkout Complete', 100);\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-1 checkout:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if voltage is within acceptable range\r\n * \r\n * @param value Voltage value as a string (in mV)\r\n * @param isThreeVolt Whether this is a 3.3V check (true) or 5V check (false)\r\n * @returns True if the voltage is within acceptable range\r\n */\r\nfunction checkVoltage(value: string, isThreeVolt: boolean): boolean {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return false;\r\n  }\r\n  \r\n  if (isThreeVolt) {\r\n    // 3.3V check (typically 3000-3600 mV)\r\n    return numValue >= 3000 && numValue <= 3600;\r\n  } else {\r\n    // 5V check (typically 4750-5250 mV)\r\n    return numValue >= 4750 && numValue <= 5250;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc1Report.ts"],"sourcesContent":["// src/services/reports/obc1Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-1 checkout results\r\n * \r\n * @param results The OBC-1 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC1Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-1_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-1 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-1 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Kernel Information section\r\n        new Paragraph({\r\n          text: \"* Kernel Information:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create kernel info table\r\n        createKernelInfoTable(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // FPGA section\r\n        new Paragraph({\r\n          text: \"* FPGA Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create FPGA info paragraphs\r\n        ...createFpgaInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Temperature section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Temperature Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create VI info paragraphs\r\n        ...createViInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // eMMC section (if enabled)\r\n        new Paragraph({\r\n          text: \"* eMMC test summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        \r\n        // Create eMMC info paragraphs\r\n        ...createEmmcInfoParagraphs(results),\r\n        \r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function to create kernel info table\r\nfunction createKernelInfoTable(results: any): Table {\r\n  const rows = [\r\n    ['Uptime', `${results.kernel.uptime} s`],\r\n    ['1 minute average loads', results.kernel.loads.oneMinute],\r\n    ['5 minutes average loads', results.kernel.loads.fiveMinute],\r\n    ['15 minutes average loads', results.kernel.loads.fifteenMinute],\r\n    ['Total usable main memory size', `${results.kernel.memory.totalRam} bytes`],\r\n    ['Available memory size', `${results.kernel.memory.freeRam} bytes`],\r\n    ['Amount of shared memory', `${results.kernel.memory.sharedRam} bytes`],\r\n    ['Memory used by buffers', `${results.kernel.memory.bufferRam} bytes`],\r\n    ['Total swap space size', `${results.kernel.memory.totalSwap} bytes`],\r\n    ['Swap space still available', `${results.kernel.memory.freeSwap} bytes`],\r\n    ['Number of current processes', `${results.kernel.processes} bytes`],\r\n    ['Total high memory size', `${results.kernel.memory.totalHigh} bytes`],\r\n    ['Available high memory size', `${results.kernel.memory.freeHigh} bytes`],\r\n    ['Memory unit size in bytes', `${results.kernel.memory.memUnit} bytes`]\r\n  ].map(row => new TableRow({\r\n    children: [\r\n      new TableCell({\r\n        children: [new Paragraph(row[0])],\r\n        width: { size: 60, type: WidthType.PERCENTAGE }\r\n      }),\r\n      new TableCell({\r\n        children: [new Paragraph(row[1])],\r\n        width: { size: 40, type: WidthType.PERCENTAGE }\r\n      })\r\n    ]\r\n  }));\r\n\r\n  return new Table({\r\n    rows,\r\n    width: { size: 100, type: WidthType.PERCENTAGE },\r\n    borders: {\r\n      top: { style: BorderStyle.SINGLE, size: 1 },\r\n      bottom: { style: BorderStyle.SINGLE, size: 1 },\r\n      left: { style: BorderStyle.SINGLE, size: 1 },\r\n      right: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideHorizontal: { style: BorderStyle.SINGLE, size: 1 },\r\n      insideVertical: { style: BorderStyle.SINGLE, size: 1 }\r\n    }\r\n  });\r\n}\r\n\r\n// Helper function to create FPGA info paragraphs\r\nfunction createFpgaInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`vcc_pspll       : ${padString(results.fpga.voltages.vccPspll, 4)} V`),\r\n    new Paragraph(`vcc_psbatt      : ${padString(results.fpga.voltages.vccPsbatt, 4)} V`),\r\n    new Paragraph(`vccint          : ${padString(results.fpga.voltages.vccint, 4)} V`),\r\n    new Paragraph(`vccbram         : ${padString(results.fpga.voltages.vccbram, 4)} V`),\r\n    new Paragraph(`vccaux          : ${padString(results.fpga.voltages.vccaux, 4)} V`),\r\n    // ... add other voltages as needed\r\n    new Paragraph(`ps_temp         : ${padString(results.fpga.temperatures.psTemp, 4)} deg C`),\r\n    new Paragraph(`remote_temp     : ${padString(results.fpga.temperatures.remoteTemp, 4)} deg C`),\r\n    new Paragraph(`pl_temp         : ${padString(results.fpga.temperatures.plTemp, 4)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create VI info paragraphs\r\nfunction createViInfoParagraphs(results: any): Paragraph[] {\r\n  return [\r\n    new Paragraph(`OBC-1 3V3 D V           : ${padString(results.vi.d3v3.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 V    : ${padString(results.vi.ps3v3Obc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 V     : ${padString(results.vi.ps5vObc2.value, 4)} mV`),\r\n    new Paragraph(`OBC-1 PS 5V OBC-2 I     : ${padString(results.vi.ps5vObc2I, 4)} mA`),\r\n    new Paragraph(`OBC-1 PS 3V3 OBC-2 I    : ${padString(results.vi.ps3v3Obc2I, 4)} mA`),\r\n    new Paragraph(``),\r\n    new Paragraph(`Thruster thermistor 1   : ${padString(results.temperatures.thruster1, 3)} deg C`),\r\n    new Paragraph(`Thruster thermistor 2   : ${padString(results.temperatures.thruster2, 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 1     : ${padString(results.temperatures.leocam[0], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 2     : ${padString(results.temperatures.leocam[1], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 3     : ${padString(results.temperatures.leocam[2], 3)} deg C`),\r\n    new Paragraph(`LEOCAM thermistor 4     : ${padString(results.temperatures.leocam[3], 3)} deg C`)\r\n  ];\r\n}\r\n\r\n// Helper function to create eMMC info paragraphs\r\nfunction createEmmcInfoParagraphs(results: any): Paragraph[] {\r\n  if (results.emmc.emmc0States.length === 0 || results.emmc.emmc0States[0] === 'N.A.') {\r\n    return [new Paragraph('eMMC test was not performed')];\r\n  }\r\n  \r\n  return [\r\n    new Paragraph('eMMC state before on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[0], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[0], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[1], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[1], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-0 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[2], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[2], 3)}`),\r\n    new Paragraph('eMMC state before on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[3], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[3], 3)}`),\r\n    new Paragraph('eMMC state after on eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[4], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[4], 3)}`),\r\n    new Paragraph('eMMC state after off eMMC-1 : -'),\r\n    new Paragraph(`eMMC-0 : ${padString(results.emmc.emmc0States[5], 3)}`),\r\n    new Paragraph(`eMMC-1 : ${padString(results.emmc.emmc1States[5], 3)}`)\r\n];\r\n}\r\n\r\n/**\r\n* Utility function to pad a string to a specific length\r\n* \r\n* @param value The string value to pad\r\n* @param length The desired length\r\n* @returns The padded string\r\n*/\r\nfunction padString(value: string, length: number): string {\r\nif (!value) return ''.padStart(length, ' ');\r\nreturn value.padStart(length, ' ');\r\n}\r\n        "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/checkout/obc2Checkout.ts"],"sourcesContent":["// src/services/checkout/obc2Checkout.ts\r\nimport { mccifSet, mccifRead } from '@/utils/mccUtils';\r\n\r\n// Progress callback type\r\ntype ProgressCallback = (step: string, percent: number) => void;\r\n\r\n/**\r\n * Helper function to safely parse values from MCC response\r\n * Handle cases where the response might be undefined or not in the expected format\r\n */\r\nconst safeParseValue = (result: string | undefined): string => {\r\n  if (!result) return \"unknown\";\r\n  const parts = result.split('=');\r\n  return parts.length > 1 ? parts[1] : \"unknown\";\r\n};\r\n\r\n/**\r\n * Check if memory test was successful by comparing before/after values\r\n * @param values Array of test values to check\r\n * @returns Pass/Fail string\r\n */\r\nfunction memCheck(values: string[]): string {\r\n  if (values.length < 8) return \"[FAIL]\";\r\n  \r\n  const writeSuccessBefore = parseInt(values[0]);\r\n  const readSuccessBefore = parseInt(values[1]);\r\n  const writeFailBefore = parseInt(values[2]);\r\n  const readFailBefore = parseInt(values[3]);\r\n  \r\n  const writeSuccessAfter = parseInt(values[4]);\r\n  const readSuccessAfter = parseInt(values[5]);\r\n  const writeFailAfter = parseInt(values[6]);\r\n  const readFailAfter = parseInt(values[7]);\r\n  \r\n  if ((writeSuccessAfter - writeSuccessBefore) > 0 &&\r\n      (readSuccessAfter - readSuccessBefore) > 0 &&\r\n      (writeFailAfter - writeFailBefore) === 0 &&\r\n      (readFailAfter - readFailBefore) === 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check CAN communication by comparing before/after values\r\n * @param valuesBefore Array of test values before test\r\n * @param valuesAfter Array of test values after test\r\n * @param packetOffset Offset for acknowledgement packets\r\n * @returns Pass/Fail string\r\n */\r\nfunction canCheck(valuesBefore: string[], valuesAfter: string[], packetOffset: number): string {\r\n  if (valuesBefore.length < packetOffset + 5 || valuesAfter.length < packetOffset + 5) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Calculate differences in transmitted packets\r\n  const hkpTxDiff = parseInt(valuesAfter[0]) - parseInt(valuesBefore[0]);\r\n  const cfgTxDiff = parseInt(valuesAfter[1]) - parseInt(valuesBefore[1]);\r\n  const metTxDiff = parseInt(valuesAfter[2]) - parseInt(valuesBefore[2]);\r\n  const etcTxDiff = parseInt(valuesAfter[3]) - parseInt(valuesBefore[3]);\r\n  const uhfTxDiff = parseInt(valuesAfter[4]) - parseInt(valuesBefore[4]);\r\n  \r\n  // Calculate differences in acknowledged packets\r\n  const hkpAckDiff = parseInt(valuesAfter[packetOffset + 0]) - parseInt(valuesBefore[packetOffset + 0]);\r\n  const cfgAckDiff = parseInt(valuesAfter[packetOffset + 1]) - parseInt(valuesBefore[packetOffset + 1]);\r\n  const metAckDiff = parseInt(valuesAfter[packetOffset + 2]) - parseInt(valuesBefore[packetOffset + 2]);\r\n  const etcAckDiff = parseInt(valuesAfter[packetOffset + 3]) - parseInt(valuesBefore[packetOffset + 3]);\r\n  const uhfAckDiff = parseInt(valuesAfter[packetOffset + 4]) - parseInt(valuesBefore[packetOffset + 4]);\r\n  \r\n  // Check if all values increased\r\n  if (hkpTxDiff > 0 && hkpAckDiff > 0 &&\r\n      cfgTxDiff > 0 && cfgAckDiff > 0 &&\r\n      metTxDiff > 0 && metAckDiff > 0 &&\r\n      etcTxDiff > 0 && etcAckDiff > 0 &&\r\n      uhfTxDiff > 0 && uhfAckDiff > 0) {\r\n    return \"[PASS]\";\r\n  }\r\n  \r\n  return \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Check if 3.3V voltage level is within acceptable range\r\n * @param value Voltage value as string (in mV)\r\n * @returns Pass/Fail string\r\n */\r\nfunction check3V3(value: string): string {\r\n  // Convert to number first\r\n  const numValue = parseFloat(value);\r\n  \r\n  // Check if valid number\r\n  if (isNaN(numValue)) {\r\n    return \"[FAIL]\";\r\n  }\r\n  \r\n  // Check if voltage is within acceptable range (3000-3600 mV)\r\n  return numValue >= 3000 && numValue <= 3600 ? \"[PASS]\" : \"[FAIL]\";\r\n}\r\n\r\n/**\r\n * Run the OBC-2 checkout test suite\r\n * \r\n * @param sock Socket connection to the MCC server\r\n * @param options Test options (SD Card, EEPROM, etc.)\r\n * @param onProgress Callback for progress updates\r\n * @returns The test results\r\n */\r\nexport async function runOBC2Checkout(\r\n  sock: any, \r\n  options: { sdCard: boolean; eeprom: boolean },\r\n  onProgress: ProgressCallback = () => {}\r\n): Promise<any> {\r\n  try {\r\n    // Initialize the results object\r\n    const results: any = {\r\n      firmware: { major: '', minor: '', patch: '' },\r\n      time: {\r\n        before: '',\r\n        after: '',\r\n        uptime: { total: '', session: '' },\r\n        storePeriod: '',\r\n        resetCount: '',\r\n        resetSource: ''\r\n      },\r\n      can: {\r\n        primary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        },\r\n        secondary: {\r\n          before: { tx: [], ack: [], timeout: [], error: [] },\r\n          after: { tx: [], ack: [], timeout: [], error: [] },\r\n          result: ''\r\n        }\r\n      },\r\n      voltage: {\r\n        sdCard: { value: '', result: '' },\r\n        flash: { value: '', result: '' },\r\n        eeprom: { value: '', result: '' },\r\n        payload: { value: '', current: '', result: '' },\r\n        uhf: { value: '', current: '', result: '' },\r\n        pp: { value: '', current: '' },\r\n        gps: { value: '' },\r\n        lna: { value: '', current: '' }\r\n      },\r\n      memory: {\r\n        sdCard: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        },\r\n        eeprom: {\r\n          before: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          after: { writeSuccess: '', readSuccess: '', writeFail: '', readFail: '' },\r\n          result: ''\r\n        }\r\n      },\r\n      reportGenerated: false,\r\n      allResults: [] // Store all raw results for reporting\r\n    };\r\n\r\n    // Track all raw results for later reporting\r\n    const allResults: string[] = [];\r\n    const passFailResults: string[] = [];\r\n\r\n    // Step 1: Read firmware version (5%)\r\n    onProgress('Reading OBC-2 Firmware Version', 5);\r\n    const fwVars = [\"OBC2_FW_Ver_Major\", \"OBC2_FW_Ver_Minor\", \"OBC2_FW_Ver_Patch\"];\r\n    \r\n    try {\r\n      const fwResults = await mccifRead(sock, fwVars);\r\n      results.firmware.major = safeParseValue(fwResults[0]);\r\n      results.firmware.minor = safeParseValue(fwResults[1]);\r\n      results.firmware.patch = safeParseValue(fwResults[2]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    } catch (error) {\r\n      console.error(\"Error reading firmware version:\", error);\r\n      // Provide fallback values\r\n      results.firmware.major = \"1\";\r\n      results.firmware.minor = \"0\";\r\n      results.firmware.patch = \"0\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.firmware.major);\r\n      allResults.push(results.firmware.minor);\r\n      allResults.push(results.firmware.patch);\r\n    }\r\n\r\n    // Step 2: Check and update time (15%)\r\n    onProgress('Checking OBC-2 Time', 15);\r\n    try {\r\n      // Read current time\r\n      const timeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.before = safeParseValue(timeResult[0]);\r\n      allResults.push(results.time.before);\r\n      \r\n      // Set time to now\r\n      await mccifSet(sock, \"OBC2_Time\", \"NOW\");\r\n      \r\n      // Read updated time\r\n      const updatedTimeResult = await mccifRead(sock, [\"OBC2_Time\"]);\r\n      results.time.after = safeParseValue(updatedTimeResult[0]);\r\n      allResults.push(results.time.after);\r\n    } catch (error) {\r\n      console.error(\"Error updating time:\", error);\r\n      results.time.before = \"error\";\r\n      results.time.after = \"error\";\r\n      \r\n      // Add to allResults\r\n      allResults.push(\"error\");\r\n      allResults.push(\"error\");\r\n    }\r\n\r\n    // Step 3: Read time related variables (20%)\r\n    onProgress('Reading OBC-2 Time Information', 20);\r\n    const timeVars = [\r\n      \"OBC2_Time\", \"OBC2_Uptime_Total\", \"OBC2_StorePeriod\", \r\n      \"OBC2_Uptime_Session\", \"OBC2_ResetCount\", \"OBC2_ResetSource\"\r\n    ];\r\n    \r\n    try {\r\n      const timeResults = await mccifRead(sock, timeVars);\r\n      results.time.current = safeParseValue(timeResults[0]);\r\n      results.time.uptime.total = safeParseValue(timeResults[1]);\r\n      results.time.storePeriod = safeParseValue(timeResults[2]);\r\n      results.time.uptime.session = safeParseValue(timeResults[3]);\r\n      results.time.resetCount = safeParseValue(timeResults[4]);\r\n      results.time.resetSource = safeParseValue(timeResults[5]);\r\n      \r\n      // Add to allResults\r\n      allResults.push(results.time.current);\r\n      allResults.push(results.time.uptime.total);\r\n      allResults.push(results.time.storePeriod);\r\n      allResults.push(results.time.uptime.session);\r\n      allResults.push(results.time.resetCount);\r\n      allResults.push(results.time.resetSource);\r\n    } catch (error) {\r\n      console.error(\"Error reading time information:\", error);\r\n      \r\n      // Add default values to allResults\r\n      [\"error\", \"0\", \"0\", \"0\", \"0\", \"unknown\"].forEach(val => allResults.push(val));\r\n    }\r\n\r\n    // Step 4: CAN communication test - primary (30%)\r\n    onProgress('Testing Primary CAN Communication', 30);\r\n    const canVars = [\r\n      \"OBC1_InterComm_Obc2_Hkp_Tx\", \"OBC1_InterComm_Obc2_Cfg_Tx\", \"OBC1_InterComm_Obc2_Met_Tx\",\r\n      \"OBC1_InterComm_Obc2_Etc_Tx\", \"OBC1_InterComm_Obc2_Uhf_Tx\", \"OBC1_InterComm_Obc2_Hkp_Ack\",\r\n      \"OBC1_InterComm_Obc2_Cfg_Ack\", \"OBC1_InterComm_Obc2_Met_Ack\", \"OBC1_InterComm_Obc2_Etc_Ack\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Ack\", \"OBC1_InterComm_Obc2_Hkp_Timeout\", \"OBC1_InterComm_Obc2_Cfg_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Met_Timeout\", \"OBC1_InterComm_Obc2_Etc_Timeout\",\r\n      \"OBC1_InterComm_Obc2_Uhf_Timeout\", \"OBC1_InterComm_Obc2_Hkp_Error\", \"OBC1_InterComm_Obc2_Cfg_Error\",\r\n      \"OBC1_InterComm_Obc2_Met_Error\", \"OBC1_InterComm_Obc2_Etc_Error\", \"OBC1_InterComm_Obc2_Uhf_Error\"\r\n    ];\r\n    \r\n    const canSetting = [\"OBC1_Intercomm_PriSec_Cfg\"];\r\n    \r\n    try {\r\n      // Read initial CAN values\r\n      const canBeforeResults = await mccifRead(sock, canVars);\r\n      \r\n      // Store before values\r\n      const canBeforeValues: string[] = canBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.before.tx.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.before.ack.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.before.timeout.push(canBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.before.error.push(canBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canBeforeValues);\r\n      \r\n      // Read CAN configuration\r\n      const canSettingResult = await mccifRead(sock, canSetting);\r\n      const canSettingValue = safeParseValue(canSettingResult[0]);\r\n      allResults.push(canSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canAfterResults = await mccifRead(sock, canVars);\r\n      const canAfterValues: string[] = canAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.primary.after.tx.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.primary.after.ack.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.primary.after.timeout.push(canAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.primary.after.error.push(canAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canAfterValues);\r\n      \r\n      // Check primary CAN result\r\n      results.can.primary.result = canCheck(canBeforeValues, canAfterValues, 5);\r\n      passFailResults.push(results.can.primary.result);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing primary CAN:\", error);\r\n      results.can.primary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n    }\r\n\r\n    // Step 5: CAN communication test - secondary (50%)\r\n    onProgress('Testing Secondary CAN Communication', 50);\r\n    try {\r\n      // Set to secondary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 31);\r\n      \r\n      // Read initial CAN values for secondary\r\n      const canSecBeforeResults = await mccifRead(sock, canVars);\r\n      const canSecBeforeValues: string[] = canSecBeforeResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.before.tx.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.before.ack.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.before.timeout.push(canSecBeforeValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.before.error.push(canSecBeforeValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecBeforeValues);\r\n      \r\n      // Read secondary CAN configuration\r\n      const canSecSettingResult = await mccifRead(sock, canSetting);\r\n      const canSecSettingValue = safeParseValue(canSecSettingResult[0]);\r\n      allResults.push(canSecSettingValue);\r\n      \r\n      // Wait for communication to occur\r\n      await new Promise(resolve => setTimeout(resolve, 20000));\r\n      \r\n      // Read CAN values after waiting\r\n      const canSecAfterResults = await mccifRead(sock, canVars);\r\n      const canSecAfterValues: string[] = canSecAfterResults.map(safeParseValue);\r\n      \r\n      // Update results object\r\n      for (let i = 0; i < 5; i++) {\r\n        results.can.secondary.after.tx.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 5; i < 10; i++) {\r\n        results.can.secondary.after.ack.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 10; i < 15; i++) {\r\n        results.can.secondary.after.timeout.push(canSecAfterValues[i]);\r\n      }\r\n      for (let i = 15; i < 20; i++) {\r\n        results.can.secondary.after.error.push(canSecAfterValues[i]);\r\n      }\r\n      \r\n      // Add to allResults\r\n      allResults.push(...canSecAfterValues);\r\n      \r\n      // Check secondary CAN result\r\n      results.can.secondary.result = canCheck(canSecBeforeValues, canSecAfterValues, 5);\r\n      passFailResults.push(results.can.secondary.result);\r\n      \r\n      // Reset to primary CAN\r\n      await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error testing secondary CAN:\", error);\r\n      results.can.secondary.result = \"[FAIL]\";\r\n      passFailResults.push(\"[FAIL]\");\r\n      \r\n      // Add placeholder values to allResults for failed test\r\n      for (let i = 0; i < 41; i++) {\r\n        allResults.push(\"error\");\r\n      }\r\n      \r\n      // Try to reset to primary CAN\r\n      try {\r\n        await mccifSet(sock, \"OBC1_Intercomm_PriSec_Cfg\", 0);\r\n      } catch (error) {\r\n        console.error(\"Error resetting to primary CAN:\", error);\r\n      }\r\n    }\r\n\r\n    // Step 6: Read voltage and current values (65%)\r\n    onProgress('Reading OBC-2 Voltage and Current', 65);\r\n    const viVars = [\r\n      \"OBC2_SDCard_3V3_V\", \"OBC2_Flash_3v3_V\", \"OBC2_EEPROM_3V3_V\", \"OBC2_Payload_3V3_V\",\r\n      \"OBC2_Payload_3V3_I\", \"OBC2_UHF_3V3_V\", \"OBC2_UHF_3V3_I\", \"OBC2_PP_3V3_V\", \"OBC2_PP_3V3_I\",\r\n      \"OBC2_GPS_3V3_V\", \"OBC2_LNA_V\", \"OBC2_LNA_I\"\r\n    ];\r\n    \r\n    try {\r\n      const viResults = await mccifRead(sock, viVars);\r\n      const viValues: string[] = viResults.map(safeParseValue);\r\n      \r\n      // Update voltage results\r\n      results.voltage.sdCard.value = viValues[0];\r\n      results.voltage.flash.value = viValues[1];\r\n      results.voltage.eeprom.value = viValues[2];\r\n      results.voltage.payload.value = viValues[3];\r\n      results.voltage.payload.current = viValues[4];\r\n      results.voltage.uhf.value = viValues[5];\r\n      results.voltage.uhf.current = viValues[6];\r\n      results.voltage.pp.value = viValues[7];\r\n      results.voltage.pp.current = viValues[8];\r\n      results.voltage.gps.value = viValues[9];\r\n      results.voltage.lna.value = viValues[10];\r\n      results.voltage.lna.current = viValues[11];\r\n      \r\n      // Check voltage results\r\n      results.voltage.sdCard.result = check3V3(viValues[0]);\r\n      results.voltage.flash.result = check3V3(viValues[1]);\r\n      results.voltage.eeprom.result = check3V3(viValues[2]);\r\n      results.voltage.payload.result = check3V3(viValues[3]);\r\n      results.voltage.uhf.result = check3V3(viValues[5]);\r\n      \r\n      // Add to passFailResults\r\n      passFailResults.push(results.voltage.sdCard.result);\r\n      passFailResults.push(results.voltage.flash.result);\r\n      passFailResults.push(results.voltage.eeprom.result);\r\n      passFailResults.push(results.voltage.payload.result);\r\n      passFailResults.push(results.voltage.uhf.result);\r\n      \r\n      // Add to allResults\r\n      allResults.push(...viValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading voltage and current:\", error);\r\n      \r\n      // Add placeholder values\r\n      const errorValues = Array(12).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n      \r\n      // Add fail results\r\n      const failResults = Array(5).fill(\"[FAIL]\");\r\n      passFailResults.push(...failResults);\r\n    }\r\n\r\n    // Step 7: SD Card test if enabled (80%)\r\n    if (options.sdCard) {\r\n      onProgress('Testing OBC-2 SD Card', 80);\r\n      \r\n      try {\r\n        // Read SD Card voltage\r\n        const sdVoltageResult = await mccifRead(sock, [\"OBC2_SDCard_3V3_V\"]);\r\n        const sdVoltage = safeParseValue(sdVoltageResult[0]);\r\n        allResults.push(sdVoltage);\r\n        \r\n        // Read SD Card counters before test\r\n        const sdVars = [\"OBC2_SD_WriteSuccess\", \"OBC2_SD_ReadSuccess\", \"OBC2_SD_WriteFail\", \"OBC2_SD_ReadFail\"];\r\n        const sdBeforeResults = await mccifRead(sock, sdVars);\r\n        const sdBeforeValues = sdBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.sdCard.before.writeSuccess = sdBeforeValues[0];\r\n        results.memory.sdCard.before.readSuccess = sdBeforeValues[1];\r\n        results.memory.sdCard.before.writeFail = sdBeforeValues[2];\r\n        results.memory.sdCard.before.readFail = sdBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdBeforeValues);\r\n        \r\n        // Run SD Card test\r\n        await mccifSet(sock, \"OBC2_SD_Control\", 6);\r\n        \r\n        // Read SD Card counters after test\r\n        const sdAfterResults = await mccifRead(sock, sdVars);\r\n        const sdAfterValues = sdAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.sdCard.after.writeSuccess = sdAfterValues[0];\r\n        results.memory.sdCard.after.readSuccess = sdAfterValues[1];\r\n        results.memory.sdCard.after.writeFail = sdAfterValues[2];\r\n        results.memory.sdCard.after.readFail = sdAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...sdAfterValues);\r\n        \r\n        // Check SD Card test result\r\n        const sdTestValues = [...sdBeforeValues, ...sdAfterValues];\r\n        results.memory.sdCard.result = memCheck(sdTestValues);\r\n        passFailResults.push(results.memory.sdCard.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing SD Card:\", error);\r\n        results.memory.sdCard.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // SD Card test not enabled\r\n      results.memory.sdCard.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 8: EEPROM test if enabled (90%)\r\n    if (options.eeprom) {\r\n      onProgress('Testing OBC-2 EEPROM', 90);\r\n      \r\n      try {\r\n        // Read EEPROM voltage\r\n        const eepromVoltageResult = await mccifRead(sock, [\"OBC2_EEPROM_3V3_V\"]);\r\n        const eepromVoltage = safeParseValue(eepromVoltageResult[0]);\r\n        allResults.push(eepromVoltage);\r\n        \r\n        // Read EEPROM counters before test\r\n        const eepromVars = [\"OBC2_EEPROM_WriteSuccess\", \"OBC2_EEPROM_ReadSuccess\", \r\n                          \"OBC2_EEPROM_WriteFail\", \"OBC2_EEPROM_ReadFail\"];\r\n        const eepromBeforeResults = await mccifRead(sock, eepromVars);\r\n        const eepromBeforeValues = eepromBeforeResults.map(safeParseValue);\r\n        \r\n        // Store before values\r\n        results.memory.eeprom.before.writeSuccess = eepromBeforeValues[0];\r\n        results.memory.eeprom.before.readSuccess = eepromBeforeValues[1];\r\n        results.memory.eeprom.before.writeFail = eepromBeforeValues[2];\r\n        results.memory.eeprom.before.readFail = eepromBeforeValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromBeforeValues);\r\n        \r\n        // Run EEPROM test\r\n        await mccifSet(sock, \"OBC2_EEPROM_Control\", 7);\r\n        \r\n        // Read EEPROM counters after test\r\n        const eepromAfterResults = await mccifRead(sock, eepromVars);\r\n        const eepromAfterValues = eepromAfterResults.map(safeParseValue);\r\n        \r\n        // Store after values\r\n        results.memory.eeprom.after.writeSuccess = eepromAfterValues[0];\r\n        results.memory.eeprom.after.readSuccess = eepromAfterValues[1];\r\n        results.memory.eeprom.after.writeFail = eepromAfterValues[2];\r\n        results.memory.eeprom.after.readFail = eepromAfterValues[3];\r\n        \r\n        // Add to allResults\r\n        allResults.push(...eepromAfterValues);\r\n        \r\n        // Check EEPROM test result\r\n        const eepromTestValues = [...eepromBeforeValues, ...eepromAfterValues];\r\n        results.memory.eeprom.result = memCheck(eepromTestValues);\r\n        passFailResults.push(results.memory.eeprom.result);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error testing EEPROM:\", error);\r\n        results.memory.eeprom.result = \"[FAIL]\";\r\n        passFailResults.push(\"[FAIL]\");\r\n        \r\n        // Add placeholder values to allResults\r\n        const errorValues = Array(9).fill(\"N.A.\");\r\n        allResults.push(...errorValues);\r\n      }\r\n    } else {\r\n      // EEPROM test not enabled\r\n      results.memory.eeprom.result = \"Not tested\";\r\n      passFailResults.push(\"Not tested\");\r\n      \r\n      // Add placeholder values to allResults\r\n      const naValues = Array(9).fill(\"N.A.\");\r\n      allResults.push(...naValues);\r\n    }\r\n\r\n    // Step 9: Final time reading (100%)\r\n    onProgress('Final OBC-2 Time Check', 100);\r\n    try {\r\n      const finalTimeResults = await mccifRead(sock, timeVars);\r\n      const finalTimeValues = finalTimeResults.map(safeParseValue);\r\n      \r\n      // Update final time values\r\n      results.time.final = {\r\n        current: finalTimeValues[0],\r\n        uptime: {\r\n          total: finalTimeValues[1],\r\n          session: finalTimeValues[3]\r\n        },\r\n        storePeriod: finalTimeValues[2],\r\n        resetCount: finalTimeValues[4],\r\n        resetSource: finalTimeValues[5]\r\n      };\r\n      \r\n      // Add to allResults\r\n      allResults.push(...finalTimeValues);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error reading final time information:\", error);\r\n      \r\n      // Add placeholder values to allResults\r\n      const errorValues = Array(6).fill(\"error\");\r\n      allResults.push(...errorValues);\r\n    }\r\n\r\n    // Store all results arrays in the results object\r\n    results.allResults = allResults;\r\n    results.passFailResults = passFailResults;\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Error during OBC-2 checkout:', error);\r\n    throw error;\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1397, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/services/reports/obc2Report.ts"],"sourcesContent":["// src/services/reports/obc2Report.ts\r\nimport { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * Generate a Word document report for OBC-2 checkout results\r\n * \r\n * @param results The OBC-2 test results\r\n * @returns A promise that resolves to the filename of the saved report\r\n */\r\nexport async function generateOBC2Report(results: any): Promise<string> {\r\n  // Get current date and time for the report filename\r\n  const now = new Date();\r\n  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD\r\n  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS\r\n  const filename = `OBC-2_Checkout_${dateStr}_${timeStr}.docx`;\r\n  \r\n  // Create the document\r\n  const doc = new Document({\r\n    sections: [{\r\n      properties: {},\r\n      children: [\r\n        // Title\r\n        new Paragraph({\r\n          text: \"OBC-2 Automated Self Check Out Test\",\r\n          heading: HeadingLevel.HEADING_1,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Test metadata\r\n        new Paragraph({\r\n          text: `Test Version: 24.3.21`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Date: ${now.toLocaleDateString()}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Test Time: ${now.toLocaleTimeString()}`,\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Separator\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200 }\r\n        }),\r\n        \r\n        // Firmware Version section\r\n        new Paragraph({\r\n          text: \"* Firmware Version:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Current OBC-2 Firmware Version: ${results.firmware.major}.${results.firmware.minor}.${results.firmware.patch}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Time Sync section\r\n        new Paragraph({\r\n          text: \"* Time Sync:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `BEFORE update OBC-2 Time: ${results.time.before} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `AFTER update OBC-2 Time: ${results.time.after} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Test Summary section\r\n        new Paragraph({\r\n          text: \"* Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN             : ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN           : ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card Voltage         : ${results.voltage.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Flash Voltage           : ${results.voltage.flash.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM Voltage          : ${results.voltage.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Payload Voltage         : ${results.voltage.payload.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `UHF Voltage             : ${results.voltage.uhf.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `SD Card                 : ${results.memory.sdCard.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `EEPROM                  : ${results.memory.eeprom.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // OBC-2 Checkout Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Primary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Primary CAN : -- ${results.can.primary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createPrimaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Secondary CAN Check Summary section\r\n        new Paragraph({\r\n          text: \"* OBC-2 CAN Check Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: `Secondary CAN : -- ${results.can.secondary.result}`,\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createSecondaryCansSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Voltage Current Summary section\r\n        new Paragraph({\r\n          text: \"* Voltage Current Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createVoltageCurrentSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Page break\r\n        new Paragraph({\r\n          text: \"\",\r\n          pageBreakBefore: true\r\n        }),\r\n        \r\n        // Memory Test Summary section\r\n        new Paragraph({\r\n          text: \"* Memory Test Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createMemoryTestSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n        \r\n        // Final checkout time information\r\n        new Paragraph({\r\n          text: \"* OBC-2 Final Checkout Summary:\",\r\n          heading: HeadingLevel.HEADING_2,\r\n          spacing: { after: 100 }\r\n        }),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 100 }\r\n        }),\r\n        ...createFinalCheckoutSection(results),\r\n        new Paragraph({\r\n          text: \"--------------------------------------------------------------------\",\r\n          spacing: { after: 200, before: 200 }\r\n        }),\r\n      ]\r\n    }]\r\n  });\r\n  \r\n  // Generate the document\r\n  const buffer = await Packer.toBuffer(doc);\r\n  \r\n  // Save the file\r\n  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n  saveAs(blob, filename);\r\n  \r\n  // Mark the report as generated\r\n  results.reportGenerated = true;\r\n  \r\n  return filename;\r\n}\r\n\r\n// Helper function for Primary CAN section\r\nfunction createPrimaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.primary) {\r\n    const section = results.can.primary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"0\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Secondary CAN section\r\nfunction createSecondaryCansSection(results: any): Paragraph[] {\r\n  const paragraphs: Paragraph[] = [];\r\n  \r\n  if (results.can && results.can.secondary) {\r\n    const section = results.can.secondary;\r\n    \r\n    // Before test\r\n    const txBefore = section.before.tx || [];\r\n    const ackBefore = section.before.ack || [];\r\n    const timeoutBefore = section.before.timeout || [];\r\n    const errorBefore = section.before.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canConfig || \"31\"}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n    \r\n    // After test\r\n    const txAfter = section.after.tx || [];\r\n    const ackAfter = section.after.ack || [];\r\n    const timeoutAfter = section.after.timeout || [];\r\n    const errorAfter = section.after.error || [];\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));\r\n    \r\n    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));\r\n    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));\r\n  }\r\n  \r\n  return paragraphs;\r\n}\r\n\r\n// Helper function for Voltage Current section\r\nfunction createVoltageCurrentSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.voltage) {\r\n      const v = results.voltage;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 SDCard 3V3 V  : ${padString(v.sdCard.value, 4)} mV    ${v.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Flash 3v3 V   : ${padString(v.flash.value, 4)} mV    ${v.flash.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 EEPROM 3V3 V  : ${padString(v.eeprom.value, 4)} mV    ${v.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 V : ${padString(v.payload.value, 4)} mV    ${v.payload.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Payload 3V3 I : ${padString(v.payload.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 V     : ${padString(v.uhf.value, 4)} mV    ${v.uhf.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 UHF 3V3 I     : ${padString(v.uhf.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 V      : ${padString(v.pp.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 PP 3V3 I      : ${padString(v.pp.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 GPS V         : ${padString(v.gps.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA V         : ${padString(v.lna.value, 4)} mV`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 LNA I         : ${padString(v.lna.current, 4)} mA`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for Memory Test section\r\n  function createMemoryTestSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.memory) {\r\n      // SD Card Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `SD Card : -- ${results.memory.sdCard.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.sdCard.result !== \"Not tested\") {\r\n        const sdCard = results.memory.sdCard;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 SDCard 3V3 V          : ${padString(results.voltage.sdCard.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(sdCard.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(sdCard.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(sdCard.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(sdCard.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(sdCard.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(sdCard.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(sdCard.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(sdCard.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `SD Card test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `--------------------------------------------------------------------`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      // EEPROM Test\r\n      paragraphs.push(new Paragraph({\r\n        text: `EEPROM : -- ${results.memory.eeprom.result}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      if (results.memory.eeprom.result !== \"Not tested\") {\r\n        const eeprom = results.memory.eeprom;\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `OBC-2 EEPROM 3V3 V          : ${padString(results.voltage.eeprom.value, 4)} mV`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success before test   : ${padString(eeprom.before.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success before test    : ${padString(eeprom.before.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail before test      : ${padString(eeprom.before.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail before test       : ${padString(eeprom.before.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Success after test    : ${padString(eeprom.after.writeSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Success after test     : ${padString(eeprom.after.readSuccess, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Write Fail after test       : ${padString(eeprom.after.writeFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n        \r\n        paragraphs.push(new Paragraph({\r\n          text: `Read Fail after test        : ${padString(eeprom.after.readFail, 4)}`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      } else {\r\n        paragraphs.push(new Paragraph({\r\n          text: `EEPROM test was not performed`,\r\n          spacing: { after: 100 }\r\n        }));\r\n      }\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  // Helper function for final checkout section\r\n  function createFinalCheckoutSection(results: any): Paragraph[] {\r\n    const paragraphs: Paragraph[] = [];\r\n    \r\n    if (results.time && results.time.final) {\r\n      const final = results.time.final;\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${final.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${final.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${final.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${final.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${final.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${final.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    } else {\r\n      // Use the initial time readings if final time readings are not available\r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Time              : ${results.time.current} UTC`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Total      : ${results.time.uptime.total} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Store Period      : ${results.time.storePeriod} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Uptime Session    : ${results.time.uptime.session} sec`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Count       : ${results.time.resetCount}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n      \r\n      paragraphs.push(new Paragraph({\r\n        text: `OBC-2 Reset Source      : ${results.time.resetSource}`,\r\n        spacing: { after: 100 }\r\n      }));\r\n    }\r\n    \r\n    return paragraphs;\r\n  }\r\n  \r\n  /**\r\n   * Utility function to pad a string to a specific length\r\n   * \r\n   * @param value The string value to pad\r\n   * @param length The desired length\r\n   * @returns The padded string\r\n   */\r\n  function padString(value: string | number | undefined, length: number): string {\r\n    if (value === undefined || value === null) return ''.padStart(length, ' ');\r\n    return String(value).padStart(length, ' ');\r\n  }"],"names":[],"mappings":"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","debugId":null}}]
}