{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/joeg0001/Documents/SATS%20Satellite%20Automated%20Testing%20System/beautify%20frontend/src/components/CheckoutTestProgress/components/SBandTestPanel.tsx"],"sourcesContent":["// src/components/CheckoutTestProgress/components/SBandTestPanel.tsx\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, Alert } from '@/components/ui';\r\nimport { mccifSet, mccifRead, setSimulationMode, debugSocketType, isUsingSimulation } from '@/utils/mccUtils';\r\nimport styles from './OBC1TestPanel.module.css'; // Reuse the same styles as OBC1TestPanel\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n// Import the S-Band-specific functions\r\nimport { runSBandCheckout } from '@/services/checkout/sbandCheckout';\r\nimport { generateSBandReport } from '@/services/reports/sbandReport';\r\n\r\n// Import test history components\r\nimport { TestHistoryChart, TestHistoryTable } from '@/components/CheckoutTestProgress/components';\r\nimport { TestDetailsModal } from '@/components/CheckoutTestProgress/components';\r\n\r\n// Create a reusable SimulationBadge component for consistency\r\nconst SimulationBadge: React.FC<SimulationBadgeProps> = ({ isSimulation }) => (\r\n  <div style={{ \r\n    fontSize: '12px', \r\n    padding: '2px 8px', \r\n    backgroundColor: isSimulation ? 'rgba(245, 158, 11, 0.1)' : 'transparent',\r\n    color: isSimulation ? '#f59e0b' : 'inherit',\r\n    borderRadius: '4px',\r\n    display: isSimulation ? 'block' : 'none'\r\n  }}>\r\n    Simulated Data\r\n  </div>\r\n);\r\n\r\ninterface SimulationBadgeProps {\r\n  isSimulation: boolean;\r\n}\r\n\r\ninterface SBandTestPanelProps {\r\n  options: string[];  // Contains only the checked options\r\n  sock: any;\r\n  onTestComplete: (results: any) => void;\r\n  onTestError: (error: any) => void;\r\n  onTestStart: () => void;\r\n  isInitialRun: boolean;\r\n  profileId?: string; // Add profile ID for test history\r\n}\r\n\r\n// Update TestHistoryItem interface definition to include is_simulated\r\ninterface TestHistoryItem {\r\n  id: number;\r\n  component_id: string;\r\n  test_type: string;\r\n  test_date: string;\r\n  results: {\r\n    simulated?: boolean;\r\n    receiver?: {\r\n      frequencyShift?: string;\r\n      status?: string;\r\n      sensitivity?: string;\r\n    };\r\n    transmitter?: {\r\n      status?: string;\r\n    };\r\n    testedOptions?: string[];\r\n  };\r\n  status: string;\r\n  notes?: string;\r\n  is_simulated?: boolean; // Add this field with optional marker\r\n}\r\n\r\nexport const SBandTestPanel: React.FC<SBandTestPanelProps> = ({\r\n  options,\r\n  sock,\r\n  onTestComplete,\r\n  onTestError,\r\n  onTestStart,\r\n  isInitialRun,\r\n  profileId\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState<string>('');\r\n  const [results, setResults] = useState<any>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasRunTest, setHasRunTest] = useState(false);\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isForceSimulation, setIsForceSimulation] = useState(false);\r\n  const [detectedSimulation, setDetectedSimulation] = useState(false);\r\n  \r\n  // Add new states for test history\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [testHistory, setTestHistory] = useState<TestHistoryItem[]>([]);\r\n  const [historyLoading, setHistoryLoading] = useState(false);\r\n  const [selectedMetric, setSelectedMetric] = useState<string>('receiver.frequencyShift');\r\n  const [selectedHistoryItem, setSelectedHistoryItem] = useState<TestHistoryItem | null>(null);\r\n  \r\n  // Add state variables for history management\r\n  const [cleanupMessage, setCleanupMessage] = useState<string | null>(null);\r\n  const [limitMessage, setLimitMessage] = useState<string | null>(null);\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n  const [isMultiSelectMode, setIsMultiSelectMode] = useState(false);\r\n  \r\n  // Determine if TX/RX options are enabled\r\n  const enableTX = options.includes('Transmitter Test');\r\n  const enableRX = options.includes('Receiver Test');\r\n  \r\n  // API URL\r\n  const API_URL = process.env.REACT_APP_BACKEND_URL || \"http://127.0.0.1:5000\";\r\n  \r\n  // Available metrics for visualization\r\n  const metricOptions = [\r\n    { label: 'Receiver Frequency Shift', value: 'receiver.frequencyShift' },\r\n    { label: 'Transmitter Status', value: 'transmitter.status' },\r\n    { label: 'Receiver Status', value: 'receiver.status' },\r\n    { label: 'Receiver Sensitivity', value: 'receiver.sensitivity' },\r\n    { label: 'Temperature ADC0', value: 'temperature.adc0' },\r\n    { label: 'Temperature ADC1', value: 'temperature.adc1' }\r\n  ];\r\n  \r\n  // Check for dark mode\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      setIsDarkMode(document.documentElement.classList.contains(\"dark\"));\r\n    };\r\n    \r\n    // Initial check\r\n    checkDarkMode();\r\n    \r\n    // Watch for theme changes\r\n    const observer = new MutationObserver(() => {\r\n      checkDarkMode();\r\n    });\r\n    \r\n    observer.observe(document.documentElement, { \r\n      attributes: true, \r\n      attributeFilter: ['class'] \r\n    });\r\n    \r\n    return () => observer.disconnect();\r\n  }, []);\r\n  \r\n  // Check if we have a real socket or need simulation\r\n  useEffect(() => {\r\n    // Check the socket type and update UI accordingly\r\n    console.log(\"🔍 Socket debug info:\", debugSocketType(sock));\r\n    \r\n    // Initial socket simulation check\r\n    let isActuallySimulated = isUsingSimulation(sock);\r\n    setDetectedSimulation(isActuallySimulated);\r\n    \r\n    // Check if this is coming from localStorage\r\n    const socketInfoStr = localStorage.getItem('mccSocketInfo');\r\n    let useSimulation = true; // Default to simulation\r\n\r\n    if (socketInfoStr) {\r\n      try {\r\n        const socketInfo = JSON.parse(socketInfoStr);\r\n        // If we have valid socket info and it's marked as real (not simulation)\r\n        if (socketInfo && socketInfo.isReal === true) {\r\n          console.log(\"📱 Using real socket configuration from localStorage\");\r\n          useSimulation = false;\r\n        } else {\r\n          console.log(\"📱 Socket in localStorage marked as simulation\");\r\n          useSimulation = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing socket info:\", error);\r\n      }\r\n    } else {\r\n      console.log(\"📱 No socket info in localStorage\");\r\n    }\r\n\r\n    // If the socket has an explicit isSimulated flag, use that\r\n    if (sock && sock.isSimulated !== undefined) {\r\n      useSimulation = sock.isSimulated;\r\n      console.log(`📱 Using socket's own isSimulated flag: ${useSimulation}`);\r\n    }\r\n\r\n    setIsForceSimulation(useSimulation);\r\n    setSimulationMode(useSimulation);\r\n    \r\n    if (useSimulation) {\r\n      console.log(\"🟢 Using simulation mode for testing\");\r\n    } else {\r\n      console.log(\"🔴 Using real socket mode for testing\");\r\n    }\r\n  }, [sock]);\r\n  \r\n  useEffect(() => {\r\n    // Only run test automatically if this is the initial run and we haven't run it yet\r\n    if (isInitialRun && !hasRunTest && !isRunning) {\r\n      console.log(\"Auto-starting test because isInitialRun =\", isInitialRun);\r\n      startTest();\r\n    }\r\n  }, [isInitialRun, hasRunTest, isRunning]);\r\n  \r\n  // Function to fetch test history\r\n  const fetchTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot fetch history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      console.log(`Fetching test history for profile ${profileId} and component S-Band`);\r\n      \r\n      const response = await fetch(`${API_URL}/test-results/${profileId}?component=S-Band`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(\"Received test history:\", data);\r\n        \r\n        // Filter only non-simulated data\r\n        const filteredData = data\r\n          .filter((item: TestHistoryItem) => {\r\n            // Skip any simulated data\r\n            if (item.is_simulated === true || item.results?.simulated === true) {\r\n              console.log(`Filtering out simulated test result: ${item.id}`);\r\n              return false;\r\n            }\r\n            \r\n            // Check if results object has essential properties\r\n            if (!item.results) return false;\r\n            \r\n            // Must have receiver or transmitter data to be a legitimate test\r\n            const hasReceiverData = item.results.receiver && \r\n              (item.results.receiver.status || item.results.receiver.frequencyShift);\r\n            \r\n            const hasTransmitterData = item.results.transmitter && \r\n              item.results.transmitter.status;\r\n            \r\n            // Consider it a real test if it has receiver or transmitter data\r\n            return hasReceiverData || hasTransmitterData;\r\n          })\r\n          // Limit to the most recent 'limit' entries (typically 30)\r\n          .slice(0, limit);\r\n        \r\n        console.log(`Filtered from ${data.length} to ${filteredData.length} actual test results`);\r\n        setTestHistory(filteredData);\r\n      } else {\r\n        console.error(\"Failed to fetch test history:\", await response.text());\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching test history:\", error);\r\n      \r\n      // If the fetch fails, try to use data from localStorage as fallback\r\n      try {\r\n        const localHistoryKey = `sband_real_history_${profileId}`;\r\n        const localData = localStorage.getItem(localHistoryKey);\r\n        if (localData) {\r\n          const parsedData = JSON.parse(localData);\r\n          console.log(\"Using cached test history from localStorage:\", parsedData);\r\n          // Apply the same limit to localStorage data\r\n          setTestHistory(parsedData.slice(0, limit));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error reading from localStorage:\", e);\r\n      }\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch history when showHistory is toggled\r\n  useEffect(() => {\r\n    if (showHistory) {\r\n      fetchTestHistory();\r\n    }\r\n  }, [showHistory, profileId]);\r\n  \r\n  // Function to save test result to history\r\n  const saveTestResult = async (testResults: any, status: string, wasSimulated: boolean) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot save history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    // Use the passed simulation flag, but also perform standard checks as a backup\r\n    const detectedSim = detectedSimulation || isForceSimulation || \r\n                      (sock && typeof sock.isSimulated === 'boolean' && sock.isSimulated);\r\n    \r\n    // Final simulation determination with priority to the wasSimulated flag\r\n    const finalSimulationStatus = wasSimulated || detectedSim;\r\n    \r\n    console.log(`Saving test result: simulation=${finalSimulationStatus} (wasSimulated=${wasSimulated}, detected=${detectedSimulation}, config=${isForceSimulation})`);\r\n    \r\n    try {\r\n      // Add simulation flag to the results\r\n      const resultsWithFlag = {\r\n        ...testResults,\r\n        simulated: finalSimulationStatus,\r\n        timestamp: new Date().toISOString(),\r\n        testedOptions: options,\r\n        _debug_info: {\r\n          explicit_simulation: wasSimulated,\r\n          detected_simulation: detectedSimulation,\r\n          configured_simulation: isForceSimulation\r\n        }\r\n      };\r\n      \r\n      // Only save to database if NOT simulated\r\n      if (!finalSimulationStatus) {\r\n        console.log(\"✅ Saving REAL test data to database\");\r\n        const response = await fetch(`${API_URL}/test-results`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            profile_id: profileId,\r\n            component_id: \"S-Band\",\r\n            test_type: options.join(','),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: `TX: ${enableTX ? 'Enabled' : 'Disabled'}, RX: ${enableRX ? 'Enabled' : 'Disabled'}`,\r\n            is_simulated: false\r\n          }),\r\n          mode: 'cors'\r\n        });\r\n        \r\n        if (response.ok) {\r\n          console.log(\"Real test result saved to history database\");\r\n        } else {\r\n          console.error(\"Failed to save test result:\", await response.text());\r\n        }\r\n      } else {\r\n        console.log(\"❌ Detected SIMULATED data - storing in localStorage only\");\r\n        \r\n        // Save to localStorage instead\r\n        const localHistoryKey = `sband_sim_history_${profileId}`;\r\n        try {\r\n          const existingHistory = JSON.parse(localStorage.getItem(localHistoryKey) || '[]');\r\n          existingHistory.push({\r\n            id: Date.now(),\r\n            component_id: \"S-Band\",\r\n            test_type: options.join(','),\r\n            test_date: new Date().toISOString(),\r\n            results: resultsWithFlag,\r\n            status: status,\r\n            notes: \"Simulated Test\",\r\n            is_simulated: true\r\n          });\r\n          localStorage.setItem(localHistoryKey, JSON.stringify(existingHistory));\r\n        } catch (e) {\r\n          console.error(\"Error saving to localStorage:\", e);\r\n        }\r\n      }\r\n      \r\n      // Refresh test history if the history panel is open\r\n      if (showHistory) {\r\n        fetchTestHistory();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error saving test result:\", error);\r\n    }\r\n  };\r\n  \r\n  // Function to extract a value from nested result objects\r\n  const extractValue = (results: any, path: string): number | null => {\r\n    if (!results) return null;\r\n    \r\n    const parts = path.split('.');\r\n    let value = results;\r\n    \r\n    for (const part of parts) {\r\n      if (value && typeof value === 'object' && part in value) {\r\n        value = value[part];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Try to parse as number\r\n    const numValue = parseFloat(value);\r\n    return isNaN(numValue) ? null : numValue;\r\n  };\r\n  \r\n  // Format chart data for test history - ensure we only use real data\r\n  const prepareChartData = () => {\r\n    return testHistory\r\n      .filter(item => {\r\n        // Ensure we only use real (non-simulated) data for charts\r\n        if (item.is_simulated || item.results?.simulated) {\r\n          return false;\r\n        }\r\n        \r\n        // Make sure the data point has a value for the selected metric\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        return metricValue !== null && metricValue !== undefined && !isNaN(metricValue);\r\n      })\r\n      .map(item => {\r\n        const metricValue = extractValue(item.results, selectedMetric);\r\n        \r\n        return {\r\n          date: new Date(item.test_date).toLocaleDateString(),\r\n          [selectedMetric.split('.').pop() || 'value']: metricValue,\r\n          tooltipLabel: new Date(item.test_date).toLocaleString(),\r\n          // Add more context to tooltip\r\n          componentId: item.component_id,\r\n          testType: item.test_type,\r\n          dataType: 'Real Data'\r\n        };\r\n      });\r\n  };\r\n  \r\n  const startTest = async () => {\r\n    if (isRunning) return;\r\n    \r\n    setIsRunning(true);\r\n    setProgress(0);\r\n    setError(null);\r\n    setHasRunTest(true);\r\n    \r\n    try {\r\n      // Notify parent that the test has started\r\n      onTestStart();\r\n      \r\n      // Begin the test process\r\n      setCurrentStep('Starting S-Band Checkout');\r\n      \r\n      // Validate socket before proceeding\r\n      if (!sock || (typeof sock.simulateRead !== 'function' && \r\n                   typeof sock.send !== 'function')) {\r\n        console.warn(\"No valid socket found, creating simulation fallback\");\r\n        \r\n        // Create a minimal simulation object\r\n        const simulatedSock = {\r\n          simulateRead: (parameters: string[]) => {\r\n            // Generate simulated values for common parameters\r\n            return parameters.map(param => {\r\n              // Return specific values for common S-Band parameters\r\n              if (param.includes(\"FPGA_version\")) {\r\n                return `${param}=1.2.3`;\r\n              } else if (param.includes(\"FPGA_build\")) {\r\n                return `${param}=2022.04`;\r\n              } else if (param.includes(\"hardware_id_year\")) {\r\n                return `${param}=2022`;\r\n              } else if (param.includes(\"hardware_id_month\")) {\r\n                return `${param}=06`;\r\n              } else if (param.includes(\"hardware_id_order_n\")) {\r\n                return `${param}=42`;\r\n              } else if (param.includes(\"LCL_status\")) {\r\n                return `${param}=1`;\r\n              } else if (param.includes(\"RX_status\")) {\r\n                return `${param}=1`;\r\n              } else if (param.includes(\"RX_frequency_shift\")) {\r\n                return `${param}=${500 + Math.floor(Math.random() * 200)}`;\r\n              } else if (param.includes(\"TX_status\")) {\r\n                return `${param}=1`;\r\n              } else if (param.includes(\"SBand_coherent_mode\")) {\r\n                return `${param}=1`;\r\n              } else if (param.includes(\"SBand_ranging_mode\")) {\r\n                return `${param}=0`;\r\n              } else if (param.includes(\"adc_reg_00\") || param.includes(\"adc_reg_04\")) {\r\n                return `${param}=${25 + Math.floor(Math.random() * 10)}`;\r\n              } else {\r\n                return `${param}=${Math.floor(Math.random() * 100)}`;\r\n              }\r\n            });\r\n          },\r\n          send: async (message: string) => {\r\n            console.log(`[SIM] Sending: ${message}`);\r\n            return Promise.resolve();\r\n          },\r\n          receive: async () => {\r\n            console.log(`[SIM] Receiving data`);\r\n            return Promise.resolve(\"simulated response\");\r\n          },\r\n          isSimulated: true\r\n        };\r\n        \r\n        // Use the simulated socket\r\n        sock = simulatedSock;\r\n        // Mark this as a simulation\r\n        setDetectedSimulation(true);\r\n      }\r\n      \r\n      // Specifically check if this is a simulation run\r\n      const wasSimulation = isUsingSimulation(sock);\r\n      setDetectedSimulation(wasSimulation);\r\n      \r\n      // Run the S-Band checkout test with progress updates\r\n      const results = await runSBandCheckout(sock, \r\n        { testTX: enableTX, testRX: enableRX }, \r\n        (step, percent) => {\r\n          setCurrentStep(step);\r\n          setProgress(percent);\r\n        }\r\n      );\r\n      \r\n      // Add the list of tested options to the results\r\n      results.testedOptions = options;\r\n      \r\n      // Save the results locally\r\n      setResults(results);\r\n      \r\n      // Save result to history\r\n      await saveTestResult(results, 'completed', wasSimulation);\r\n      \r\n      // Notify parent that the test is complete\r\n      onTestComplete(results);\r\n      \r\n    } catch (error) {\r\n      console.error('Error running S-Band checkout:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n      \r\n      // Save failed result to history\r\n      if (results) {\r\n        await saveTestResult(results, 'error', true);\r\n      }\r\n      \r\n      onTestError(error);\r\n    } finally {\r\n      setIsRunning(false);\r\n      setProgress(100);\r\n      setCurrentStep('Test Complete');\r\n    }\r\n  };\r\n  \r\n  // Generate a report from the test results\r\n  const generateReport = async () => {\r\n    if (!results) {\r\n      setError('No test results available to generate a report');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const reportFile = await generateSBandReport(results);\r\n      alert(`S-Band report saved: ${reportFile}`);\r\n    } catch (error) {\r\n      console.error('Error generating report:', error);\r\n      setError(error instanceof Error ? error.message : String(error));\r\n    }\r\n  };\r\n\r\n  // Clean up simulated test results from the database\r\n  const cleanupSimulatedData = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/cleanup-simulated`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleanup complete: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after cleanup\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to clean up simulated data:', await response.text());\r\n        setCleanupMessage('❌ Failed to clean up simulated data');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cleaning up simulated data:', error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Limit test history to a certain number of records\r\n  const limitTestHistory = async (limit: number = 30) => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot limit history: No profile ID provided\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/limit/${profileId}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          limit,\r\n          component: 'S-Band'  // Limit only S-Band records\r\n        }),\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`History limit applied: ${result.message}`);\r\n        \r\n        // Show a success message to the user\r\n        setLimitMessage(`✅ ${result.message}`);\r\n        \r\n        // Refresh the history after limiting\r\n        if (showHistory) {\r\n          fetchTestHistory();\r\n        }\r\n      } else {\r\n        console.error('Failed to limit test history:', await response.text());\r\n        setLimitMessage('❌ Failed to limit test history');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error limiting test history:', error);\r\n      setLimitMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Clear all test history for this profile and component\r\n  const clearAllTestHistory = async () => {\r\n    if (!profileId) {\r\n      console.log(\"Cannot clear history: No profile ID provided\");\r\n      return;\r\n    }\r\n\r\n    // First confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to clear ALL test history for S-Band?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    setHistoryLoading(true);\r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/clear/${profileId}?component=S-Band`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Cleared test history: ${result.message}`);\r\n        \r\n        // Show success message\r\n        setCleanupMessage(`✅ ${result.message}`);\r\n        \r\n        // Clear the local state\r\n        setTestHistory([]);\r\n        \r\n        // Also clear the localStorage cache\r\n        localStorage.removeItem(`sband_real_history_${profileId}`);\r\n        localStorage.removeItem(`sband_sim_history_${profileId}`);\r\n      } else {\r\n        console.error(\"Failed to clear test history:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to clear test history: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing test history:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete a single test history item\r\n  const deleteTestHistoryItem = async (itemId: number) => {\r\n    // Confirm with the user\r\n    if (!window.confirm(\"Are you sure you want to delete this test history item?\\nThis action cannot be undone.\")) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        mode: 'cors'\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        console.log(`Deleted test history item: ${result.message}`);\r\n        \r\n        // Update the local state by removing the deleted item\r\n        setTestHistory(prev => prev.filter(item => item.id !== itemId));\r\n        \r\n        // Show a temporary message\r\n        setCleanupMessage(`✅ Test result ${itemId} has been deleted`);\r\n        \r\n        // Hide the message after a few seconds\r\n        setTimeout(() => {\r\n          setCleanupMessage(null);\r\n        }, 3000);\r\n      } else {\r\n        console.error(\"Failed to delete test history item:\", await response.text());\r\n        setCleanupMessage(`❌ Failed to delete test history item: ${response.statusText}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting test history item:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  };\r\n\r\n  // Toggle multi-select mode\r\n  const toggleMultiSelectMode = () => {\r\n    setIsMultiSelectMode(!isMultiSelectMode);\r\n    if (isMultiSelectMode) {\r\n      // If turning off multi-select mode, clear all selections\r\n      setSelectedItems([]);\r\n    }\r\n  };\r\n\r\n  // Toggle selection of a single history item\r\n  const toggleItemSelection = (itemId: number) => {\r\n    setSelectedItems(prev => {\r\n      if (prev.includes(itemId)) {\r\n        return prev.filter(id => id !== itemId);\r\n      } else {\r\n        return [...prev, itemId];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Select all visible history items\r\n  const selectAllItems = () => {\r\n    setSelectedItems(testHistory.map(item => item.id));\r\n  };\r\n\r\n  // Deselect all history items\r\n  const deselectAllItems = () => {\r\n    setSelectedItems([]);\r\n  };\r\n\r\n  // Delete all selected items\r\n  const deleteSelectedItems = async () => {\r\n    if (selectedItems.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Confirm the deletion\r\n    if (!window.confirm(`Are you sure you want to delete ${selectedItems.length} selected items? This action cannot be undone.`)) {\r\n      return;\r\n    }\r\n\r\n    setHistoryLoading(true);\r\n    let successCount = 0;\r\n    let errorCount = 0;\r\n\r\n    try {\r\n      // Process each selected item with individual API calls\r\n      for (const itemId of selectedItems) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/test-results/${itemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            mode: 'cors'\r\n          });\r\n          \r\n          if (response.ok) {\r\n            successCount++;\r\n          } else {\r\n            errorCount++;\r\n            console.error(`Failed to delete item ${itemId}:`, await response.text());\r\n          }\r\n        } catch (error) {\r\n          errorCount++;\r\n          console.error(`Error deleting item ${itemId}:`, error);\r\n        }\r\n      }\r\n      \r\n      // Update the message about success/failure\r\n      if (successCount > 0 && errorCount === 0) {\r\n        setCleanupMessage(`✅ Successfully deleted ${successCount} items`);\r\n      } else if (successCount > 0 && errorCount > 0) {\r\n        setCleanupMessage(`⚠️ Partially successful: Deleted ${successCount} items, but failed to delete ${errorCount} items`);\r\n      } else {\r\n        setCleanupMessage(`❌ Failed to delete any of the ${selectedItems.length} selected items`);\r\n      }\r\n      \r\n      // Update the test history if any items were successfully deleted\r\n      if (successCount > 0) {\r\n        setTestHistory(prev => prev.filter(item => !selectedItems.includes(item.id)));\r\n      }\r\n      \r\n      // Clear the selection after deletion\r\n      setSelectedItems([]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error during bulk deletion:\", error);\r\n      setCleanupMessage(`❌ Error: ${error instanceof Error ? error.message : String(error)}`);\r\n    } finally {\r\n      setHistoryLoading(false);\r\n    }\r\n  };\r\n\r\n  // Optionally add automatic cleanup on component mount\r\n  useEffect(() => {\r\n    if (profileId) {\r\n      // Automatically limit history to 30 records when the component mounts\r\n      limitTestHistory(30);\r\n    }\r\n  }, [profileId]); // Only run when profileId changes\r\n\r\n  return (\r\n    <div className={styles.testPanel}>\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <p>{error}</p>\r\n        </Alert>\r\n      )}\r\n      \r\n      <div className={styles.tabsContainer} style={{\r\n        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n        padding: '8px',\r\n        borderRadius: '8px',\r\n        marginBottom: '16px',\r\n      }}>\r\n        <button\r\n          onClick={() => setShowHistory(false)}\r\n          className={`${styles.tabButton} ${!showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: !showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: !showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Current Test\r\n          </button>\r\n        <button\r\n          onClick={() => setShowHistory(true)}\r\n          className={`${styles.tabButton} ${showHistory ? styles.tabButtonActive : ''}`}\r\n          style={{\r\n            padding: '8px 16px',\r\n            borderRadius: '6px',\r\n            backgroundColor: showHistory ? (isDarkMode ? '#4f46e5' : '#3b82f6') : 'transparent',\r\n            color: showHistory ? 'white' : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n            border: 'none',\r\n            fontWeight: 500,\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Test History\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Current Test Panel */}\r\n      {!showHistory ? (\r\n        <>\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                  <path d=\"M7.879 6.464a1 1 0 01-1.414 1.414 3 3 0 000 4.243 1 1 0 11-1.414 1.414 5 5 0 010-7.07 1 1 0 011.414 0zm4.242 0a1 1 0 011.414 0 5 5 0 010 7.072 1 1 0 01-1.414-1.414 3 3 0 000-4.244 1 1 0 010-1.414z\" />\r\n                </svg>\r\n                S-Band Test Status\r\n              </h3>\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              <div className={styles.progressContainer}>\r\n                <div className={styles.progressLabel}>\r\n                  <span className={styles.progressStep} style={{ color: isDarkMode ? \"#d1d5db\" : \"#4b5563\" }}>\r\n                    {currentStep || 'Waiting to start test...'}\r\n                  </span>\r\n                  <span className={styles.progressValue} style={{ color: isDarkMode ? \"#93c5fd\" : \"#1d4ed8\" }}>\r\n                    {progress}%\r\n                  </span>\r\n                </div>\r\n                <div \r\n                  className={styles.progressBar}\r\n                  style={{ backgroundColor: isDarkMode ? \"#374151\" : \"#e5e7eb\" }}\r\n                >\r\n                  <div \r\n                    className={styles.progressBarFill}\r\n                    style={{ \r\n                      width: `${progress}%`,\r\n                      background: 'linear-gradient(to right, #3b82f6, #4f46e5)'\r\n                    }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Display the testing options */}\r\n              <div style={{ marginBottom: '20px' }}>\r\n                <h4 style={{ \r\n                  fontSize: '14px', \r\n                  marginBottom: '10px',\r\n                  color: isDarkMode ? \"#d1d5db\" : \"#374151\"\r\n                }}>\r\n                  Selected Test Options:\r\n                </h4>\r\n                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>\r\n                  {options.map((option, index) => (\r\n                    <div key={index} style={{ \r\n                      padding: '6px 10px', \r\n                      backgroundColor: isDarkMode ? '#111827' : '#f3f4f6',\r\n                      borderRadius: '4px',\r\n                      fontSize: '13px',\r\n                      color: isDarkMode ? '#93c5fd' : '#3b82f6',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '6px'\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      {option}\r\n                    </div>\r\n                  ))}\r\n                  {options.length === 0 && (\r\n                    <div style={{ \r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                      fontStyle: 'italic',\r\n                      fontSize: '13px'\r\n                    }}>\r\n                      No specific options selected. Running with defaults.\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Connection Status */}\r\n              <div \r\n                className={styles.parameterBox}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                }}\r\n              >\r\n                <div className={styles.parameterLabel}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\r\n                  </svg>\r\n                  Connection Mode\r\n                </div>\r\n                <span className={`${styles.statusBadge} ${\r\n                  isForceSimulation ? styles.colorWaiting : styles.colorCompleted\r\n                }`}>\r\n                  {isForceSimulation ? 'SIMULATION' : 'REAL SOCKET'}\r\n                </span>\r\n              </div>\r\n              \r\n              <div \r\n                className={styles.parameterBox}\r\n                style={{\r\n                  backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                  borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                  marginTop: '10px'\r\n                }}\r\n              >\r\n                <div className={styles.parameterLabel}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.parameterIcon}>\r\n                    <path fillRule=\"evenodd\" d=\"M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                  S-Band Testing\r\n                </div>\r\n                <span style={{ display: 'flex', gap: '8px' }}>\r\n                  <span className={`${styles.parameterValue} ${\r\n                    enableTX ? styles.colorCompleted : styles.colorWaiting\r\n                  }`}>\r\n                    TX: {enableTX ? 'ENABLED' : 'DISABLED'}\r\n                  </span>\r\n                  <span className={`${styles.parameterValue} ${\r\n                    enableRX ? styles.colorCompleted : styles.colorWaiting\r\n                  }`}>\r\n                    RX: {enableRX ? 'ENABLED' : 'DISABLED'}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n              \r\n              {/* Run/Re-run Test Button */}\r\n              <button \r\n                onClick={startTest} \r\n                className={styles.button}\r\n                disabled={isRunning}\r\n                style={{ \r\n                    backgroundColor: isRunning ? '#9ca3af' :\r\n                      hasRunTest ? '#4f46e5' : '#10b981',\r\n                    color: 'white',\r\n                    marginTop: '20px'\r\n                  }}\r\n                >\r\n                  {isRunning ? (\r\n                    <>\r\n                      <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                      </svg>\r\n                      Running Test...\r\n                    </>\r\n                  ) : hasRunTest ? (\r\n                    <>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 01-1 1H4a1 1 0 01-1-1v-5a1 1 0 011-1 1 1 0 01.008.057z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Re-run Test\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Run Test\r\n                    </>\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            {results && (\r\n              <div className=\"space-y-4 mt-4\">\r\n                <div \r\n                  className={styles.card}\r\n                  style={{\r\n                    backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n                    borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                  }}\r\n                >\r\n                  <div \r\n                    className={styles.cardHeader} \r\n                    style={{ \r\n                      background: isDarkMode \r\n                        ? \"linear-gradient(to right, #064e3b, #065f46)\" \r\n                        : \"linear-gradient(to right, #ecfdf5, #d1fae5)\",\r\n                      color: isDarkMode ? \"#d1fae5\" : \"#065f46\"\r\n                    }}\r\n                  >\r\n                    <h3 className={styles.cardTitle}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                        <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      FPGA Information\r\n                    </h3>\r\n                    \r\n                    {/* Add simulation badge */}\r\n                    <SimulationBadge isSimulation={isForceSimulation} />\r\n                  </div>\r\n                  \r\n                  <div className={styles.cardContent}>\r\n                    <div \r\n                      className={styles.infoCard}\r\n                      style={{\r\n                        backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                        borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n                      }}\r\n                    >\r\n                      <div className={styles.infoIcon}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"#059669\" width=\"20\" height=\"20\">\r\n                          <path d=\"M13 7H7v6h6V7z\" />\r\n                          <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                      </div>\r\n                      <div className={styles.infoContent}>\r\n                        <div \r\n                          className={styles.infoLabel}\r\n                          style={{ color: isDarkMode ? \"#9ca3af\" : \"#6b7280\" }}\r\n                        >\r\n                          S-Band FPGA Version\r\n                        </div>\r\n                        <div \r\n                          className={styles.infoValue}\r\n                          style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}\r\n                        >\r\n                          {results.fpga.version}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n                      <div \r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                          borderWidth: \"1px\",\r\n                          borderRadius: \"6px\",\r\n                          padding: \"12px\"\r\n                        }}\r\n                      >\r\n                        <div style={{ \r\n                          fontSize: \"12px\", \r\n                          color: isDarkMode ? \"#9ca3af\" : \"#6b7280\",\r\n                          marginBottom: \"4px\"\r\n                        }}>\r\n                          FPGA Build\r\n                        </div>\r\n                        <div style={{ \r\n                          fontWeight: \"bold\",\r\n                          color: isDarkMode ? \"#f3f4f6\" : \"#111827\" \r\n                        }}>\r\n                          {results.fpga.build}\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <div \r\n                        style={{\r\n                          backgroundColor: isDarkMode ? \"#111827\" : \"#f9fafb\",\r\n                          borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                          borderWidth: \"1px\",\r\n                          borderRadius: \"6px\",\r\n                          padding: \"12px\"\r\n                        }}\r\n                      >\r\n                        <div style={{ \r\n                          fontSize: \"12px\", \r\n                          color: isDarkMode ? \"#9ca3af\" : \"#6b7280\",\r\n                          marginBottom: \"4px\"\r\n                        }}>\r\n                          FPGA Type\r\n                        </div>\r\n                        <div style={{ \r\n                          fontWeight: \"bold\",\r\n                          color: isDarkMode ? \"#f3f4f6\" : \"#111827\" \r\n                        }}>\r\n                          {results.fpga.type}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Rest of the result cards - truncated for brevity */}\r\n                \r\n                <div>\r\n                  <button \r\n                    onClick={generateReport}\r\n                    className={styles.reportButton}\r\n                    style={{\r\n                      backgroundColor: \"#10b981\",\r\n                      color: \"white\"\r\n                    }}\r\n                  >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.buttonIcon}>\r\n                      <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                    Generate Report\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </>\r\n        ) : (\r\n          /* Test History Panel */\r\n          <div \r\n            className={styles.card}\r\n            style={{\r\n              backgroundColor: isDarkMode ? \"#1e1e1e\" : \"white\",\r\n              borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\"\r\n            }}\r\n          >\r\n            <div \r\n              className={styles.cardHeader}\r\n              style={{\r\n                backgroundColor: isDarkMode ? \"#111827\" : undefined,\r\n                borderColor: isDarkMode ? \"#374151\" : \"#e5e7eb\",\r\n                background: isDarkMode \r\n                  ? \"linear-gradient(to right, #1e40af, #3b82f6)\" \r\n                  : \"linear-gradient(to right, #dbeafe, #eff6ff)\"\r\n              }}\r\n            >\r\n              <h3 className={styles.cardTitle} style={{ color: isDarkMode ? \"#f3f4f6\" : \"#111827\" }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className={styles.cardIcon}>\r\n                  <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n                S-Band Test History\r\n              </h3>\r\n            </div>\r\n            \r\n            <div className={styles.cardContent}>\r\n              {historyLoading ? (\r\n                <div style={{ \r\n                  textAlign: 'center',\r\n                  padding: '20px',\r\n                  color: isDarkMode ? '#d1d5db' : '#6b7280'\r\n                }}>\r\n                  <svg className={styles.spinnerIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ margin: '0 auto 8px' }}>\r\n                    <path d=\"M21 12a9 9 0 11-6.219-8.56\" />\r\n                  </svg>\r\n                  <p>Loading test history...</p>\r\n                </div>\r\n              ) : testHistory.length === 0 ? (\r\n                <div style={{ \r\n                  textAlign: 'center',\r\n                  padding: '20px',\r\n                  color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                  fontStyle: 'italic'\r\n                }}>\r\n                  <p>No test history available for this profile.</p>\r\n                  <p style={{ marginTop: '8px', fontSize: '14px' }}>\r\n                    Run a test to start building your history.\r\n                  </p>\r\n                  \r\n                  {!profileId && (\r\n                    <div style={{\r\n                      marginTop: '16px',\r\n                      padding: '12px',\r\n                      backgroundColor: isDarkMode ? 'rgba(239, 68, 68, 0.1)' : '#fee2e2',\r\n                      borderRadius: '6px',\r\n                      color: isDarkMode ? '#f87171' : '#b91c1c',\r\n                      fontSize: '14px'\r\n                    }}>\r\n                      <strong>Note:</strong> No profile ID detected. Test history requires a valid profile selection.\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {/* Visualization Controls */}\r\n                  <div style={{ marginBottom: '16px' }}>\r\n                    <label style={{ \r\n                      display: 'block',\r\n                      marginBottom: '8px',\r\n                      color: isDarkMode ? '#d1d5db' : '#4b5563',\r\n                      fontWeight: 500\r\n                    }}>\r\n                      Select Metric:\r\n                    </label>\r\n                    <select\r\n                      value={selectedMetric}\r\n                      onChange={(e) => setSelectedMetric(e.target.value)}\r\n                      style={{\r\n                        width: '100%',\r\n                        padding: '8px 12px',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                        fontSize: '14px'\r\n                      }}\r\n                    >\r\n                      {metricOptions.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                          {option.label}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  {/* Metric Trend Chart */}\r\n                  <div style={{\r\n                    height: '300px',\r\n                    marginBottom: '20px',\r\n                    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                    padding: '16px',\r\n                    borderRadius: '8px'\r\n                  }}>\r\n                    <h4 style={{ \r\n                      fontSize: '14px',\r\n                      fontWeight: 600,\r\n                      marginBottom: '12px',\r\n                      color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                    }}>\r\n                      {metricOptions.find(m => m.value === selectedMetric)?.label} Trend\r\n                    </h4>\r\n                    \r\n                    <ResponsiveContainer width=\"100%\" height={240}>\r\n                      <LineChart\r\n                        data={prepareChartData()}\r\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? \"#374151\" : \"#e5e7eb\"} />\r\n                        <XAxis \r\n                          dataKey=\"date\" \r\n                          stroke={isDarkMode ? \"#9ca3af\" : \"#6b7280\"}\r\n                          tick={{ fill: isDarkMode ? \"#9ca3af\" : \"#6b7280\" }}\r\n                        />\r\n                        <YAxis \r\n                          stroke={isDarkMode ? \"#9ca3af\" : \"#6b7280\"} \r\n                          tick={{ fill: isDarkMode ? \"#9ca3af\" : \"#6b7280\" }}\r\n                        />\r\n                        <Tooltip \r\n                          labelFormatter={(label, items) => { \r\n                            const item = items[0]?.payload;\r\n                            return item?.tooltipLabel || label;\r\n                          }}\r\n                          contentStyle={{\r\n                            backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\r\n                            borderColor: isDarkMode ? '#374151' : '#e5e7eb',\r\n                            color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                          }}\r\n                        />\r\n                        <Legend />\r\n                        <Line \r\n                          type=\"monotone\" \r\n                          dataKey={selectedMetric.split('.').pop() || 'value'} \r\n                          name={metricOptions.find(m => m.value === selectedMetric)?.label || selectedMetric}\r\n                          stroke=\"#3b82f6\" \r\n                          strokeWidth={2}\r\n                          dot={{ r: 4, stroke: '#3b82f6', fill: 'white' }}\r\n                          activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2, fill: 'white' }}\r\n                        />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n\r\n                  {/* Multi-select controls */}\r\n                  <div style={{ \r\n                    marginTop: '20px', \r\n                    marginBottom: '12px', \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center'\r\n                  }}>\r\n                    <div>\r\n                      <h4 style={{ \r\n                        fontSize: '14px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827',\r\n                        marginBottom: '6px'\r\n                      }}>\r\n                        Test History Records\r\n                      </h4>\r\n                    </div>\r\n                    \r\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r\n                      {/* Toggle button for multi-select mode */}\r\n                      <button\r\n                        onClick={toggleMultiSelectMode}\r\n                        style={{\r\n                          backgroundColor: isMultiSelectMode \r\n                            ? (isDarkMode ? '#4f46e5' : '#6366f1') \r\n                            : (isDarkMode ? '#1f2937' : '#f3f4f6'),\r\n                          color: isMultiSelectMode \r\n                            ? 'white' \r\n                            : (isDarkMode ? '#e5e7eb' : '#374151'),\r\n                          border: 'none',\r\n                          borderRadius: '6px',\r\n                          padding: '6px 12px',\r\n                          fontSize: '13px',\r\n                          fontWeight: 500,\r\n                          cursor: 'pointer',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '6px',\r\n                          transition: 'all 0.2s ease'\r\n                        }}\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                          <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\r\n                          <path fillRule=\"evenodd\" d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                        {isMultiSelectMode ? 'Exit Selection Mode' : 'Select Items'}\r\n                      </button>\r\n                      \r\n                      {/* Only show these controls when in multi-select mode */}\r\n                      {isMultiSelectMode && (\r\n                        <>\r\n                          <button\r\n                            onClick={selectAllItems}\r\n                            style={{\r\n                              backgroundColor: 'transparent',\r\n                              color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                              border: 'none',\r\n                              borderRadius: '6px',\r\n                              padding: '6px 8px',\r\n                              fontSize: '13px',\r\n                              fontWeight: 500,\r\n                              cursor: 'pointer'\r\n                            }}\r\n                          >\r\n                            Select All\r\n                          </button>\r\n                          \r\n                          <button\r\n                            onClick={deselectAllItems}\r\n                            style={{\r\n                              backgroundColor: 'transparent',\r\n                              color: isDarkMode ? '#93c5fd' : '#2563eb',\r\n                              border: 'none',\r\n                              borderRadius: '6px',\r\n                              padding: '6px 8px',\r\n                              fontSize: '13px',\r\n                              fontWeight: 500,\r\n                              cursor: 'pointer'\r\n                            }}\r\n                            >\r\n                              Deselect All\r\n                            </button>\r\n                            \r\n                            <button\r\n                              onClick={deleteSelectedItems}\r\n                              disabled={selectedItems.length === 0}\r\n                              style={{\r\n                                backgroundColor: selectedItems.length === 0 \r\n                                  ? (isDarkMode ? '#6b7280' : '#9ca3af') \r\n                                  : (isDarkMode ? '#dc2626' : '#ef4444'),\r\n                                color: 'white',\r\n                                border: 'none',\r\n                                borderRadius: '6px',\r\n                                padding: '6px 12px',\r\n                                fontSize: '13px',\r\n                                fontWeight: 500,\r\n                                cursor: selectedItems.length === 0 ? 'not-allowed' : 'pointer',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: '6px'\r\n                              }}\r\n                            >\r\n                              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                                <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                              </svg>\r\n                              Delete Selected ({selectedItems.length})\r\n                            </button>\r\n                          </>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n  \r\n                    {/* Information panel before the table */}\r\n                    <div style={{ marginBottom: '20px', padding: '12px', borderRadius: '8px', backgroundColor: isDarkMode ? '#1e293b' : '#f0f9ff', border: '1px solid', borderColor: isDarkMode ? '#475569' : '#bfdbfe' }}>\r\n                      <h4 style={{ marginBottom: '8px', color: isDarkMode ? '#e5e7eb' : '#1e40af', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                          <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>\r\n                        </svg>\r\n                        Test History Information\r\n                      </h4>\r\n                      <p style={{ fontSize: '14px', color: isDarkMode ? '#cbd5e1' : '#334155' }}>\r\n                        This chart shows only <strong>real test data</strong> from actual hardware tests. \r\n                        Simulated test results are not included in this history or visualization.\r\n                      </p>\r\n                      {testHistory.length === 0 && (\r\n                        <p style={{ marginTop: '10px', fontSize: '14px', color: isDarkMode ? '#fb923c' : '#c2410c', display: 'flex', alignItems: 'center', gap: '8px' }}>\r\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                            <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                            <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n                          </svg>\r\n                          No real test data is available yet. Run tests in real mode (not simulation) to collect actual data.\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {/* Test History Table */}\r\n                    <div style={{\r\n                      marginTop: '12px',\r\n                      borderRadius: '8px',\r\n                      overflow: 'hidden',\r\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                    }}>\r\n                      {testHistory.length > 0 ? (\r\n                        <table style={{ \r\n                          width: '100%', \r\n                          borderCollapse: 'collapse',\r\n                          fontSize: '14px'\r\n                        }}>\r\n                          <thead style={{ \r\n                            backgroundColor: isDarkMode ? '#1f2937' : '#f9fafb',\r\n                            color: isDarkMode ? '#d1d5db' : '#6b7280',\r\n                            fontWeight: 500\r\n                          }}>\r\n                            <tr>\r\n                              {/* Add a checkbox column when in multi-select mode */}\r\n                              {isMultiSelectMode && (\r\n                                <th style={{ \r\n                                  padding: '12px 12px',\r\n                                  textAlign: 'center',\r\n                                  width: '40px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                                }}>\r\n                                  <input \r\n                                    type=\"checkbox\"\r\n                                    checked={selectedItems.length === testHistory.length}\r\n                                    onChange={(e) => {\r\n                                      if (e.target.checked) {\r\n                                        selectAllItems();\r\n                                      } else {\r\n                                        deselectAllItems();\r\n                                      }\r\n                                    }}\r\n                                    style={{ cursor: 'pointer', width: '16px', height: '16px' }}\r\n                                  />\r\n                                </th>\r\n                              )}\r\n                              <th style={{ \r\n                                padding: '12px 16px',\r\n                                textAlign: 'left',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                              }}>\r\n                                Date/Time\r\n                              </th>\r\n                              <th style={{ \r\n                                padding: '12px 16px',\r\n                                textAlign: 'left',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                              }}>\r\n                                Test Options\r\n                              </th>\r\n                              <th style={{ \r\n                                padding: '12px 16px',\r\n                                textAlign: 'left',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                              }}>\r\n                                Status\r\n                              </th>\r\n                              {/* Add the Type column */}\r\n                              <th style={{ \r\n                                padding: '12px 16px',\r\n                                textAlign: 'left',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                              }}>\r\n                                Type\r\n                              </th>\r\n                              <th style={{ \r\n                                padding: '12px 16px',\r\n                                textAlign: 'left',\r\n                                borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                              }}>\r\n                                Actions\r\n                              </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {testHistory.slice().reverse().map((item, index) => (\r\n                              <tr key={item.id} style={{ \r\n                                backgroundColor: isMultiSelectMode && selectedItems.includes(item.id)\r\n                                  ? (isDarkMode ? 'rgba(79, 70, 229, 0.1)' : 'rgba(99, 102, 241, 0.1)')\r\n                                  : (index % 2 === 0 \r\n                                    ? (isDarkMode ? '#111827' : '#ffffff') \r\n                                    : (isDarkMode ? '#1f2937' : '#f9fafb')),\r\n                                transition: 'background-color 0.2s ease'\r\n                              }}>\r\n                                {/* Add a checkbox column when in multi-select mode */}\r\n                                {isMultiSelectMode && (\r\n                                  <td style={{ \r\n                                    padding: '12px 12px',\r\n                                    textAlign: 'center',\r\n                                    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                                  }}>\r\n                                    <input \r\n                                      type=\"checkbox\"\r\n                                      checked={selectedItems.includes(item.id)}\r\n                                      onChange={() => toggleItemSelection(item.id)}\r\n                                      style={{ cursor: 'pointer', width: '16px', height: '16px' }}\r\n                                    />\r\n                                  </td>\r\n                                )}\r\n                                <td style={{ \r\n                                  padding: '12px 16px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                  color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                                }}>\r\n                                  {new Date(item.test_date).toLocaleString()}\r\n                                </td>\r\n                                <td style={{ \r\n                                  padding: '12px 16px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                  color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                                }}>\r\n                                  {item.results.testedOptions ? item.results.testedOptions.join(', ') : 'N/A'}\r\n                                </td>\r\n                                <td style={{ \r\n                                  padding: '12px 16px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                                }}>\r\n                                  <span style={{ \r\n                                    display: 'inline-block',\r\n                                    padding: '4px 8px',\r\n                                    borderRadius: '9999px',\r\n                                    fontSize: '12px',\r\n                                    fontWeight: 500,\r\n                                    backgroundColor: item.status === 'completed' \r\n                                      ? (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5')\r\n                                      : (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                                    color: item.status === 'completed'\r\n                                      ? (isDarkMode ? '#34d399' : '#047857')\r\n                                      : (isDarkMode ? '#f87171' : '#b91c1c')\r\n                                  }}>\r\n                                    {item.status === 'completed' ? 'SUCCESS' : 'FAILED'}\r\n                                  </span>\r\n                                </td>\r\n                                {/* Add the Type column cell */}\r\n                                <td style={{ \r\n                                  padding: '12px 16px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                                }}>\r\n                                  <span style={{ \r\n                                    display: 'inline-block',\r\n                                    padding: '4px 8px',\r\n                                    borderRadius: '9999px',\r\n                                    fontSize: '12px',\r\n                                    fontWeight: 500,\r\n                                    backgroundColor: 'rgba(16, 185, 129, 0.2)',\r\n                                    color: isDarkMode ? '#34d399' : '#047857'\r\n                                  }}>\r\n                                    REAL DATA\r\n                                  </span>\r\n                                </td>\r\n                                <td style={{ \r\n                                  padding: '12px 16px',\r\n                                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                                  display: 'flex',\r\n                                  gap: '8px'\r\n                                }}>\r\n                                  <button \r\n                                    onClick={() => setSelectedHistoryItem(item)}\r\n                                    style={{\r\n                                      backgroundColor: isDarkMode ? '#2563eb' : '#3b82f6',\r\n                                      color: 'white',\r\n                                      border: 'none',\r\n                                      borderRadius: '4px',\r\n                                      padding: '4px 8px',\r\n                                      fontSize: '12px',\r\n                                      cursor: 'pointer',\r\n                                      fontWeight: 500,\r\n                                      display: 'flex',\r\n                                      alignItems: 'center',\r\n                                      gap: '4px'\r\n                                    }}\r\n                                  >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                                      <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\" />\r\n                                      <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\" />\r\n                                    </svg>\r\n                                    View\r\n                                  </button>\r\n                                  \r\n                                  {/* Only show the delete button when not in multi-select mode */}\r\n                                  {!isMultiSelectMode && (\r\n                                    <button \r\n                                      onClick={() => deleteTestHistoryItem(item.id)}\r\n                                      style={{\r\n                                        backgroundColor: isDarkMode ? '#dc2626' : '#ef4444',\r\n                                        color: 'white',\r\n                                        border: 'none',\r\n                                        borderRadius: '4px',\r\n                                        padding: '4px 8px',\r\n                                        fontSize: '12px',\r\n                                        cursor: 'pointer',\r\n                                        fontWeight: 500,\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        gap: '4px'\r\n                                      }}\r\n                                    >\r\n                                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                                        <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                                      </svg>\r\n                                      Delete\r\n                                    </button>\r\n                                  )}\r\n                                </td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </table>\r\n                      ) : (\r\n                        <div style={{\r\n                          padding: '20px',\r\n                          textAlign: 'center',\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280'\r\n                        }}>\r\n                          <p>No real test data available. Run tests with real hardware connections to collect data.</p>\r\n                          <p style={{ marginTop: '10px', fontSize: '14px' }}>\r\n                            Test data from simulation mode is not stored in the history database.\r\n                          </p>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {/* Additional Metrics Summary */}\r\n                    <div style={{ marginTop: '20px' }}>\r\n                      <h4 style={{ \r\n                        fontSize: '14px',\r\n                        fontWeight: 600,\r\n                        marginBottom: '12px',\r\n                        color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                      }}>\r\n                        Key Metrics Summary\r\n                      </h4>\r\n                      \r\n                      <div style={{ \r\n                        display: 'grid',\r\n                        gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n                        gap: '12px'\r\n                      }}>\r\n                        {/* Metric Card: Average Receiver Status */}\r\n                        <div style={{\r\n                          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <div style={{ \r\n                            fontSize: '12px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            Active Receiver Rate\r\n                          </div>\r\n                          <div style={{ \r\n                            fontSize: '18px',\r\n                            fontWeight: 600,\r\n                            color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                          }}>\r\n                            {(() => {\r\n                              const values = testHistory\r\n                                .map(item => item.results?.receiver?.status === '1')\r\n                                .filter(v => v !== undefined);\r\n                                \r\n                              if (values.length === 0) return 'N/A';\r\n                              \r\n                              const successCount = values.filter(Boolean).length;\r\n                              const successRate = (successCount / values.length) * 100;\r\n                              return `${successRate.toFixed(1)}%`;\r\n                            })()}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {/* Metric Card: Average Frequency Shift */}\r\n                        <div style={{\r\n                          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <div style={{ \r\n                            fontSize: '12px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            Avg. Frequency Shift\r\n                          </div>\r\n                          <div style={{ \r\n                            fontSize: '18px',\r\n                            fontWeight: 600,\r\n                            color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                          }}>\r\n                            {(() => {\r\n                              const values = testHistory\r\n                                .map(item => {\r\n                                  const val = item.results?.receiver?.frequencyShift;\r\n                                  return val ? parseFloat(val) : null;\r\n                                })\r\n                                .filter(v => v !== null) as number[];\r\n                                \r\n                              if (values.length === 0) return 'N/A';\r\n                              \r\n                              const avg = values.reduce((sum, v) => sum + v, 0) / values.length;\r\n                              return `${avg.toFixed(1)} Hz`;\r\n                            })()}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {/* Metric Card: TX Status Rate */}\r\n                        <div style={{\r\n                          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <div style={{ \r\n                            fontSize: '12px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            Active TX Rate\r\n                          </div>\r\n                          <div style={{ \r\n                            fontSize: '18px',\r\n                            fontWeight: 600,\r\n                            color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                          }}>\r\n                            {(() => {\r\n                              const values = testHistory\r\n                                .map(item => item.results?.transmitter?.status === '1')\r\n                                .filter(v => v !== undefined);\r\n                                \r\n                              if (values.length === 0) return 'N/A';\r\n                              \r\n                              const successCount = values.filter(Boolean).length;\r\n                              const successRate = (successCount / values.length) * 100;\r\n                              return `${successRate.toFixed(1)}%`;\r\n                            })()}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        {/* Metric Card: Test Success Rate */}\r\n                        <div style={{\r\n                          backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                          borderRadius: '8px',\r\n                          padding: '12px',\r\n                          border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`\r\n                        }}>\r\n                          <div style={{ \r\n                            fontSize: '12px',\r\n                            color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                            marginBottom: '4px'\r\n                          }}>\r\n                            Overall Success Rate\r\n                          </div>\r\n                          <div style={{ \r\n                            fontSize: '18px',\r\n                            fontWeight: 600,\r\n                            color: isDarkMode ? '#e5e7eb' : '#111827'\r\n                          }}>\r\n                            {(() => {\r\n                              if (testHistory.length === 0) return 'N/A';\r\n                              \r\n                              const successes = testHistory.filter(item => item.status === 'completed').length;\r\n                              const successRate = (successes / testHistory.length) * 100;\r\n                              \r\n                              return `${successRate.toFixed(0)}%`;\r\n                            })()}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n  \r\n                    {/* Export History Button */}\r\n                    <div style={{ marginTop: '20px', display: 'flex', justifyContent: 'flex-end', gap: '10px', flexWrap: 'wrap' }}>\r\n                      {/* Clear All History Button - New */}\r\n                      <button \r\n                        onClick={clearAllTestHistory}\r\n                        style={{\r\n                          backgroundColor: '#dc2626', /* Deeper red for more dangerous action */\r\n                          color: 'white',\r\n                          border: 'none',\r\n                          borderRadius: '6px',\r\n                          padding: '8px 16px',\r\n                          fontSize: '14px',\r\n                          fontWeight: 500,\r\n                          cursor: 'pointer',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '8px'\r\n                        }}\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                          <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                        Clear All History\r\n                      </button>\r\n                      \r\n                      {/* Clean Up Simulated Data Button */}\r\n                      <button \r\n                        onClick={() => cleanupSimulatedData()}\r\n                        style={{\r\n                          backgroundColor: '#ef4444',\r\n                          color: 'white',\r\n                          border: 'none',\r\n                          borderRadius: '6px',\r\n                          padding: '8px 16px',\r\n                          fontSize: '14px',\r\n                          fontWeight: 500,\r\n                          cursor: 'pointer',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '8px'\r\n                        }}\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                          <path fillRule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                        Clean Up Simulated Data\r\n                      </button>\r\n                      \r\n                      {/* Limit History Button */}\r\n                      <button \r\n                        onClick={() => limitTestHistory(30)}\r\n                        style={{\r\n                          backgroundColor: '#3b82f6',\r\n                          color: 'white',\r\n                          border: 'none',\r\n                          borderRadius: '6px',\r\n                          padding: '8px 16px',\r\n                          fontSize: '14px',\r\n                          fontWeight: 500,\r\n                          cursor: 'pointer',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '8px'\r\n                        }}\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                          <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                        Limit History (30 Records)\r\n                      </button>\r\n                      \r\n                      <button \r\n                        onClick={() => {\r\n                          // Implement history export functionality\r\n                          const historyData = JSON.stringify(testHistory, null, 2);\r\n                          const blob = new Blob([historyData], { type: 'application/json' });\r\n                          const url = URL.createObjectURL(blob);\r\n                          const a = document.createElement('a');\r\n                          a.href = url;\r\n                          a.download = `sband_test_history_${profileId || 'unknown'}.json`;\r\n                          document.body.appendChild(a);\r\n                          a.click();\r\n                          document.body.removeChild(a);\r\n                          URL.revokeObjectURL(url);\r\n                        }}\r\n                        style={{\r\n                          backgroundColor: '#10b981',\r\n                          color: 'white',\r\n                          border: 'none',\r\n                          borderRadius: '6px',\r\n                          padding: '8px 16px',\r\n                          fontSize: '14px',\r\n                          fontWeight: 500,\r\n                          cursor: 'pointer',\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: '8px'\r\n                        }}\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" style={{ width: '16px', height: '16px' }}>\r\n                          <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                        Export Test History\r\n                      </button>\r\n                    </div>\r\n  \r\n                    {/* Status Messages for Cleanup and Limit Operations */}\r\n                    {(cleanupMessage || limitMessage) && (\r\n                      <div style={{ \r\n                        marginTop: '12px',\r\n                        padding: '12px',\r\n                        borderRadius: '6px',\r\n                        backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                        fontSize: '14px'\r\n                      }}>\r\n                        {cleanupMessage && (\r\n                          <div style={{ \r\n                            color: cleanupMessage.includes('✅') ? \r\n                              (isDarkMode ? '#34d399' : '#047857') : \r\n                              (isDarkMode ? '#f87171' : '#b91c1c'),\r\n                            marginBottom: limitMessage ? '8px' : '0'\r\n                          }}>\r\n                            {cleanupMessage}\r\n                          </div>\r\n                        )}\r\n                        \r\n                        {limitMessage && (\r\n                          <div style={{ \r\n                            color: limitMessage.includes('✅') ? \r\n                              (isDarkMode ? '#34d399' : '#047857') : \r\n                              (isDarkMode ? '#f87171' : '#b91c1c')\r\n                          }}>\r\n                            {limitMessage}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Test Details Modal */}\r\n          {selectedHistoryItem && (\r\n            <div style={{\r\n              position: 'fixed',\r\n              top: 0,\r\n              left: 0,\r\n              right: 0,\r\n              bottom: 0,\r\n              backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              zIndex: 1000\r\n            }}>\r\n              <div style={{\r\n                backgroundColor: isDarkMode ? '#1e1e1e' : 'white',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\r\n                width: '90%',\r\n                maxWidth: '800px',\r\n                maxHeight: '90vh',\r\n                overflow: 'auto',\r\n                position: 'relative'\r\n              }}>\r\n                <div style={{\r\n                  padding: '16px',\r\n                  borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center'\r\n                }}>\r\n                  <h3 style={{\r\n                    fontSize: '18px',\r\n                    fontWeight: 600,\r\n                    color: isDarkMode ? '#f3f4f6' : '#111827',\r\n                    margin: 0\r\n                  }}>\r\n                    Test Details - {new Date(selectedHistoryItem.test_date).toLocaleString()}\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => setSelectedHistoryItem(null)}\r\n                    style={{\r\n                      backgroundColor: 'transparent',\r\n                      border: 'none',\r\n                      fontSize: '24px',\r\n                      cursor: 'pointer',\r\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\r\n                    }}\r\n                  >\r\n                    ×\r\n                  </button>\r\n                </div>\r\n                \r\n                <div style={{ padding: '16px' }}>\r\n                  <div style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: 'repeat(2, 1fr)',\r\n                    gap: '16px',\r\n                    marginBottom: '16px'\r\n                  }}>\r\n                    <div>\r\n                      <div style={{\r\n                        fontSize: '14px',\r\n                        fontWeight: 500,\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Component\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '16px',\r\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\r\n                      }}>\r\n                        {selectedHistoryItem.component_id}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <div style={{\r\n                        fontSize: '14px',\r\n                        fontWeight: 500,\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Test Type\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '16px',\r\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\r\n                      }}>\r\n                        {selectedHistoryItem.test_type || 'Standard Test'}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <div style={{\r\n                        fontSize: '14px',\r\n                        fontWeight: 500,\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Status\r\n                      </div>\r\n                      <div style={{\r\n                        display: 'inline-block',\r\n                        padding: '4px 8px',\r\n                        borderRadius: '4px',\r\n                        fontSize: '14px',\r\n                        backgroundColor: selectedHistoryItem.status === 'completed' \r\n                          ? (isDarkMode ? 'rgba(16, 185, 129, 0.2)' : '#ecfdf5')\r\n                          : (isDarkMode ? 'rgba(239, 68, 68, 0.2)' : '#fee2e2'),\r\n                        color: selectedHistoryItem.status === 'completed'\r\n                          ? (isDarkMode ? '#34d399' : '#047857')\r\n                          : (isDarkMode ? '#f87171' : '#b91c1c')\r\n                      }}>\r\n                        {selectedHistoryItem.status === 'completed' ? 'SUCCESS' : 'FAILED'}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <div style={{\r\n                        fontSize: '14px',\r\n                        fontWeight: 500,\r\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                        marginBottom: '4px'\r\n                      }}>\r\n                        Test Date\r\n                      </div>\r\n                      <div style={{\r\n                        fontSize: '16px',\r\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\r\n                      }}>\r\n                        {new Date(selectedHistoryItem.test_date).toLocaleString()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Options Tested */}\r\n                  <div style={{ marginTop: '16px' }}>\r\n                    <h4 style={{\r\n                      fontSize: '16px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#f3f4f6' : '#111827',\r\n                      marginBottom: '8px'\r\n                    }}>\r\n                      Options Tested\r\n                    </h4>\r\n                    \r\n                    <div style={{\r\n                      display: 'flex',\r\n                      flexWrap: 'wrap',\r\n                      gap: '8px',\r\n                      marginBottom: '16px'\r\n                    }}>\r\n                      {selectedHistoryItem.results.testedOptions ? (\r\n                        selectedHistoryItem.results.testedOptions.map((option: string, index: number) => (\r\n                          <span key={index} style={{\r\n                            display: 'inline-block',\r\n                            padding: '4px 8px',\r\n                            backgroundColor: isDarkMode ? '#1f2937' : '#f3f4f6',\r\n                            borderRadius: '4px',\r\n                            fontSize: '12px',\r\n                            color: isDarkMode ? '#93c5fd' : '#3b82f6'\r\n                          }}>\r\n                            {option}\r\n                          </span>\r\n                        ))\r\n                      ) : (\r\n                        <span style={{\r\n                          color: isDarkMode ? '#9ca3af' : '#6b7280',\r\n                          fontStyle: 'italic'\r\n                        }}>\r\n                          No specific options recorded\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div style={{ marginTop: '24px' }}>\r\n                    <h4 style={{\r\n                      fontSize: '16px',\r\n                      fontWeight: 600,\r\n                      color: isDarkMode ? '#f3f4f6' : '#111827',\r\n                      marginBottom: '12px'\r\n                    }}>\r\n                      Test Results\r\n                    </h4>\r\n                    \r\n                    <div style={{\r\n                      backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                      borderRadius: '6px',\r\n                      padding: '16px',\r\n                      overflow: 'auto',\r\n                      maxHeight: '400px',\r\n                      fontFamily: 'monospace',\r\n                      fontSize: '14px',\r\n                      color: isDarkMode ? '#f3f4f6' : '#111827',\r\n                      whiteSpace: 'pre-wrap'\r\n                    }}>\r\n                      {JSON.stringify(selectedHistoryItem.results, null, 2)}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {selectedHistoryItem.notes && (\r\n                    <div style={{ marginTop: '24px' }}>\r\n                      <h4 style={{\r\n                        fontSize: '16px',\r\n                        fontWeight: 600,\r\n                        color: isDarkMode ? '#f3f4f6' : '#111827',\r\n                        marginBottom: '12px'\r\n                      }}>\r\n                        Notes\r\n                      </h4>\r\n                      <div style={{\r\n                        padding: '12px',\r\n                        backgroundColor: isDarkMode ? '#111827' : '#f9fafb',\r\n                        borderRadius: '6px',\r\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\r\n                      }}>\r\n                        {selectedHistoryItem.notes}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  <div style={{ \r\n                    marginTop: '24px',\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-end'\r\n                  }}>\r\n                    <button\r\n                      onClick={() => {\r\n                        // Export the test details\r\n                        const detailsJson = JSON.stringify(selectedHistoryItem, null, 2);\r\n                        const blob = new Blob([detailsJson], { type: 'application/json' });\r\n                        const url = URL.createObjectURL(blob);\r\n                        \r\n                        const a = document.createElement('a');\r\n                        a.href = url;\r\n                        a.download = `test_details_${selectedHistoryItem.id}.json`;\r\n                        document.body.appendChild(a);\r\n                        a.click();\r\n                        document.body.removeChild(a);\r\n                        URL.revokeObjectURL(url);\r\n                      }}\r\n                      style={{\r\n                        backgroundColor: '#3b82f6',\r\n                        color: 'white',\r\n                        border: 'none',\r\n                        borderRadius: '6px',\r\n                        padding: '8px 16px',\r\n                        fontSize: '14px',\r\n                        fontWeight: 500,\r\n                        cursor: 'pointer',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: '8px'\r\n                      }}\r\n                    >\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                        <path fillRule=\"evenodd\" d=\"M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                      </svg>\r\n                      Export Details\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n  };"],"names":[],"mappings":"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","debugId":null}}]
}