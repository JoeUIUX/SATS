// src/services/reports/sbandReport.ts
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';

/**
 * Generate both Word document and PDF reports for S-Band checkout results
 * 
 * @param results The S-Band test results
 * @returns A promise that resolves to the filename of the saved reports
 */
export async function generateSBandReport(results: any): Promise<string> {
  try {
    // Generate both Word and PDF reports
    const wordFilename = await generateSBandWordReport(results);
    const pdfFilename = await generateSBandPDFReport(results);
    
    return `${wordFilename} and ${pdfFilename}`;
  } catch (error) {
    console.error('‚ùå Error generating S-Band reports:', error);
    throw new Error(`Failed to generate S-Band reports: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a Word document report for S-Band checkout results
 * 
 * @param results The S-Band test results
 * @returns A promise that resolves to the filename of the saved report
 */
async function generateSBandWordReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `S-Band_Checkout_${dateStr}_${timeStr}.docx`;
  
  console.log(`üìù Generating S-Band Word report: ${filename}`);
  
  // Create all document paragraphs in one array
  const paragraphs = [
    // Title
    new Paragraph({
      text: "S-Band Automated Self Check Out Test",
      heading: HeadingLevel.HEADING_1,
      spacing: { after: 200 }
    }),
    
    // Test metadata
    new Paragraph({
      text: `Test Version: 24.3.21`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test Date: ${now.toLocaleDateString()}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test Time: ${now.toLocaleTimeString()}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Generated by: SATS - Satellite Automated Testing System`,
      spacing: { after: 200 }
    }),
    
    // Test Summary
    new Paragraph({
      text: "Test Summary",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'Default configuration'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`,
      spacing: { after: 100 }
    }),
    
    // Separator
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200 }
    }),
    
    // S-Band Telemetry Section
    new Paragraph({
      text: "* S-Band Telemetry :",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    
    // FPGA Information
    new Paragraph({
      text: `FPGA version on the FPGA software                   : ${results.fpga?.version || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `FPGA build on the FPGA software                     : ${results.fpga?.build || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Year of the baseband board manufacture              : ${results.hardware?.idYear || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Week of the baseband board manufacture              : ${results.hardware?.idMonth || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Ordering number of the baseband board manufacture   : ${results.hardware?.orderNumber || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `FPGA type and function                              : ${results.fpga?.type || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Current configuration of the LCL function           : ${results.status?.lclStatus || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Options configured in the FlashROM of the FPGA      : ${results.fpga?.option || 'N/A'}`,
      spacing: { after: 100 }
    }),
    
    // Empty line
    new Paragraph({
      text: ``,
      spacing: { after: 100 }
    }),
    
    // Receiver Information
    new Paragraph({
      text: `State of the receiver                               : ${results.receiver?.status || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Current configuration of receiver sensitivity level : ${results.receiver?.sensitivity || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Frequency shift measured by receiver                : ${results.receiver?.frequencyShift || 'N/A'} Hz`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `IQ input power measured on the digital signal       : ${results.receiver?.iqPower || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Current DAC to control the RF gain of RX frontend   : ${results.receiver?.agcValue || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Eb information measured by the receiver             : ${results.receiver?.demodEb || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `N0 information measured by the receiver             : ${results.receiver?.demodN0 || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Receiver data rate configuration                    : ${results.receiver?.dataRate || 'N/A'}`,
      spacing: { after: 100 }
    }),
    
    // Empty line
    new Paragraph({
      text: ``,
      spacing: { after: 100 }
    }),
    
    // Transmitter Information
    new Paragraph({
      text: `Status of the transmitter                           : ${results.transmitter?.status || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Encoder configuration                               : ${results.transmitter?.convDiff || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Filter configuration                                : ${results.transmitter?.convFilter || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Configuration of output waveform of modulated signal: ${results.transmitter?.waveform || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `PCM/PM modulation index                             : ${results.transmitter?.pcmIndex || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Current DAC used to control the gain of the TX RF   : ${results.transmitter?.agcValue || 'N/A'}`,
      spacing: { after: 100 }
    }),
    
    // Empty line
    new Paragraph({
      text: ``,
      spacing: { after: 100 }
    }),
    
    // Modes Information
    new Paragraph({
      text: `Coherent mode status                                : ${results.modes?.coherentMode || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Ranging mode status                                 : ${results.modes?.rangingMode || 'N/A'}`,
      spacing: { after: 100 }
    }),
    
    // Empty line
    new Paragraph({
      text: ``,
      spacing: { after: 100 }
    }),
    
    // Temperature Information
    new Paragraph({
      text: `Value read on the input 0 of the ADC                : ${results.temperature?.adc0 || 'N/A'} deg C`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Value read on the input 1 of the ADC                : ${results.temperature?.adc1 || 'N/A'} deg C`,
      spacing: { after: 100 }
    }),
    
    // Separator
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    }),
  ];
  
  // Add a page break before the TX/RX test sections
  paragraphs.push(
    new Paragraph({
      text: "",
      pageBreakBefore: true
    })
  );
  
  // Add TX test section if performed
  if (results.txTest) {
    const txTestParagraphs = createTxTestSection(results);
    paragraphs.push(...txTestParagraphs);
  }
  
  // Add RX test section if performed
  if (results.rxTest) {
    const rxTestParagraphs = createRxTestSection(results);
    paragraphs.push(...rxTestParagraphs);
  }
  
  // Add Test Completion Summary
  paragraphs.push(
    new Paragraph({
      text: "* Test Completion Summary:",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Report generated: ${now.toLocaleString()}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    })
  );
  
  // Create the document with all the paragraphs
  const doc = new Document({
    sections: [
      {
        properties: {},
        children: paragraphs
      }
    ]
  });
  
  try {
    // Generate the document
    console.log('üîÑ Generating S-Band Word document...');
    const buffer = await Packer.toBuffer(doc);
    
    // Save the file using file-saver (this will save to the user's default Downloads folder)
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    saveAs(blob, filename);
    
    console.log(`‚úÖ S-Band Word report saved successfully: ${filename}`);
    
    // Mark the report as generated
    if (results && typeof results === 'object') {
      results.reportGenerated = true;
    }
    
    return filename;
  } catch (error) {
    console.error('‚ùå Error generating S-Band Word report:', error);
    throw new Error(`Failed to generate S-Band Word report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a PDF report for S-Band checkout results
 * 
 * @param results The S-Band test results
 * @returns A promise that resolves to the filename of the saved PDF report
 */
async function generateSBandPDFReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `S-Band_Checkout_${dateStr}_${timeStr}.pdf`;
  
  console.log(`üìù Generating S-Band PDF report: ${filename}`);
  
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up the document
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (2 * margin);

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace: number = 20) => {
      if (yPosition + requiredSpace > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('S-Band Automated Self Check Out Test Report', margin, yPosition);
    yPosition += 15;

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by SATS - Satellite Automated Testing System', margin, yPosition);
    yPosition += 10;

    // Test metadata
    pdf.setFontSize(10);
    pdf.text(`Test Date: ${now.toLocaleDateString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Time: ${now.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'Default configuration'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`, margin, yPosition);
    yPosition += 15;

    // Add a separator line
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // S-Band Telemetry Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('S-Band Telemetry', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    // FPGA Information
    pdf.text(`FPGA version: ${results.fpga?.version || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`FPGA build: ${results.fpga?.build || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Board manufacture year: ${results.hardware?.idYear || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Board manufacture week: ${results.hardware?.idMonth || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Board ordering number: ${results.hardware?.orderNumber || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`FPGA type and function: ${results.fpga?.type || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`LCL function configuration: ${results.status?.lclStatus || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`FlashROM options: ${results.fpga?.option || 'N/A'}`, margin, yPosition);
    yPosition += 12;

    // Receiver Information
    checkNewPage(50);
    pdf.text(`Receiver state: ${results.receiver?.status || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Receiver sensitivity: ${results.receiver?.sensitivity || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Frequency shift: ${results.receiver?.frequencyShift || 'N/A'} Hz`, margin, yPosition);
    yPosition += 6;
    pdf.text(`IQ input power: ${results.receiver?.iqPower || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`AGC DAC value: ${results.receiver?.agcValue || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Demod Eb: ${results.receiver?.demodEb || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Demod N0: ${results.receiver?.demodN0 || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Data rate: ${results.receiver?.dataRate || 'N/A'}`, margin, yPosition);
    yPosition += 12;

    // Transmitter Information
    checkNewPage(40);
    pdf.text(`Transmitter status: ${results.transmitter?.status || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Encoder configuration: ${results.transmitter?.convDiff || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Filter configuration: ${results.transmitter?.convFilter || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Output waveform: ${results.transmitter?.waveform || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`PCM/PM modulation index: ${results.transmitter?.pcmIndex || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`TX AGC DAC value: ${results.transmitter?.agcValue || 'N/A'}`, margin, yPosition);
    yPosition += 12;

    // Modes Information  
    checkNewPage(20);
    pdf.text(`Coherent mode: ${results.modes?.coherentMode || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Ranging mode: ${results.modes?.rangingMode || 'N/A'}`, margin, yPosition);
    yPosition += 12;

    // Temperature Information
    checkNewPage(20);
    pdf.text(`ADC input 0 temperature: ${results.temperature?.adc0 || 'N/A'} ¬∞C`, margin, yPosition);
    yPosition += 6;
    pdf.text(`ADC input 1 temperature: ${results.temperature?.adc1 || 'N/A'} ¬∞C`, margin, yPosition);
    yPosition += 15;

    // TX Test Results (if available)
    if (results.txTest) {
      checkNewPage(40);
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('S-Band Transmitter Test Results', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Test completed: ${results.txTest.completed ? 'Yes' : 'No'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Test status: ${results.txTest.status || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      
      if (results.txTest.error) {
        pdf.text(`Error: ${results.txTest.error}`, margin, yPosition);
        yPosition += 6;
      }
      yPosition += 10;
    }

    // RX Test Results (if available)
    if (results.rxTest) {
      checkNewPage(40);
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('S-Band Receiver Test Results', margin, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Test completed: ${results.rxTest.completed ? 'Yes' : 'No'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Test status: ${results.rxTest.status || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      
      if (results.rxTest.error) {
        pdf.text(`Error: ${results.rxTest.error}`, margin, yPosition);
        yPosition += 6;
      }
      yPosition += 10;
    }

    // Test Completion Summary
    checkNewPage(30);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Test Completion Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(results.error ? `Test completed with errors: ${results.error}` : 'All tests completed successfully', margin, yPosition);
    yPosition += 6;
    pdf.text(`Report generated: ${now.toLocaleString()}`, margin, yPosition);

    // Add footer to all pages
    const totalPages = pdf.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      pdf.text(`Generated: ${now.toLocaleString()}`, margin, pageHeight - 10);
    }

    // Save the PDF
    pdf.save(filename);

    console.log(`‚úÖ S-Band PDF report saved successfully: ${filename}`);
    return filename;

  } catch (error) {
    console.error('‚ùå Error generating S-Band PDF report:', error);
    throw new Error(`Failed to generate S-Band PDF report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// Helper function to create TX test section
function createTxTestSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [
    new Paragraph({
      text: "* S-Band Transmitter Test Results:",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test completed: ${results.txTest.completed ? "Yes" : "No"}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test status: ${results.txTest.status}`,
      spacing: { after: 100 }
    })
  ];
  
  // Add error message if the test failed
  if (results.txTest.error) {
    paragraphs.push(
      new Paragraph({
        text: `Error: ${results.txTest.error}`,
        spacing: { after: 100 }
      })
    );
  }
  
  // Add separator
  paragraphs.push(
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    })
  );
  
  return paragraphs;
}

// Helper function to create RX test section
function createRxTestSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [
    new Paragraph({
      text: "* S-Band Receiver Test Results:",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test completed: ${results.rxTest.completed ? "Yes" : "No"}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test status: ${results.rxTest.status}`,
      spacing: { after: 100 }
    })
  ];
  
  // Add error message if the test failed
  if (results.rxTest.error) {
    paragraphs.push(
      new Paragraph({
        text: `Error: ${results.rxTest.error}`,
        spacing: { after: 100 }
      })
    );
  }
  
  // Add separator
  paragraphs.push(
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    })
  );
  
  return paragraphs;
}