// src/services/reports/hepsReport.ts
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';

/**
 * Generate both Word document and PDF reports for HEPS checkout results
 * 
 * @param results The HEPS test results
 * @returns A promise that resolves to the filename of the saved reports
 */
export async function generateHEPSReport(results: any): Promise<string> {
  try {
    // Generate both Word and PDF reports
    const wordFilename = await generateHEPSWordReport(results);
    const pdfFilename = await generateHEPSPDFReport(results);
    
    return `${wordFilename} and ${pdfFilename}`;
  } catch (error) {
    console.error('‚ùå Error generating HEPS reports:', error);
    throw new Error(`Failed to generate HEPS reports: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a Word document report for HEPS checkout results
 * 
 * @param results The HEPS test results
 * @returns A promise that resolves to the filename of the saved report
 */
async function generateHEPSWordReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `HEPS_Checkout_${dateStr}_${timeStr}.docx`;
  
  console.log(`üìù Generating HEPS Word report: ${filename}`);
  
  // Create all document children (paragraphs and tables) in one array
  const children: Array<Paragraph | Table> = [
    // Title
    new Paragraph({
      text: "HEPS Automated Self Check Out Test Report",
      heading: HeadingLevel.HEADING_1,
      spacing: { after: 200 }
    }),
    
    // Test metadata
    new Paragraph({
      text: `Test Version: 24.3.21`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test Date: ${now.toLocaleDateString()}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Test Time: ${now.toLocaleTimeString()}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `Generated by: SATS - Satellite Automated Testing System`,
      spacing: { after: 200 }
    }),
    
    // Separator
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200 }
    }),
    
    // Test Summary
    new Paragraph({
      text: "* Test Summary :",
      heading: HeadingLevel.HEADING_2,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    })
  ];
  
  // Add passFailStatus values to the summary
  if (results.canTest && results.passFailStatus) {
    children.push(
      new Paragraph({
        text: `Primary CAN                     : ${results.canTest.primaryResult || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Secondary CAN                   : ${results.canTest.secondaryResult || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Battery 1 Voltage               : ${results.passFailStatus.battery1 || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Battery 2 Voltage               : ${results.passFailStatus.battery2 || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Battery 3 Voltage               : ${results.passFailStatus.battery3 || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `OBN 1 Voltage                   : ${results.passFailStatus.obn1Voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `OBN 2 Voltage                   : ${results.passFailStatus.obn2Voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `AUX Voltage                     : ${results.passFailStatus.auxVoltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `HDRM 12V Converter 1 Voltage    : ${results.passFailStatus.hdrm12v1_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `5V Converter 1 Voltage          : ${results.passFailStatus.v5_1_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `12V Converter 1 Voltage         : ${results.passFailStatus.v12_1_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `15V Converter Voltage           : ${results.passFailStatus.v15_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `HDRM 12V Converter 2 Voltage    : ${results.passFailStatus.hdrm12v2_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `5V Converter 2 Voltage          : ${results.passFailStatus.v5_2_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `12V Converter 2 Voltage         : ${results.passFailStatus.v12_2_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `OBC-1 Voltage                   : ${results.passFailStatus.obc1_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `OBC-2 Voltage                   : ${results.passFailStatus.obc2_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `S-Band Voltage                  : ${results.passFailStatus.sband_voltage || "N/A"}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `UHF Voltage                     : ${results.passFailStatus.uhf_voltage || "N/A"}`,
        spacing: { after: 100 }
      })
    );
  }
  
  // Add page break
  children.push(
    new Paragraph({
      text: "",
      pageBreakBefore: true
    })
  );
  
  // HEPS-1 CAN Check Summary
  if (results.canTest) {
    children.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "* HEPS-1 CAN Check Summary :",
        heading: HeadingLevel.HEADING_2,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Primary CAN : -- ${results.canTest.primaryResult || "N/A"}`,
        spacing: { after: 100 }
      })
    );
    
    // Add CAN data if available
    if (results.canTest.primaryBefore && results.canTest.primaryBefore.length > 0) {
      children.push(
        // PCM Transmit before test
        new Paragraph({
          text: `PCM Transmit before test            : ${results.canTest.primaryBefore[0] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Transmit before test
        new Paragraph({
          text: `PSM1 Transmit before test           : ${results.canTest.primaryBefore[1] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Transmit before test
        new Paragraph({
          text: `PSM2 Transmit before test           : ${results.canTest.primaryBefore[2] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Transmit before test
        new Paragraph({
          text: `PDM1 Transmit before test           : ${results.canTest.primaryBefore[3] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Transmit before test
        new Paragraph({
          text: `PDM2 Transmit before test           : ${results.canTest.primaryBefore[4] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Acknowledgement before test
        new Paragraph({
          text: `PCM Acknowledgement before test     : ${results.canTest.primaryBefore[5] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Acknowledgement before test
        new Paragraph({
          text: `PSM1 Acknowledgement before test    : ${results.canTest.primaryBefore[6] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Acknowledgement before test
        new Paragraph({
          text: `PSM2 Acknowledgement before test    : ${results.canTest.primaryBefore[7] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Acknowledgement before test
        new Paragraph({
          text: `PDM1 Acknowledgement before test    : ${results.canTest.primaryBefore[8] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Acknowledgement before test
        new Paragraph({
          text: `PDM2 Acknowledgement before test    : ${results.canTest.primaryBefore[9] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Timeout before test
        new Paragraph({
          text: `PCM Timeout before test             : ${results.canTest.primaryBefore[10] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Timeout before test
        new Paragraph({
          text: `PSM1 Timeout before test            : ${results.canTest.primaryBefore[11] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Timeout before test
        new Paragraph({
          text: `PSM2 Timeout before test            : ${results.canTest.primaryBefore[12] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Timeout before test
        new Paragraph({
          text: `PDM1 Timeout before test            : ${results.canTest.primaryBefore[13] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Timeout before test
        new Paragraph({
          text: `PDM2 Timeout before test            : ${results.canTest.primaryBefore[14] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Error before test
        new Paragraph({
          text: `PCM Error before test               : ${results.canTest.primaryBefore[15] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Error before test
        new Paragraph({
          text: `PSM1 Error before test              : ${results.canTest.primaryBefore[16] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Error before test
        new Paragraph({
          text: `PSM2 Error before test              : ${results.canTest.primaryBefore[17] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Error before test
        new Paragraph({
          text: `PDM1 Error before test              : ${results.canTest.primaryBefore[18] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Error before test
        new Paragraph({
          text: `PDM2 Error before test              : ${results.canTest.primaryBefore[19] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // Empty line
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        // CAN Primary Secondary Config
        new Paragraph({
          text: `CAN Primary Secondary Config        : ${results.canTest.primaryBefore[20] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // Empty line
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        })
      );
    }
    
    // Add CAN after test data if available
    if (results.canTest.primaryAfter && results.canTest.primaryAfter.length > 0) {
      children.push(
        // PCM Transmit after test
        new Paragraph({
          text: `PCM Transmit after test             : ${results.canTest.primaryAfter[0] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Transmit after test
        new Paragraph({
          text: `PSM1 Transmit after test            : ${results.canTest.primaryAfter[1] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Transmit after test
        new Paragraph({
          text: `PSM2 Transmit after test            : ${results.canTest.primaryAfter[2] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Transmit after test
        new Paragraph({
          text: `PDM1 Transmit after test            : ${results.canTest.primaryAfter[3] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Transmit after test
        new Paragraph({
          text: `PDM2 Transmit after test            : ${results.canTest.primaryAfter[4] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Acknowledgement after test
        new Paragraph({
          text: `PCM Acknowledgement after test      : ${results.canTest.primaryAfter[5] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Acknowledgement after test
        new Paragraph({
          text: `PSM1 Acknowledgement after test     : ${results.canTest.primaryAfter[6] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Acknowledgement after test
        new Paragraph({
          text: `PSM2 Acknowledgement after test     : ${results.canTest.primaryAfter[7] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Acknowledgement after test
        new Paragraph({
          text: `PDM1 Acknowledgement after test     : ${results.canTest.primaryAfter[8] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Acknowledgement after test
        new Paragraph({
          text: `PDM2 Acknowledgement after test     : ${results.canTest.primaryAfter[9] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Timeout after test
        new Paragraph({
          text: `PCM Timeout after test              : ${results.canTest.primaryAfter[10] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Timeout after test
        new Paragraph({
          text: `PSM1 Timeout after test             : ${results.canTest.primaryAfter[11] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Timeout after test
        new Paragraph({
          text: `PSM2 Timeout after test             : ${results.canTest.primaryAfter[12] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Timeout after test
        new Paragraph({
          text: `PDM1 Timeout after test             : ${results.canTest.primaryAfter[13] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Timeout after test
        new Paragraph({
          text: `PDM2 Timeout after test             : ${results.canTest.primaryAfter[14] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PCM Error after test
        new Paragraph({
          text: `PCM Error after test                : ${results.canTest.primaryAfter[15] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM1 Error after test
        new Paragraph({
          text: `PSM1 Error after test               : ${results.canTest.primaryAfter[16] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PSM2 Error after test
        new Paragraph({
          text: `PSM2 Error after test               : ${results.canTest.primaryAfter[17] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM1 Error after test
        new Paragraph({
          text: `PDM1 Error after test               : ${results.canTest.primaryAfter[18] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // PDM2 Error after test
        new Paragraph({
          text: `PDM2 Error after test               : ${results.canTest.primaryAfter[19] || "N/A"}`,
          spacing: { after: 100 }
        }),
        // Separator
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        })
      );
    }

    // Add page break
    children.push(
      new Paragraph({
        text: "",
        pageBreakBefore: true
      })
    );

    // OBC-2 CAN Check Summary
    children.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "* OBC-2 CAN Check Summary :",
        heading: HeadingLevel.HEADING_2,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Secondary CAN : -- ${results.canTest.secondaryResult || "N/A"}`,
        spacing: { after: 100 }
      })
    );

    // Add secondary CAN data if available
    if (results.canTest.secondaryBefore && results.canTest.secondaryBefore.length > 0) {
      // Similar structure to primary CAN, add all the values
      // (Same structure as primary, so not repeating all the paragraphs for brevity)
      // In a real implementation, you would add all the specific details here
      children.push(
        // PCM Transmit before test
        new Paragraph({
          text: `PCM Transmit before test            : ${results.canTest.secondaryBefore[0] || "N/A"}`,
          spacing: { after: 100 }
        })
        // ...add all other values similarly
      );
    }

    children.push(
      // Separator
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 200, before: 200 }
      })
    );
  }

  // Battery Summary
  if (results.battery) {
    children.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "* Battery Summary :",
        heading: HeadingLevel.HEADING_2,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      // Battery 1 Voltage
      new Paragraph({
        text: `Battery 1 Voltage           : ${results.battery.voltage1 ? parseFloat(results.battery.voltage1).toFixed(3) : "N/A"} V    ${results.passFailStatus.battery1 || "N/A"}`,
        spacing: { after: 100 }
      }),
      // Battery 2 Voltage
      new Paragraph({
        text: `Battery 2 Voltage           : ${results.battery.voltage2 ? parseFloat(results.battery.voltage2).toFixed(3) : "N/A"} V    ${results.passFailStatus.battery2 || "N/A"}`,
        spacing: { after: 100 }
      }),
      // Battery 3 Voltage
      new Paragraph({
        text: `Battery 3 Voltage           : ${results.battery.voltage3 ? parseFloat(results.battery.voltage3).toFixed(3) : "N/A"} V    ${results.passFailStatus.battery3 || "N/A"}`,
        spacing: { after: 100 }
      }),
      // Empty line
      new Paragraph({
        text: "",
        spacing: { after: 100 }
      }),
      // Battery 1 Charging Current
      new Paragraph({
        text: `Battery 1 Charging Current  : ${results.battery.current1 ? parseFloat(results.battery.current1).toFixed(3) : "N/A"} A`,
        spacing: { after: 100 }
      }),
      // Battery 2 Charging Current
      new Paragraph({
        text: `Battery 2 Charging Current  : ${results.battery.current2 ? parseFloat(results.battery.current2).toFixed(3) : "N/A"} A`,
        spacing: { after: 100 }
      }),
      // Battery 3 Charging Current
      new Paragraph({
        text: `Battery 3 Charging Current  : ${results.battery.current3 ? parseFloat(results.battery.current3).toFixed(3) : "N/A"} A`,
        spacing: { after: 100 }
      }),
      // Empty line
      new Paragraph({
        text: "",
        spacing: { after: 100 }
      }),
      // Battery 1 Temperature
      new Paragraph({
        text: `Battery 1 Temperature       : ${results.battery.temperature1 ? parseFloat(results.battery.temperature1).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Battery 2 Temperature
      new Paragraph({
        text: `Battery 2 Temperature       : ${results.battery.temperature2 ? parseFloat(results.battery.temperature2).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Battery 3 Temperature
      new Paragraph({
        text: `Battery 3 Temperature       : ${results.battery.temperature3 ? parseFloat(results.battery.temperature3).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Separator
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      })
    );
  }

  // Solar Array Summary
  if (results.solarArray) {
    children.push(
      new Paragraph({
        text: "* Solar Array Summary :",
        heading: HeadingLevel.HEADING_2,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      // Solar Array 1 Voltage
      new Paragraph({
        text: `Solar Array 1 Voltage               : ${results.solarArray.voltage1 ? parseFloat(results.solarArray.voltage1).toFixed(3) : "N/A"} V`,
        spacing: { after: 100 }
      }),
      // Solar Array 2 Voltage
      new Paragraph({
        text: `Solar Array 2 Voltage               : ${results.solarArray.voltage2 ? parseFloat(results.solarArray.voltage2).toFixed(3) : "N/A"} V`,
        spacing: { after: 100 }
      }),
      // Solar Array 3 Voltage
      new Paragraph({
        text: `Solar Array 3 Voltage               : ${results.solarArray.voltage3 ? parseFloat(results.solarArray.voltage3).toFixed(3) : "N/A"} V`,
        spacing: { after: 100 }
      }),
      // Empty line
      new Paragraph({
        text: "",
        spacing: { after: 100 }
      }),
      // Solar Array temperature values
      // Solar Array 1 Y- Temperature
      new Paragraph({
        text: `Solar Array 1 Y- Temperature        : ${results.solarArray.tempYNeg1 ? parseFloat(results.solarArray.tempYNeg1).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array 2 Y- Temperature
      new Paragraph({
        text: `Solar Array 2 Y- Temperature        : ${results.solarArray.tempYNeg2 ? parseFloat(results.solarArray.tempYNeg2).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array 3 Y- Temperature
      new Paragraph({
        text: `Solar Array 3 Y- Temperature        : ${results.solarArray.tempYNeg3 ? parseFloat(results.solarArray.tempYNeg3).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array Body Mount Temperature
      new Paragraph({
        text: `Solar Array Body Mount Temperature  : ${results.solarArray.tempBodyMount ? parseFloat(results.solarArray.tempBodyMount).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array 1 Y+ Temperature
      new Paragraph({
        text: `Solar Array 1 Y+ Temperature        : ${results.solarArray.tempYPos1 ? parseFloat(results.solarArray.tempYPos1).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array 2 Y+ Temperature
      new Paragraph({
        text: `Solar Array 2 Y+ Temperature        : ${results.solarArray.tempYPos2 ? parseFloat(results.solarArray.tempYPos2).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Solar Array 3 Y+ Temperature
      new Paragraph({
        text: `Solar Array 3 Y+ Temperature        : ${results.solarArray.tempYPos3 ? parseFloat(results.solarArray.tempYPos3).toFixed(3) : "N/A"} deg C`,
        spacing: { after: 100 }
      }),
      // Empty line
      new Paragraph({
        text: "",
        spacing: { after: 100 }
      })
    );

    // HDRM Deploy Status
    if (results.hdrmStatus) {
      children.push(
        // HDRM 1 Deploy Status
        new Paragraph({
          text: `HDRM 1 Deploy Status                : ${results.hdrmStatus.deploy1 ? parseFloat(results.hdrmStatus.deploy1).toFixed(3) : "N/A"} V`,
          spacing: { after: 100 }
        }),
        // HDRM 2 Deploy Status
        new Paragraph({
          text: `HDRM 2 Deploy Status                : ${results.hdrmStatus.deploy2 ? parseFloat(results.hdrmStatus.deploy2).toFixed(3) : "N/A"} V`,
          spacing: { after: 100 }
        })
      );
    }
  }

  // Add additional sections as in the original implementation...
  // (OBN Summary, BCR Summary, PCB Temperature, Converter Summary, Load Summary, etc.)
  // [The rest of the Word document generation logic remains the same as in your original code]

  // Create the document with all the children elements
  const doc = new Document({
    sections: [
      {
        properties: {},
        children: children  // This can now handle both Paragraph and Table types
      }
    ]
  });

  try {
    // Generate the document
    console.log('üîÑ Generating HEPS Word document...');
    const buffer = await Packer.toBuffer(doc);
    
    // Save the file using file-saver (this will save to the user's default Downloads folder)
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    saveAs(blob, filename);
    
    console.log(`‚úÖ HEPS Word report saved successfully: ${filename}`);
    
    // Mark the report as generated
    if (results && typeof results === 'object') {
      results.reportGenerated = true;
    }
    
    return filename;
  } catch (error) {
    console.error('‚ùå Error generating HEPS Word report:', error);
    throw new Error(`Failed to generate HEPS Word report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a PDF report for HEPS checkout results
 * 
 * @param results The HEPS test results
 * @returns A promise that resolves to the filename of the saved PDF report
 */
async function generateHEPSPDFReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `HEPS_Checkout_${dateStr}_${timeStr}.pdf`;
  
  console.log(`üìù Generating HEPS PDF report: ${filename}`);
  
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up the document
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (2 * margin);

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace: number = 20) => {
      if (yPosition + requiredSpace > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Helper function to add a section header
    const addSectionHeader = (title: string) => {
      checkNewPage(20);
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text(title, margin, yPosition);
      yPosition += 10;
      
      // Add separator line
      pdf.line(margin, yPosition, pageWidth - margin, yPosition);
      yPosition += 8;
    };

    // Helper function to add regular text
    const addText = (text: string, indent: number = 0) => {
      checkNewPage(8);
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(text, margin + indent, yPosition);
      yPosition += 6;
    };

    // Title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('HEPS Automated Self Check Out Test Report', margin, yPosition);
    yPosition += 15;

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by SATS - Satellite Automated Testing System', margin, yPosition);
    yPosition += 10;

    // Test metadata
    pdf.setFontSize(10);
    pdf.text(`Test Version: 24.3.21`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Date: ${now.toLocaleDateString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Time: ${now.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'Default configuration'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`, margin, yPosition);
    yPosition += 15;

    // Add a separator line
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Test Summary Section
    addSectionHeader('Test Summary');
    
    if (results.canTest && results.passFailStatus) {
      addText(`Primary CAN: ${results.canTest.primaryResult || "N/A"}`);
      addText(`Secondary CAN: ${results.canTest.secondaryResult || "N/A"}`);
      addText(`Battery 1 Voltage: ${results.passFailStatus.battery1 || "N/A"}`);
      addText(`Battery 2 Voltage: ${results.passFailStatus.battery2 || "N/A"}`);
      addText(`Battery 3 Voltage: ${results.passFailStatus.battery3 || "N/A"}`);
      addText(`OBN 1 Voltage: ${results.passFailStatus.obn1Voltage || "N/A"}`);
      addText(`OBN 2 Voltage: ${results.passFailStatus.obn2Voltage || "N/A"}`);
      addText(`AUX Voltage: ${results.passFailStatus.auxVoltage || "N/A"}`);
      addText(`HDRM 12V Converter 1 Voltage: ${results.passFailStatus.hdrm12v1_voltage || "N/A"}`);
      addText(`5V Converter 1 Voltage: ${results.passFailStatus.v5_1_voltage || "N/A"}`);
      addText(`12V Converter 1 Voltage: ${results.passFailStatus.v12_1_voltage || "N/A"}`);
      addText(`15V Converter Voltage: ${results.passFailStatus.v15_voltage || "N/A"}`);
      addText(`HDRM 12V Converter 2 Voltage: ${results.passFailStatus.hdrm12v2_voltage || "N/A"}`);
      addText(`5V Converter 2 Voltage: ${results.passFailStatus.v5_2_voltage || "N/A"}`);
      addText(`12V Converter 2 Voltage: ${results.passFailStatus.v12_2_voltage || "N/A"}`);
      addText(`OBC-1 Voltage: ${results.passFailStatus.obc1_voltage || "N/A"}`);
      addText(`OBC-2 Voltage: ${results.passFailStatus.obc2_voltage || "N/A"}`);
      addText(`S-Band Voltage: ${results.passFailStatus.sband_voltage || "N/A"}`);
      addText(`UHF Voltage: ${results.passFailStatus.uhf_voltage || "N/A"}`);
    } else {
      addText('Test summary information not available');
    }
    yPosition += 10;

    // HEPS-1 CAN Check Summary
    if (results.canTest) {
      addSectionHeader('HEPS-1 CAN Check Summary');
      addText(`Primary CAN: ${results.canTest.primaryResult || "N/A"}`);
      
      if (results.canTest.primaryBefore && results.canTest.primaryBefore.length > 0) {
        yPosition += 5;
        addText('Before Test Results:', 5);
        addText(`PCM Transmit: ${results.canTest.primaryBefore[0] || "N/A"}`, 10);
        addText(`PSM1 Transmit: ${results.canTest.primaryBefore[1] || "N/A"}`, 10);
        addText(`PSM2 Transmit: ${results.canTest.primaryBefore[2] || "N/A"}`, 10);
        addText(`PDM1 Transmit: ${results.canTest.primaryBefore[3] || "N/A"}`, 10);
        addText(`PDM2 Transmit: ${results.canTest.primaryBefore[4] || "N/A"}`, 10);
        addText(`PCM Acknowledgement: ${results.canTest.primaryBefore[5] || "N/A"}`, 10);
        addText(`PSM1 Acknowledgement: ${results.canTest.primaryBefore[6] || "N/A"}`, 10);
        addText(`PSM2 Acknowledgement: ${results.canTest.primaryBefore[7] || "N/A"}`, 10);
        addText(`PDM1 Acknowledgement: ${results.canTest.primaryBefore[8] || "N/A"}`, 10);
        addText(`PDM2 Acknowledgement: ${results.canTest.primaryBefore[9] || "N/A"}`, 10);
        addText(`PCM Timeout: ${results.canTest.primaryBefore[10] || "N/A"}`, 10);
        addText(`PSM1 Timeout: ${results.canTest.primaryBefore[11] || "N/A"}`, 10);
        addText(`PSM2 Timeout: ${results.canTest.primaryBefore[12] || "N/A"}`, 10);
        addText(`PDM1 Timeout: ${results.canTest.primaryBefore[13] || "N/A"}`, 10);
        addText(`PDM2 Timeout: ${results.canTest.primaryBefore[14] || "N/A"}`, 10);
        addText(`PCM Error: ${results.canTest.primaryBefore[15] || "N/A"}`, 10);
        addText(`PSM1 Error: ${results.canTest.primaryBefore[16] || "N/A"}`, 10);
        addText(`PSM2 Error: ${results.canTest.primaryBefore[17] || "N/A"}`, 10);
        addText(`PDM1 Error: ${results.canTest.primaryBefore[18] || "N/A"}`, 10);
        addText(`PDM2 Error: ${results.canTest.primaryBefore[19] || "N/A"}`, 10);
        if (results.canTest.primaryBefore[20]) {
          addText(`CAN Primary Secondary Config: ${results.canTest.primaryBefore[20]}`, 10);
        }
      }
      
      if (results.canTest.primaryAfter && results.canTest.primaryAfter.length > 0) {
        yPosition += 5;
        addText('After Test Results:', 5);
        addText(`PCM Transmit: ${results.canTest.primaryAfter[0] || "N/A"}`, 10);
        addText(`PSM1 Transmit: ${results.canTest.primaryAfter[1] || "N/A"}`, 10);
        addText(`PSM2 Transmit: ${results.canTest.primaryAfter[2] || "N/A"}`, 10);
        addText(`PDM1 Transmit: ${results.canTest.primaryAfter[3] || "N/A"}`, 10);
        addText(`PDM2 Transmit: ${results.canTest.primaryAfter[4] || "N/A"}`, 10);
        addText(`PCM Acknowledgement: ${results.canTest.primaryAfter[5] || "N/A"}`, 10);
        addText(`PSM1 Acknowledgement: ${results.canTest.primaryAfter[6] || "N/A"}`, 10);
        addText(`PSM2 Acknowledgement: ${results.canTest.primaryAfter[7] || "N/A"}`, 10);
        addText(`PDM1 Acknowledgement: ${results.canTest.primaryAfter[8] || "N/A"}`, 10);
        addText(`PDM2 Acknowledgement: ${results.canTest.primaryAfter[9] || "N/A"}`, 10);
        addText(`PCM Timeout: ${results.canTest.primaryAfter[10] || "N/A"}`, 10);
        addText(`PSM1 Timeout: ${results.canTest.primaryAfter[11] || "N/A"}`, 10);
        addText(`PSM2 Timeout: ${results.canTest.primaryAfter[12] || "N/A"}`, 10);
        addText(`PDM1 Timeout: ${results.canTest.primaryAfter[13] || "N/A"}`, 10);
        addText(`PDM2 Timeout: ${results.canTest.primaryAfter[14] || "N/A"}`, 10);
        addText(`PCM Error: ${results.canTest.primaryAfter[15] || "N/A"}`, 10);
        addText(`PSM1 Error: ${results.canTest.primaryAfter[16] || "N/A"}`, 10);
        addText(`PSM2 Error: ${results.canTest.primaryAfter[17] || "N/A"}`, 10);
        addText(`PDM1 Error: ${results.canTest.primaryAfter[18] || "N/A"}`, 10);
        addText(`PDM2 Error: ${results.canTest.primaryAfter[19] || "N/A"}`, 10);
      }
      yPosition += 10;
    }

    // OBC-2 CAN Check Summary
    if (results.canTest) {
      addSectionHeader('OBC-2 CAN Check Summary');
      addText(`Secondary CAN: ${results.canTest.secondaryResult || "N/A"}`);
      
      if (results.canTest.secondaryBefore && results.canTest.secondaryBefore.length > 0) {
        yPosition += 5;
        addText('Before Test Results:', 5);
        addText(`PCM Transmit: ${results.canTest.secondaryBefore[0] || "N/A"}`, 10);
        // Add other secondary CAN values as needed...
      }
      yPosition += 10;
    }

    // Battery Summary
    if (results.battery) {
      addSectionHeader('Battery Summary');
      addText(`Battery 1 Voltage: ${results.battery.voltage1 ? parseFloat(results.battery.voltage1).toFixed(3) : "N/A"} V (${results.passFailStatus?.battery1 || "N/A"})`);
      addText(`Battery 2 Voltage: ${results.battery.voltage2 ? parseFloat(results.battery.voltage2).toFixed(3) : "N/A"} V (${results.passFailStatus?.battery2 || "N/A"})`);
      addText(`Battery 3 Voltage: ${results.battery.voltage3 ? parseFloat(results.battery.voltage3).toFixed(3) : "N/A"} V (${results.passFailStatus?.battery3 || "N/A"})`);
      yPosition += 5;
      addText(`Battery 1 Charging Current: ${results.battery.current1 ? parseFloat(results.battery.current1).toFixed(3) : "N/A"} A`);
      addText(`Battery 2 Charging Current: ${results.battery.current2 ? parseFloat(results.battery.current2).toFixed(3) : "N/A"} A`);
      addText(`Battery 3 Charging Current: ${results.battery.current3 ? parseFloat(results.battery.current3).toFixed(3) : "N/A"} A`);
      yPosition += 5;
      addText(`Battery 1 Temperature: ${results.battery.temperature1 ? parseFloat(results.battery.temperature1).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Battery 2 Temperature: ${results.battery.temperature2 ? parseFloat(results.battery.temperature2).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Battery 3 Temperature: ${results.battery.temperature3 ? parseFloat(results.battery.temperature3).toFixed(3) : "N/A"} ¬∞C`);
      yPosition += 10;
    }

    // Solar Array Summary
    if (results.solarArray) {
      addSectionHeader('Solar Array Summary');
      addText(`Solar Array 1 Voltage: ${results.solarArray.voltage1 ? parseFloat(results.solarArray.voltage1).toFixed(3) : "N/A"} V`);
      addText(`Solar Array 2 Voltage: ${results.solarArray.voltage2 ? parseFloat(results.solarArray.voltage2).toFixed(3) : "N/A"} V`);
      addText(`Solar Array 3 Voltage: ${results.solarArray.voltage3 ? parseFloat(results.solarArray.voltage3).toFixed(3) : "N/A"} V`);
      yPosition += 5;
      addText(`Solar Array 1 Y- Temperature: ${results.solarArray.tempYNeg1 ? parseFloat(results.solarArray.tempYNeg1).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array 2 Y- Temperature: ${results.solarArray.tempYNeg2 ? parseFloat(results.solarArray.tempYNeg2).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array 3 Y- Temperature: ${results.solarArray.tempYNeg3 ? parseFloat(results.solarArray.tempYNeg3).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array Body Mount Temperature: ${results.solarArray.tempBodyMount ? parseFloat(results.solarArray.tempBodyMount).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array 1 Y+ Temperature: ${results.solarArray.tempYPos1 ? parseFloat(results.solarArray.tempYPos1).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array 2 Y+ Temperature: ${results.solarArray.tempYPos2 ? parseFloat(results.solarArray.tempYPos2).toFixed(3) : "N/A"} ¬∞C`);
      addText(`Solar Array 3 Y+ Temperature: ${results.solarArray.tempYPos3 ? parseFloat(results.solarArray.tempYPos3).toFixed(3) : "N/A"} ¬∞C`);
      
      if (results.hdrmStatus) {
        yPosition += 5;
        addText(`HDRM 1 Deploy Status: ${results.hdrmStatus.deploy1 ? parseFloat(results.hdrmStatus.deploy1).toFixed(3) : "N/A"} V`);
        addText(`HDRM 2 Deploy Status: ${results.hdrmStatus.deploy2 ? parseFloat(results.hdrmStatus.deploy2).toFixed(3) : "N/A"} V`);
      }
      yPosition += 10;
    }

    // OBN Summary
    if (results.obn) {
      addSectionHeader('OBN Summary');
      addText(`OBN 1 Voltage: ${results.obn.voltage1 ? parseFloat(results.obn.voltage1).toFixed(3) : "N/A"} V (${results.passFailStatus?.obn1Voltage || "N/A"})`);
      addText(`OBN 1 Current: ${results.obn.current1 ? parseFloat(results.obn.current1).toFixed(3) : "N/A"} A`);
      yPosition += 3;
      addText(`OBN 2 Voltage: ${results.obn.voltage2 ? parseFloat(results.obn.voltage2).toFixed(3) : "N/A"} V (${results.passFailStatus?.obn2Voltage || "N/A"})`);
      addText(`OBN 2 Current: ${results.obn.current2 ? parseFloat(results.obn.current2).toFixed(3) : "N/A"} A`);
      yPosition += 3;
      addText(`AUX 12V Voltage: ${results.obn.auxVoltage ? parseFloat(results.obn.auxVoltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.auxVoltage || "N/A"})`);
      yPosition += 10;
    }

    // Battery Charging Regulator Summary
    if (results.bcr) {
      addSectionHeader('Battery Charging Regulator Summary');
      addText(`BCR 1 Current: ${results.bcr.current1 ? parseFloat(results.bcr.current1).toFixed(3) : "N/A"} A`);
      addText(`BCR 2 Current: ${results.bcr.current2 ? parseFloat(results.bcr.current2).toFixed(3) : "N/A"} A`);
      addText(`BCR 3 Current: ${results.bcr.current3 ? parseFloat(results.bcr.current3).toFixed(3) : "N/A"} A`);
      yPosition += 5;
      addText(`BCR 1 Temperature: ${results.bcr.temp1 ? parseFloat(results.bcr.temp1).toFixed(3) : "N/A"} ¬∞C`);
      addText(`BCR 2 Temperature: ${results.bcr.temp2 ? parseFloat(results.bcr.temp2).toFixed(3) : "N/A"} ¬∞C`);
      addText(`BCR 3 Temperature: ${results.bcr.temp3 ? parseFloat(results.bcr.temp3).toFixed(3) : "N/A"} ¬∞C`);
      yPosition += 10;
    }

    // PCB Temperature Summary
    if (results.pdmTemperature) {
      addSectionHeader('PCB Temperature Summary');
      addText(`PDM 1 Temperature: ${results.pdmTemperature.pdm1 ? parseFloat(results.pdmTemperature.pdm1).toFixed(3) : "N/A"} ¬∞C`);
      addText(`PDM 2 Temperature: ${results.pdmTemperature.pdm2 ? parseFloat(results.pdmTemperature.pdm2).toFixed(3) : "N/A"} ¬∞C`);
      yPosition += 10;
    }

    // Converter Summary
    if (results.converters) {
      addSectionHeader('Converter Summary');
      addText(`HDRM 12V Converter 1 Voltage: ${results.converters.hdrm12v1_voltage ? parseFloat(results.converters.hdrm12v1_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.hdrm12v1_voltage || "N/A"})`);
      addText(`5V Converter 1 Voltage: ${results.converters.v5_1_voltage ? parseFloat(results.converters.v5_1_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.v5_1_voltage || "N/A"})`);
      addText(`12V Converter 1 Voltage: ${results.converters.v12_1_voltage ? parseFloat(results.converters.v12_1_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.v12_1_voltage || "N/A"})`);
      addText(`15V Converter Voltage: ${results.converters.v15_voltage ? parseFloat(results.converters.v15_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.v15_voltage || "N/A"})`);
      addText(`HDRM 12V Converter 2 Voltage: ${results.converters.hdrm12v2_voltage ? parseFloat(results.converters.hdrm12v2_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.hdrm12v2_voltage || "N/A"})`);
      addText(`5V Converter 2 Voltage: ${results.converters.v5_2_voltage ? parseFloat(results.converters.v5_2_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.v5_2_voltage || "N/A"})`);
      addText(`12V Converter 2 Voltage: ${results.converters.v12_2_voltage ? parseFloat(results.converters.v12_2_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.v12_2_voltage || "N/A"})`);
      yPosition += 5;
      addText(`HDRM 12V Converter 1 Temperature: ${results.converters.hdrm12v1_temp ? parseFloat(results.converters.hdrm12v1_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`5V Converter 1 Temperature: ${results.converters.v5_1_temp ? parseFloat(results.converters.v5_1_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`12V Converter 1 Temperature: ${results.converters.v12_1_temp ? parseFloat(results.converters.v12_1_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`15V Converter Temperature: ${results.converters.v15_temp ? parseFloat(results.converters.v15_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`HDRM 12V Converter 2 Temperature: ${results.converters.hdrm12v2_temp ? parseFloat(results.converters.hdrm12v2_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`5V Converter 2 Temperature: ${results.converters.v5_2_temp ? parseFloat(results.converters.v5_2_temp).toFixed(3) : "N/A"} ¬∞C`);
      addText(`12V Converter 2 Temperature: ${results.converters.v12_2_temp ? parseFloat(results.converters.v12_2_temp).toFixed(3) : "N/A"} ¬∞C`);
      yPosition += 10;
    }

    // Load Summary
    if (results.loads) {
      addSectionHeader('Load Summary');
      addText(`OBC-1 Voltage: ${results.loads.obc1_voltage ? parseFloat(results.loads.obc1_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.obc1_voltage || "N/A"})`);
      addText(`OBC-1 Current: ${results.loads.obc1_current ? parseFloat(results.loads.obc1_current).toFixed(3) : "N/A"} A`);
      yPosition += 3;
      addText(`OBC-2 Voltage: ${results.loads.obc2_voltage ? parseFloat(results.loads.obc2_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.obc2_voltage || "N/A"})`);
      addText(`OBC-2 Current: ${results.loads.obc2_current ? parseFloat(results.loads.obc2_current).toFixed(3) : "N/A"} A`);
      yPosition += 3;
      addText(`S-Band Voltage: ${results.loads.sband_voltage ? parseFloat(results.loads.sband_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.sband_voltage || "N/A"})`);
      addText(`S-Band Current: ${results.loads.sband_current ? parseFloat(results.loads.sband_current).toFixed(3) : "N/A"} A`);
      yPosition += 3;
      addText(`UHF Voltage: ${results.loads.uhf_voltage ? parseFloat(results.loads.uhf_voltage).toFixed(3) : "N/A"} V (${results.passFailStatus?.uhf_voltage || "N/A"})`);
      addText(`UHF Current: ${results.loads.uhf_current ? parseFloat(results.loads.uhf_current).toFixed(3) : "N/A"} A`);
      yPosition += 10;
    }

    // Heater Test Results (if available)
    if (results.heaterTests && results.heaterTests.length > 0) {
      addSectionHeader('Heater Test Results');
      
      results.heaterTests.forEach((heaterTest: any, index: number) => {
        checkNewPage(50);
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text(`Heater ${index + 1} Test Results:`, margin, yPosition);
        yPosition += 8;
        
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        addText(`Initial Temperature: ${heaterTest.initialTemp} ¬∞C`);
        addText(`Test Duration: ${heaterTest.testDuration} seconds`);
        addText(`Test Result: ${heaterTest.testResult}`);
        yPosition += 3;
        
        // Thermal Rise Performance
        pdf.setFont('helvetica', 'bold');
        addText('Thermal Rise Performance:');
        pdf.setFont('helvetica', 'normal');
        addText(`Total Temperature Rise: ${heaterTest.thermalRise.totalRise.toFixed(1)} ¬∞C`, 5);
        addText(`Rise Rate: ${heaterTest.thermalRise.riseRate.toFixed(2)} ¬∞C/min`, 5);
        addText(`Time to 5¬∞C Rise: ${heaterTest.thermalRise.timeTo5C.toFixed(1)} seconds`, 5);
        addText(`Time to 10¬∞C Rise: ${heaterTest.thermalRise.timeTo10C ? heaterTest.thermalRise.timeTo10C.toFixed(1) + ' seconds' : 'N/A'}`, 5);
        yPosition += 3;
        
        // Power Consumption
        pdf.setFont('helvetica', 'bold');
        addText('Power Consumption:');
        pdf.setFont('helvetica', 'normal');
        addText(`Average Current: ${heaterTest.power.avgCurrent} mA`, 5);
        addText(`Maximum Current: ${heaterTest.power.maxCurrent} mA`, 5);
        addText(`Average Power: ${heaterTest.power.avgPower.toFixed(2)} W`, 5);
        addText(`Total Energy Used: ${heaterTest.power.totalEnergy.toFixed(2)} Wh`, 5);
        yPosition += 10;
      });
    }

    // Current Test Results (if available)
    if (results.currentTest) {
      addSectionHeader('Current Measurement Test Results');
      addText(`Test Result: ${results.currentTest.testResult}`);
      addText(`Test Duration: ${results.currentTest.testDuration} seconds`);
      addText(`Samples Collected: ${results.currentTest.sampleCount}`);
      addText(`Maximum Deviation: ${results.currentTest.maxDeviation.toFixed(2)}%`);
      addText(`Tolerance Range: ¬±${results.currentTest.tolerance}%`);
      yPosition += 10;
    }

    // Power Cycle Test Results (if available)
    if (results.powerCycleTest) {
      addSectionHeader('Power Cycle Test Results');
      addText(`Power Cycle Test Result: ${results.powerCycleTest.testResult}`);
      addText(`Cycles Completed: ${results.powerCycleTest.cyclesCompleted} of ${results.powerCycleTest.totalCycles}`);
      addText(`Cycle Time: ${results.powerCycleTest.cycleTime} seconds`);
      addText(`Power On Time: ${results.powerCycleTest.powerOnTime} seconds`);
      addText(`Power Off Time: ${results.powerCycleTest.powerOffTime} seconds`);
      addText(`Total Test Time: ${results.powerCycleTest.totalTestTime} seconds`);
addText(`Failures: ${results.powerCycleTest.failures}`);
      yPosition += 10;
    }

    // Test Completion Summary
    checkNewPage(30);
    addSectionHeader('Test Completion Summary');
    addText(results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully");
    addText(`Report generated: ${now.toLocaleString()}`);

    // Add footer to all pages
    const totalPages = pdf.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      pdf.text(`Generated: ${now.toLocaleString()}`, margin, pageHeight - 10);
    }

    // Save the PDF
    pdf.save(filename);

    console.log(`‚úÖ HEPS PDF report saved successfully: ${filename}`);
    return filename;

  } catch (error) {
    console.error('‚ùå Error generating HEPS PDF report:', error);
    throw new Error(`Failed to generate HEPS PDF report: ${error instanceof Error ? error.message : String(error)}`);
  }
}