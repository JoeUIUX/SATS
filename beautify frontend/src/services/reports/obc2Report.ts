// src/services/reports/obc2Report.ts
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';

/**
 * Generate both Word document and PDF reports for OBC-2 checkout results
 * 
 * @param results The OBC-2 test results
 * @returns A promise that resolves to the filename of the saved reports
 */
export async function generateOBC2Report(results: any): Promise<string> {
  try {
    // Generate both Word and PDF reports
    const wordFilename = await generateOBC2WordReport(results);
    const pdfFilename = await generateOBC2PDFReport(results);
    
    return `${wordFilename} and ${pdfFilename}`;
  } catch (error) {
    console.error('‚ùå Error generating OBC-2 reports:', error);
    throw new Error(`Failed to generate OBC-2 reports: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a Word document report for OBC-2 checkout results
 * 
 * @param results The OBC-2 test results
 * @returns A promise that resolves to the filename of the saved report
 */
async function generateOBC2WordReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `OBC-2_Checkout_${dateStr}_${timeStr}.docx`;
  
  console.log(`üìù Generating OBC-2 Word report: ${filename}`);
  
  // Create the document
  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          text: "OBC-2 Automated Self Check Out Test Report",
          heading: HeadingLevel.HEADING_1,
          spacing: { after: 200 }
        }),
        
        // Test metadata
        new Paragraph({
          text: `Test Version: 24.3.21`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Date: ${now.toLocaleDateString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Time: ${now.toLocaleTimeString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Generated by: SATS - Satellite Automated Testing System`,
          spacing: { after: 200 }
        }),
        
        // Test Summary
        new Paragraph({
          text: "Test Summary",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`,
          spacing: { after: 100 }
        }),
        
        // Separator
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        
        // Firmware Version section
        new Paragraph({
          text: "* Firmware Version:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Current OBC-2 Firmware Version: ${results.firmware?.major || 'N/A'}.${results.firmware?.minor || 'N/A'}.${results.firmware?.patch || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Time Sync section
        new Paragraph({
          text: "* Time Sync:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `BEFORE update OBC-2 Time: ${results.time?.before || 'N/A'} UTC`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `AFTER update OBC-2 Time: ${results.time?.after || 'N/A'} UTC`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Test Summary section
        new Paragraph({
          text: "* Test Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Primary CAN             : ${results.can?.primary?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Secondary CAN           : ${results.can?.secondary?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `SD Card Voltage         : ${results.voltage?.sdCard?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Flash Voltage           : ${results.voltage?.flash?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `EEPROM Voltage          : ${results.voltage?.eeprom?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Payload Voltage         : ${results.voltage?.payload?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `UHF Voltage             : ${results.voltage?.uhf?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `SD Card                 : ${results.memory?.sdCard?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `EEPROM                  : ${results.memory?.eeprom?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // OBC-2 Checkout Summary section
        new Paragraph({
          text: "* OBC-2 Checkout Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Time              : ${results.time?.current || 'N/A'} UTC`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Uptime Total      : ${results.time?.uptime?.total || 'N/A'} sec`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Store Period      : ${results.time?.storePeriod || 'N/A'} sec`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Uptime Session    : ${results.time?.uptime?.session || 'N/A'} sec`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Reset Count       : ${results.time?.resetCount || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `OBC-2 Reset Source      : ${results.time?.resetSource || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Primary CAN Check Summary section
        new Paragraph({
          text: "* OBC-2 Primary CAN Check Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Primary CAN : -- ${results.can?.primary?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        ...createPrimaryCansSection(results),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Secondary CAN Check Summary section
        new Paragraph({
          text: "* OBC-2 Secondary CAN Check Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Secondary CAN : -- ${results.can?.secondary?.result || 'N/A'}`,
          spacing: { after: 100 }
        }),
        ...createSecondaryCansSection(results),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Voltage Current Summary section
        new Paragraph({
          text: "* Voltage Current Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        ...createVoltageCurrentSection(results),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Memory Test Summary section
        new Paragraph({
          text: "* Memory Test Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        ...createMemoryTestSection(results),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Raw Parameters Section
        new Paragraph({
          text: "* Raw Parameter Values:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "Displaying all parameters with their exact names as read from the hardware or simulation.",
          spacing: { after: 100 }
        }),
        
        // Firmware Parameters
        new Paragraph({
          text: "Firmware Parameters:",
          heading: HeadingLevel.HEADING_3,
          spacing: { after: 100, before: 200 }
        }),
        ...createRawParametersTable("firmware", [
          "OBC2_FW_Ver_Major", "OBC2_FW_Ver_Minor", "OBC2_FW_Ver_Patch"
        ], results),
        
        // Time Parameters
        new Paragraph({
          text: "Time Parameters:",
          heading: HeadingLevel.HEADING_3,
          spacing: { after: 100, before: 200 }
        }),
        ...createRawParametersTable("time", [
          "OBC2_Time", "OBC2_Uptime_Total", "OBC2_StorePeriod", 
          "OBC2_Uptime_Session", "OBC2_ResetCount", "OBC2_ResetSource"
        ], results),
        
        // CAN Parameters
        new Paragraph({
          text: "CAN Communication Parameters:",
          heading: HeadingLevel.HEADING_3,
          spacing: { after: 100, before: 200 }
        }),
        ...createRawParametersTable("can", [
          "OBC1_InterComm_Obc2_Hkp_Tx", "OBC1_InterComm_Obc2_Cfg_Tx", "OBC1_InterComm_Obc2_Met_Tx",
          "OBC1_InterComm_Obc2_Etc_Tx", "OBC1_InterComm_Obc2_Uhf_Tx", "OBC1_InterComm_Obc2_Hkp_Ack",
          "OBC1_InterComm_Obc2_Cfg_Ack", "OBC1_InterComm_Obc2_Met_Ack", "OBC1_InterComm_Obc2_Etc_Ack",
          "OBC1_InterComm_Obc2_Uhf_Ack", "OBC1_InterComm_Obc2_Hkp_Timeout", "OBC1_InterComm_Obc2_Cfg_Timeout",
          "OBC1_InterComm_Obc2_Met_Timeout", "OBC1_InterComm_Obc2_Etc_Timeout",
          "OBC1_InterComm_Obc2_Uhf_Timeout", "OBC1_InterComm_Obc2_Hkp_Error", "OBC1_InterComm_Obc2_Cfg_Error",
          "OBC1_InterComm_Obc2_Met_Error", "OBC1_InterComm_Obc2_Etc_Error", "OBC1_InterComm_Obc2_Uhf_Error",
          "OBC1_Intercomm_PriSec_Cfg"
        ], results),
        
        // Voltage and Current Parameters
        new Paragraph({
          text: "Voltage and Current Parameters:",
          heading: HeadingLevel.HEADING_3,
          spacing: { after: 100, before: 200 }
        }),
        ...createRawParametersTable("voltage", [
          "OBC2_SDCard_3V3_V", "OBC2_Flash_3v3_V", "OBC2_EEPROM_3V3_V", "OBC2_Payload_3V3_V",
          "OBC2_Payload_3V3_I", "OBC2_UHF_3V3_V", "OBC2_UHF_3V3_I", "OBC2_PP_3V3_V", "OBC2_PP_3V3_I",
          "OBC2_GPS_3V3_V", "OBC2_LNA_V", "OBC2_LNA_I"
        ], results),
        
        // Memory Test Parameters
        new Paragraph({
          text: "Memory Test Parameters:",
          heading: HeadingLevel.HEADING_3,
          spacing: { after: 100, before: 200 }
        }),
        ...createRawParametersTable("memory", [
          "OBC2_SD_WriteSuccess", "OBC2_SD_ReadSuccess", "OBC2_SD_WriteFail", "OBC2_SD_ReadFail",
          "OBC2_EEPROM_WriteSuccess", "OBC2_EEPROM_ReadSuccess", "OBC2_EEPROM_WriteFail", "OBC2_EEPROM_ReadFail"
        ], results),
        
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Final checkout time information
        new Paragraph({
          text: "* OBC-2 Final Checkout Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        ...createFinalCheckoutSection(results),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Test Completion Summary
        new Paragraph({
          text: "* Test Completion Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Report generated: ${now.toLocaleString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
      ]
    }]
  });
  
  try {
    // Generate the document
    console.log('üîÑ Generating Word document...');
    const buffer = await Packer.toBuffer(doc);
    
    // Save the file
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    saveAs(blob, filename);
    
    console.log(`‚úÖ OBC-2 Word report saved successfully: ${filename}`);
    
    // Mark the report as generated
    if (results && typeof results === 'object') {
      results.reportGenerated = true;
    }
    
    return filename;
  } catch (error) {
    console.error('‚ùå Error generating OBC-2 Word report:', error);
    throw new Error(`Failed to generate OBC-2 Word report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a PDF report for OBC-2 checkout results
 * 
 * @param results The OBC-2 test results
 * @returns A promise that resolves to the filename of the saved PDF report
 */
async function generateOBC2PDFReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `OBC-2_Checkout_${dateStr}_${timeStr}.pdf`;
  
  console.log(`üìù Generating OBC-2 PDF report: ${filename}`);
  
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up the document
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace: number = 20) => {
      if (yPosition + requiredSpace > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('OBC-2 Automated Self Check Out Test Report', margin, yPosition);
    yPosition += 15;

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by SATS - Satellite Automated Testing System', margin, yPosition);
    yPosition += 10;

    // Test metadata
    pdf.setFontSize(10);
    pdf.text(`Test Date: ${now.toLocaleDateString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Time: ${now.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`, margin, yPosition);
    yPosition += 15;

    // Add a separator line
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Firmware Version Section
    checkNewPage(30);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Firmware Version', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.firmware) {
      pdf.text(`Version: ${results.firmware.major || 'N/A'}.${results.firmware.minor || 'N/A'}.${results.firmware.patch || 'N/A'}`, margin, yPosition);
    } else {
      pdf.text('Firmware information not available', margin, yPosition);
    }
    yPosition += 15;

    // Time Sync Section
    checkNewPage(40);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Time Synchronization', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.time) {
      pdf.text(`Before Update: ${results.time.before || 'N/A'} UTC`, margin, yPosition);
      yPosition += 6;
      pdf.text(`After Update: ${results.time.after || 'N/A'} UTC`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Current Time: ${results.time.current || 'N/A'} UTC`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Uptime Total: ${results.time.uptime?.total || 'N/A'} sec`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Store Period: ${results.time.storePeriod || 'N/A'} sec`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Reset Count: ${results.time.resetCount || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Reset Source: ${results.time.resetSource || 'N/A'}`, margin, yPosition);
    } else {
      pdf.text('Time information not available', margin, yPosition);
    }
    yPosition += 15;

    // Test Summary Section
    checkNewPage(60);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Test Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.can && results.voltage && results.memory) {
      pdf.text(`Primary CAN: ${results.can.primary?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Secondary CAN: ${results.can.secondary?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`SD Card Voltage: ${results.voltage.sdCard?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Flash Voltage: ${results.voltage.flash?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`EEPROM Voltage: ${results.voltage.eeprom?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Payload Voltage: ${results.voltage.payload?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`UHF Voltage: ${results.voltage.uhf?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`SD Card Test: ${results.memory.sdCard?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`EEPROM Test: ${results.memory.eeprom?.result || 'N/A'}`, margin, yPosition);
    } else {
      pdf.text('Test summary not available', margin, yPosition);
    }
    yPosition += 15;

    // CAN Tests Section
    checkNewPage(60);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('CAN Bus Tests', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Primary CAN', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.can?.primary) {
      const primary = results.can.primary;
      pdf.text(`Result: ${primary.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      
      // Add before/after statistics if available
      if (primary.before && primary.after) {
        pdf.text('Statistics (Before ‚Üí After):', margin, yPosition);
        yPosition += 6;
        
        const modules = ['HKP', 'CFG', 'MET', 'ETC', 'UHF'];
        modules.forEach((module, index) => {
          if (primary.before.tx && primary.after.tx) {
            checkNewPage(8);
            pdf.text(`${module} TX: ${primary.before.tx[index] || 0} ‚Üí ${primary.after.tx[index] || 0}`, margin + 10, yPosition);
            yPosition += 5;
          }
        });
      }
    }
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Secondary CAN', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.can?.secondary) {
      const secondary = results.can.secondary;
      pdf.text(`Result: ${secondary.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
    }
    yPosition += 15;

    // Voltage Section
    checkNewPage(60);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Voltage Measurements', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.voltage) {
      const v = results.voltage;
      pdf.text(`SD Card 3V3: ${v.sdCard?.value || 'N/A'} mV (${v.sdCard?.result || 'N/A'})`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Flash 3V3: ${v.flash?.value || 'N/A'} mV (${v.flash?.result || 'N/A'})`, margin, yPosition);
      yPosition += 6;
      pdf.text(`EEPROM 3V3: ${v.eeprom?.value || 'N/A'} mV (${v.eeprom?.result || 'N/A'})`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Payload 3V3: ${v.payload?.value || 'N/A'} mV (${v.payload?.result || 'N/A'})`, margin, yPosition);
      yPosition += 6;
      pdf.text(`UHF 3V3: ${v.uhf?.value || 'N/A'} mV (${v.uhf?.result || 'N/A'})`, margin, yPosition);
      yPosition += 6;
      pdf.text(`GPS 3V3: ${v.gps?.value || 'N/A'} mV`, margin, yPosition);
      yPosition += 6;
      pdf.text(`LNA: ${v.lna?.value || 'N/A'} mV, ${v.lna?.current || 'N/A'} mA`, margin, yPosition);
      yPosition += 6;
    } else {
      pdf.text('Voltage information not available', margin, yPosition);
    }
    yPosition += 15;

    // Memory Tests Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Memory Tests', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    if (results.memory) {
      pdf.text(`SD Card Test: ${results.memory.sdCard?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      if (results.memory.sdCard?.before && results.memory.sdCard?.after) {
        const sd = results.memory.sdCard;
        pdf.text(`  Write Success: ${sd.before.writeSuccess || 'N/A'} ‚Üí ${sd.after.writeSuccess || 'N/A'}`, margin + 10, yPosition);
        yPosition += 5;
pdf.text(`  Read Success: ${sd.before.readSuccess || 'N/A'} ‚Üí ${sd.after.readSuccess || 'N/A'}`, margin + 10, yPosition);
        yPosition += 5;
      }
      yPosition += 6;
      
      pdf.text(`EEPROM Test: ${results.memory.eeprom?.result || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      if (results.memory.eeprom?.before && results.memory.eeprom?.after) {
        const eeprom = results.memory.eeprom;
        pdf.text(`  Write Success: ${eeprom.before.writeSuccess || 'N/A'} ‚Üí ${eeprom.after.writeSuccess || 'N/A'}`, margin + 10, yPosition);
        yPosition += 5;
        pdf.text(`  Read Success: ${eeprom.before.readSuccess || 'N/A'} ‚Üí ${eeprom.after.readSuccess || 'N/A'}`, margin + 10, yPosition);
        yPosition += 5;
      }
    } else {
      pdf.text('Memory test information not available', margin, yPosition);
    }
    yPosition += 15;

    // Raw Parameters Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Raw Parameter Values', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Displaying all parameters with their exact names as read from the hardware or simulation.', margin, yPosition);
    yPosition += 10;

    // Firmware Parameters
    checkNewPage(30);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Firmware Parameters', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const fwParams = ["OBC2_FW_Ver_Major", "OBC2_FW_Ver_Minor", "OBC2_FW_Ver_Patch"];
    fwParams.forEach(param => {
      checkNewPage(8);
      const value = getParameterValue(param, results);
      pdf.text(`${param}: ${value}`, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // Time Parameters
    checkNewPage(50);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Time Parameters', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const timeParams = [
      "OBC2_Time", "OBC2_Uptime_Total", "OBC2_StorePeriod", 
      "OBC2_Uptime_Session", "OBC2_ResetCount", "OBC2_ResetSource"
    ];
    timeParams.forEach(param => {
      checkNewPage(8);
      const value = getParameterValue(param, results);
      pdf.text(`${param}: ${value}`, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // CAN Parameters
    checkNewPage(80);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('CAN Communication Parameters', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const canParams = [
      "OBC1_InterComm_Obc2_Hkp_Tx", "OBC1_InterComm_Obc2_Cfg_Tx", "OBC1_InterComm_Obc2_Met_Tx",
      "OBC1_InterComm_Obc2_Etc_Tx", "OBC1_InterComm_Obc2_Uhf_Tx", "OBC1_InterComm_Obc2_Hkp_Ack",
      "OBC1_InterComm_Obc2_Cfg_Ack", "OBC1_InterComm_Obc2_Met_Ack", "OBC1_InterComm_Obc2_Etc_Ack",
      "OBC1_InterComm_Obc2_Uhf_Ack", "OBC1_InterComm_Obc2_Hkp_Timeout", "OBC1_InterComm_Obc2_Cfg_Timeout",
      "OBC1_InterComm_Obc2_Met_Timeout", "OBC1_InterComm_Obc2_Etc_Timeout",
      "OBC1_InterComm_Obc2_Uhf_Timeout", "OBC1_InterComm_Obc2_Hkp_Error", "OBC1_InterComm_Obc2_Cfg_Error",
      "OBC1_InterComm_Obc2_Met_Error", "OBC1_InterComm_Obc2_Etc_Error", "OBC1_InterComm_Obc2_Uhf_Error",
      "OBC1_Intercomm_PriSec_Cfg"
    ];
    canParams.forEach(param => {
      checkNewPage(8);
      const value = getParameterValue(param, results);
      pdf.text(`${param}: ${value}`, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // Voltage and Current Parameters
    checkNewPage(50);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Voltage and Current Parameters', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const viParams = [
      "OBC2_SDCard_3V3_V", "OBC2_Flash_3v3_V", "OBC2_EEPROM_3V3_V", "OBC2_Payload_3V3_V",
      "OBC2_Payload_3V3_I", "OBC2_UHF_3V3_V", "OBC2_UHF_3V3_I", "OBC2_PP_3V3_V", "OBC2_PP_3V3_I",
      "OBC2_GPS_3V3_V", "OBC2_LNA_V", "OBC2_LNA_I"
    ];
    viParams.forEach(param => {
      checkNewPage(8);
      const value = getParameterValue(param, results);
      pdf.text(`${param}: ${value}`, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // Memory Test Parameters
    checkNewPage(40);
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Memory Test Parameters', margin, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    const memParams = [
      "OBC2_SD_WriteSuccess", "OBC2_SD_ReadSuccess", "OBC2_SD_WriteFail", "OBC2_SD_ReadFail",
      "OBC2_EEPROM_WriteSuccess", "OBC2_EEPROM_ReadSuccess", "OBC2_EEPROM_WriteFail", "OBC2_EEPROM_ReadFail"
    ];
    memParams.forEach(param => {
      checkNewPage(8);
      const value = getParameterValue(param, results);
      pdf.text(`${param}: ${value}`, margin, yPosition);
      yPosition += 6;
    });

    // Add footer to all pages
    const totalPages = pdf.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      pdf.text(`Generated: ${now.toLocaleString()}`, margin, pageHeight - 10);
    }

    // Save the PDF
    pdf.save(filename);

    console.log(`‚úÖ OBC-2 PDF report saved successfully: ${filename}`);
    return filename;

  } catch (error) {
    console.error('‚ùå Error generating OBC-2 PDF report:', error);
    throw new Error(`Failed to generate OBC-2 PDF report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// Helper function to get parameter value from results with fallback to allResults array
function getParameterValue(paramName: string, results: any): string {
  // First try to get from structured results based on parameter name
  if (paramName.includes("FW_Ver_Major")) return results.firmware?.major || 'N/A';
  if (paramName.includes("FW_Ver_Minor")) return results.firmware?.minor || 'N/A';
  if (paramName.includes("FW_Ver_Patch")) return results.firmware?.patch || 'N/A';
  
  if (paramName === "OBC2_Time") return results.time?.current || 'N/A';
  if (paramName === "OBC2_Uptime_Total") return results.time?.uptime?.total || 'N/A';
  if (paramName === "OBC2_StorePeriod") return results.time?.storePeriod || 'N/A';
  if (paramName === "OBC2_Uptime_Session") return results.time?.uptime?.session || 'N/A';
  if (paramName === "OBC2_ResetCount") return results.time?.resetCount || 'N/A';
  if (paramName === "OBC2_ResetSource") return results.time?.resetSource || 'N/A';
  
  if (paramName === "OBC2_SDCard_3V3_V") return results.voltage?.sdCard?.value || 'N/A';
  if (paramName === "OBC2_Flash_3v3_V") return results.voltage?.flash?.value || 'N/A';
  if (paramName === "OBC2_EEPROM_3V3_V") return results.voltage?.eeprom?.value || 'N/A';
  if (paramName === "OBC2_Payload_3V3_V") return results.voltage?.payload?.value || 'N/A';
  if (paramName === "OBC2_Payload_3V3_I") return results.voltage?.payload?.current || 'N/A';
  if (paramName === "OBC2_UHF_3V3_V") return results.voltage?.uhf?.value || 'N/A';
  if (paramName === "OBC2_UHF_3V3_I") return results.voltage?.uhf?.current || 'N/A';
  if (paramName === "OBC2_PP_3V3_V") return results.voltage?.pp?.value || 'N/A';
  if (paramName === "OBC2_PP_3V3_I") return results.voltage?.pp?.current || 'N/A';
  if (paramName === "OBC2_GPS_3V3_V") return results.voltage?.gps?.value || 'N/A';
  if (paramName === "OBC2_LNA_V") return results.voltage?.lna?.value || 'N/A';
  if (paramName === "OBC2_LNA_I") return results.voltage?.lna?.current || 'N/A';
  
  // For CAN parameters, try to extract from the structured CAN data
  if (paramName.includes("InterComm_Obc2")) {
    // would require more complex logic to map CAN parameter names to array positions
    // For now, return N/A if not found in allResults
  }
  
  // Memory parameters
  if (paramName === "OBC2_SD_WriteSuccess") return results.memory?.sdCard?.after?.writeSuccess || results.memory?.sdCard?.before?.writeSuccess || 'N/A';
  if (paramName === "OBC2_SD_ReadSuccess") return results.memory?.sdCard?.after?.readSuccess || results.memory?.sdCard?.before?.readSuccess || 'N/A';
  if (paramName === "OBC2_SD_WriteFail") return results.memory?.sdCard?.after?.writeFail || results.memory?.sdCard?.before?.writeFail || 'N/A';
  if (paramName === "OBC2_SD_ReadFail") return results.memory?.sdCard?.after?.readFail || results.memory?.sdCard?.before?.readFail || 'N/A';
  
  if (paramName === "OBC2_EEPROM_WriteSuccess") return results.memory?.eeprom?.after?.writeSuccess || results.memory?.eeprom?.before?.writeSuccess || 'N/A';
  if (paramName === "OBC2_EEPROM_ReadSuccess") return results.memory?.eeprom?.after?.readSuccess || results.memory?.eeprom?.before?.readSuccess || 'N/A';
  if (paramName === "OBC2_EEPROM_WriteFail") return results.memory?.eeprom?.after?.writeFail || results.memory?.eeprom?.before?.writeFail || 'N/A';
  if (paramName === "OBC2_EEPROM_ReadFail") return results.memory?.eeprom?.after?.readFail || results.memory?.eeprom?.before?.readFail || 'N/A';
  
  // Fallback to allResults array if available
  if (results.allResults && Array.isArray(results.allResults)) {
    // This would require a mapping of parameter names to array indices
    // Since don't have that mapping readily available, return N/A
  }
  
  return 'N/A';
}

// Helper function for Primary CAN section
function createPrimaryCansSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  if (results.can && results.can.primary) {
    const section = results.can.primary;
    
    // Before test
    const txBefore = section.before?.tx || [];
    const ackBefore = section.before?.ack || [];
    const timeoutBefore = section.before?.timeout || [];
    const errorBefore = section.before?.error || [];
    
    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canPrimaryConfig || "0"}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    // After test
    const txAfter = section.after?.tx || [];
    const ackAfter = section.after?.ack || [];
    const timeoutAfter = section.after?.timeout || [];
    const errorAfter = section.after?.error || [];
    
    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));
  }
  
  return paragraphs;
}

// Helper function for Secondary CAN section
function createSecondaryCansSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  if (results.can && results.can.secondary) {
    const section = results.can.secondary;
    
    // Before test
    const txBefore = section.before?.tx || [];
    const ackBefore = section.before?.ack || [];
    const timeoutBefore = section.before?.timeout || [];
    const errorBefore = section.before?.error || [];
    
    paragraphs.push(new Paragraph({ text: `HKP Transmit before test        : ${padString(txBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Transmit before test        : ${padString(txBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Transmit before test        : ${padString(txBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Transmit before test        : ${padString(txBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Transmit before test        : ${padString(txBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement before test : ${padString(ackBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement before test : ${padString(ackBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Acknowledgement before test : ${padString(ackBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement before test : ${padString(ackBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement before test : ${padString(ackBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Timeout before test         : ${padString(timeoutBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Timeout before test         : ${padString(timeoutBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Timeout before test         : ${padString(timeoutBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Timeout before test         : ${padString(timeoutBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Timeout before test         : ${padString(timeoutBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Error before test           : ${padString(errorBefore[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Error before test           : ${padString(errorBefore[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Error before test           : ${padString(errorBefore[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Error before test           : ${padString(errorBefore[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Error before test           : ${padString(errorBefore[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CAN Primary Secondary Config    : ${results.canSecondaryConfig || "31"}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    // After test
    const txAfter = section.after?.tx || [];
    const ackAfter = section.after?.ack || [];
    const timeoutAfter = section.after?.timeout || [];
    const errorAfter = section.after?.error || [];
    
    paragraphs.push(new Paragraph({ text: `HKP Transmit after test         : ${padString(txAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Transmit after test         : ${padString(txAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Transmit after test         : ${padString(txAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Transmit after test         : ${padString(txAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Transmit after test         : ${padString(txAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Acknowledgement after test  : ${padString(ackAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Acknowledgement after test  : ${padString(ackAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Acknowledgement after test  : ${padString(ackAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Acknowledgement after test  : ${padString(ackAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Acknowledgement after test  : ${padString(ackAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Timeout after test          : ${padString(timeoutAfter[0], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `CFG Timeout after test          : ${padString(timeoutAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Timeout after test          : ${padString(timeoutAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Timeout after test          : ${padString(timeoutAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Timeout after test          : ${padString(timeoutAfter[4], 4)}`, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({ text: `HKP Error after test            : ${padString(errorAfter[0], 4)}`, spacing: { after: 100 } }));
paragraphs.push(new Paragraph({ text: `CFG Error after test            : ${padString(errorAfter[1], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `MET Error after test            : ${padString(errorAfter[2], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `ETC Error after test            : ${padString(errorAfter[3], 4)}`, spacing: { after: 100 } }));
    paragraphs.push(new Paragraph({ text: `UHF Error after test            : ${padString(errorAfter[4], 4)}`, spacing: { after: 100 } }));
  }
  
  return paragraphs;
}

// Helper function for Voltage Current section
function createVoltageCurrentSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  if (results.voltage) {
    const v = results.voltage;
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 SDCard 3V3 V  : ${padString(v.sdCard?.value, 4)} mV    ${v.sdCard?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Flash 3v3 V   : ${padString(v.flash?.value, 4)} mV    ${v.flash?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 EEPROM 3V3 V  : ${padString(v.eeprom?.value, 4)} mV    ${v.eeprom?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Payload 3V3 V : ${padString(v.payload?.value, 4)} mV    ${v.payload?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Payload 3V3 I : ${padString(v.payload?.current, 4)} mA`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 UHF 3V3 V     : ${padString(v.uhf?.value, 4)} mV    ${v.uhf?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 UHF 3V3 I     : ${padString(v.uhf?.current, 4)} mA`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 PP 3V3 V      : ${padString(v.pp?.value, 4)} mV`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 PP 3V3 I      : ${padString(v.pp?.current, 4)} mA`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({ text: ``, spacing: { after: 100 } }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 GPS 3V3 V     : ${padString(v.gps?.value, 4)} mV`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 LNA V         : ${padString(v.lna?.value, 4)} mV`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 LNA I         : ${padString(v.lna?.current, 4)} mA`,
      spacing: { after: 100 }
    }));
  }
  
  return paragraphs;
}

// Helper function for Memory Test section
function createMemoryTestSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  if (results.memory) {
    // SD Card Test
    paragraphs.push(new Paragraph({
      text: `SD Card : -- ${results.memory.sdCard?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    if (results.memory.sdCard?.result !== "Not tested") {
      const sdCard = results.memory.sdCard;
      
      paragraphs.push(new Paragraph({
        text: `OBC-2 SDCard 3V3 V          : ${padString(results.voltage?.sdCard?.value, 4)} mV`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Success before test   : ${padString(sdCard.before?.writeSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Success before test    : ${padString(sdCard.before?.readSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Fail before test      : ${padString(sdCard.before?.writeFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Fail before test       : ${padString(sdCard.before?.readFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Success after test    : ${padString(sdCard.after?.writeSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Success after test     : ${padString(sdCard.after?.readSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Fail after test       : ${padString(sdCard.after?.writeFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Fail after test        : ${padString(sdCard.after?.readFail, 4)}`,
        spacing: { after: 100 }
      }));
    } else {
      paragraphs.push(new Paragraph({
        text: `SD Card test was not performed`,
        spacing: { after: 100 }
      }));
    }
    
    paragraphs.push(new Paragraph({
      text: `--------------------------------------------------------------------`,
      spacing: { after: 100 }
    }));
    
    // EEPROM Test
    paragraphs.push(new Paragraph({
      text: `EEPROM : -- ${results.memory.eeprom?.result || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    if (results.memory.eeprom?.result !== "Not tested") {
      const eeprom = results.memory.eeprom;
      
      paragraphs.push(new Paragraph({
        text: `OBC-2 EEPROM 3V3 V          : ${padString(results.voltage?.eeprom?.value, 4)} mV`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Success before test   : ${padString(eeprom.before?.writeSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Success before test    : ${padString(eeprom.before?.readSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Fail before test      : ${padString(eeprom.before?.writeFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Fail before test       : ${padString(eeprom.before?.readFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Success after test    : ${padString(eeprom.after?.writeSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Success after test     : ${padString(eeprom.after?.readSuccess, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Write Fail after test       : ${padString(eeprom.after?.writeFail, 4)}`,
        spacing: { after: 100 }
      }));
      
      paragraphs.push(new Paragraph({
        text: `Read Fail after test        : ${padString(eeprom.after?.readFail, 4)}`,
        spacing: { after: 100 }
      }));
    } else {
      paragraphs.push(new Paragraph({
        text: `EEPROM test was not performed`,
        spacing: { after: 100 }
      }));
    }
  }
  
  return paragraphs;
}

// Helper function for final checkout section
function createFinalCheckoutSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  if (results.time && results.time.final) {
    const final = results.time.final;
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Time              : ${final.current} UTC`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Uptime Total      : ${final.uptime?.total || 'N/A'} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Store Period      : ${final.storePeriod} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Uptime Session    : ${final.uptime?.session || 'N/A'} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Reset Count       : ${final.resetCount}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Reset Source      : ${final.resetSource}`,
      spacing: { after: 100 }
    }));
  } else {
    // Use the initial time readings if final time readings are not available
    paragraphs.push(new Paragraph({
      text: `OBC-2 Time              : ${results.time?.current || 'N/A'} UTC`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Uptime Total      : ${results.time?.uptime?.total || 'N/A'} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Store Period      : ${results.time?.storePeriod || 'N/A'} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Uptime Session    : ${results.time?.uptime?.session || 'N/A'} sec`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Reset Count       : ${results.time?.resetCount || 'N/A'}`,
      spacing: { after: 100 }
    }));
    
    paragraphs.push(new Paragraph({
      text: `OBC-2 Reset Source      : ${results.time?.resetSource || 'N/A'}`,
      spacing: { after: 100 }
    }));
  }
  
  return paragraphs;
}

// Helper function to create raw parameters table
function createRawParametersTable(category: string, parameters: string[], results: any): Table[] {
  const tableRows = parameters.map(param => {
    const value = getParameterValue(param, results);
    return new TableRow({
      children: [
        new TableCell({
          children: [new Paragraph(param)],
          width: { size: 60, type: WidthType.PERCENTAGE }
        }),
        new TableCell({
          children: [new Paragraph(value)],
          width: { size: 40, type: WidthType.PERCENTAGE }
        })
      ]
    });
  });

  return [new Table({
    rows: tableRows,
    width: { size: 100, type: WidthType.PERCENTAGE },
    borders: {
      top: { style: BorderStyle.SINGLE, size: 1 },
      bottom: { style: BorderStyle.SINGLE, size: 1 },
      left: { style: BorderStyle.SINGLE, size: 1 },
      right: { style: BorderStyle.SINGLE, size: 1 },
      insideHorizontal: { style: BorderStyle.SINGLE, size: 1 },
      insideVertical: { style: BorderStyle.SINGLE, size: 1 }
    }
  })];
}

/**
 * Utility function to pad a string to a specific length
 * 
 * @param value The string value to pad
 * @param length The desired length
 * @returns The padded string
 */
function padString(value: string | number | undefined, length: number): string {
  if (value === undefined || value === null) return ''.padStart(length, ' ');
  return String(value).padStart(length, ' ');
}