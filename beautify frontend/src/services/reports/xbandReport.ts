// src/services/reports/xbandReport.ts
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';

/**
 * Generate both Word document and PDF reports for X-Band checkout results
 * 
 * @param results The X-Band test results
 * @returns A promise that resolves to the filename of the saved reports
 */
export async function generateXBandReport(results: any): Promise<string> {
  try {
    // Generate both Word and PDF reports
    const wordFilename = await generateXBandWordReport(results);
    const pdfFilename = await generateXBandPDFReport(results);
    
    return `${wordFilename} and ${pdfFilename}`;
  } catch (error) {
    console.error('‚ùå Error generating X-Band reports:', error);
    throw new Error(`Failed to generate X-Band reports: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a Word document report for X-Band checkout results
 * 
 * @param results The X-Band test results
 * @returns A promise that resolves to the filename of the saved report
 */
async function generateXBandWordReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `X-Band_Checkout_${dateStr}_${timeStr}.docx`;
  
  console.log(`üìù Generating X-Band Word report: ${filename}`);
  
  // Create the document
  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          text: "X-Band Automated Self Check Out Test Report",
          heading: HeadingLevel.HEADING_1,
          spacing: { after: 200 }
        }),
        
        // Test metadata
        new Paragraph({
          text: `Test Version: 24.3.21`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Date: ${now.toLocaleDateString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Time: ${now.toLocaleTimeString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Generated by: SATS - Satellite Automated Testing System`,
          spacing: { after: 200 }
        }),
        
        // Test Summary
        new Paragraph({
          text: "Test Summary",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'Default configuration'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`,
          spacing: { after: 100 }
        }),
        
        // Separator
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        
        // Voltage Current Summary section
        new Paragraph({
          text: "* Voltage Current Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        // Voltage Current On Record
        new Paragraph({
          text: "Voltage Current On Record : -",
          spacing: { after: 100 }
        }),
        
        // PCS Voltage
        new Paragraph({
          text: `PCS Voltage : ${padString(results.voltages?.pcs?.value || 'N/A', 6)} V    ${results.voltages?.pcs?.pass ? "[PASS]" : "[FAIL]"}`,
          spacing: { after: 100 }
        }),
        
        // PCS Current
        new Paragraph({
          text: `PCS Current : ${padString(results.currents?.pcs || 'N/A', 6)} A`,
          spacing: { after: 100 }
        }),
        
        // SPU On Record
        new Paragraph({
          text: "SPU On Record : -",
          spacing: { after: 100 }
        }),
        
        // X-Band Voltage
        new Paragraph({
          text: `X-Band Voltage : ${padString(results.voltages?.xband?.value || 'N/A', 6)} V    ${results.voltages?.xband?.pass ? "[PASS]" : "[FAIL]"}`,
          spacing: { after: 100 }
        }),
        
        // X-Band Current
        new Paragraph({
          text: `X-Band Current : ${padString(results.currents?.xband || 'N/A', 6)} A`,
          spacing: { after: 100 }
        }),
        
        // SPU Off Record
        new Paragraph({
          text: "SPU Off Record : -",
          spacing: { after: 100 }
        }),
        
        // X-Band Voltage after off
        new Paragraph({
          text: `X-Band Voltage : ${padString(results.voltages?.xbandOff?.value || 'N/A', 6)} V    ${results.voltages?.xbandOff?.pass ? "[PASS]" : "[FAIL]"}`,
          spacing: { after: 100 }
        }),
        
        // X-Band Current after off
        new Paragraph({
          text: `X-Band Current : ${padString(results.currents?.xbandOff || 'N/A', 6)} A`,
          spacing: { after: 100 }
        }),
        
        // Voltage Current Off Record
        new Paragraph({
          text: "Voltage Current Off Record : -",
          spacing: { after: 100 }
        }),
        
        // PCS Voltage off
        new Paragraph({
          text: `PCS Voltage : 0.000 V    [PASS]`,
          spacing: { after: 100 }
        }),
        
        // PCS Current off
        new Paragraph({
          text: `PCS Current : 0.000 A`,
          spacing: { after: 100 }
        }),
        
        // Separator
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Test Options section
        new Paragraph({
          text: "* Test Options:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        // List of tested options
        ...createOptionsSection(results),
        
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
        
        // Test Completion Summary
        new Paragraph({
          text: "* Test Completion Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Report generated: ${now.toLocaleString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
      ]
    }]
  });
  
  try {
    // Generate the document
    console.log('üîÑ Generating X-Band Word document...');
    const buffer = await Packer.toBuffer(doc);
    
    // Save the file using file-saver (this will save to the user's default Downloads folder)
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    saveAs(blob, filename);
    
    console.log(`‚úÖ X-Band Word report saved successfully: ${filename}`);
    
    // Mark the report as generated
    if (results && typeof results === 'object') {
      results.reportGenerated = true;
    }
    
    return filename;
  } catch (error) {
    console.error('‚ùå Error generating X-Band Word report:', error);
    throw new Error(`Failed to generate X-Band Word report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a PDF report for X-Band checkout results
 * 
 * @param results The X-Band test results
 * @returns A promise that resolves to the filename of the saved PDF report
 */
async function generateXBandPDFReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `X-Band_Checkout_${dateStr}_${timeStr}.pdf`;
  
  console.log(`üìù Generating X-Band PDF report: ${filename}`);
  
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up the document
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (2 * margin);

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace: number = 20) => {
      if (yPosition + requiredSpace > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('X-Band Automated Self Check Out Test Report', margin, yPosition);
    yPosition += 15;

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by SATS - Satellite Automated Testing System', margin, yPosition);
    yPosition += 10;

    // Test metadata
    pdf.setFontSize(10);
    pdf.text(`Test Date: ${now.toLocaleDateString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Time: ${now.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Version: 24.3.21`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'Default configuration'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`, margin, yPosition);
    yPosition += 15;

    // Add a separator line
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Voltage Current Summary Section
    checkNewPage(80);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Voltage Current Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    // Voltage Current On Record
    pdf.text('Voltage Current On Record:', margin, yPosition);
    yPosition += 8;
    
    // PCS Voltage and Current
    pdf.text(`PCS Voltage: ${padString(results.voltages?.pcs?.value || 'N/A', 6)} V    ${results.voltages?.pcs?.pass ? "[PASS]" : "[FAIL]"}`, margin + 5, yPosition);
    yPosition += 6;
    pdf.text(`PCS Current: ${padString(results.currents?.pcs || 'N/A', 6)} A`, margin + 5, yPosition);
    yPosition += 10;
    
    // SPU On Record
    pdf.text('SPU On Record:', margin, yPosition);
    yPosition += 8;
    
    // X-Band Voltage and Current
    pdf.text(`X-Band Voltage: ${padString(results.voltages?.xband?.value || 'N/A', 6)} V    ${results.voltages?.xband?.pass ? "[PASS]" : "[FAIL]"}`, margin + 5, yPosition);
    yPosition += 6;
    pdf.text(`X-Band Current: ${padString(results.currents?.xband || 'N/A', 6)} A`, margin + 5, yPosition);
    yPosition += 10;
    
    // SPU Off Record
    pdf.text('SPU Off Record:', margin, yPosition);
    yPosition += 8;
    
    // X-Band Voltage and Current after off
    pdf.text(`X-Band Voltage: ${padString(results.voltages?.xbandOff?.value || 'N/A', 6)} V    ${results.voltages?.xbandOff?.pass ? "[PASS]" : "[FAIL]"}`, margin + 5, yPosition);
    yPosition += 6;
    pdf.text(`X-Band Current: ${padString(results.currents?.xbandOff || 'N/A', 6)} A`, margin + 5, yPosition);
    yPosition += 10;
    
    // Voltage Current Off Record
    pdf.text('Voltage Current Off Record:', margin, yPosition);
    yPosition += 8;
    
    // PCS Voltage and Current off
    pdf.text('PCS Voltage: 0.000 V    [PASS]', margin + 5, yPosition);
    yPosition += 6;
    pdf.text('PCS Current: 0.000 A', margin + 5, yPosition);
    yPosition += 15;

    // Test Options Section
    checkNewPage(40);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Test Options', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    if (results.testedOptions && results.testedOptions.length > 0) {
      results.testedOptions.forEach((option: string) => {
        checkNewPage(10);
        pdf.text(`‚Ä¢ ${option}`, margin, yPosition);
        yPosition += 6;
      });
    } else {
      pdf.text('No specific options were selected for this test.', margin, yPosition);
      yPosition += 6;
    }
    yPosition += 10;

    // Test Completion Summary Section
    checkNewPage(30);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Test Completion Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully", margin, yPosition);
    yPosition += 6;
    pdf.text(`Report generated: ${now.toLocaleString()}`, margin, yPosition);
    yPosition += 10;

    // Add footer to all pages
    const totalPages = pdf.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      pdf.text(`Generated: ${now.toLocaleString()}`, margin, pageHeight - 10);
    }

    // Save the PDF
    pdf.save(filename);

    console.log(`‚úÖ X-Band PDF report saved successfully: ${filename}`);
    return filename;

  } catch (error) {
    console.error('‚ùå Error generating X-Band PDF report:', error);
    throw new Error(`Failed to generate X-Band PDF report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// Helper function to create test options section
function createOptionsSection(results: any): Paragraph[] {
  const paragraphs: Paragraph[] = [];
  
  // Add paragraph for each option that was tested
  if (results.testedOptions && results.testedOptions.length > 0) {
    results.testedOptions.forEach((option: string) => {
      paragraphs.push(
        new Paragraph({
          text: `- ${option}`,
          spacing: { after: 100 }
        })
      );
    });
  } else {
    paragraphs.push(
      new Paragraph({
        text: "No specific options were selected for this test.",
        spacing: { after: 100 }
      })
    );
  }
  
  return paragraphs;
}

/**
* Utility function to pad a string to a specific length
* 
* @param value The string value to pad
* @param length The desired length
* @returns The padded string
*/
function padString(value: string | number, length: number): string {
  const stringValue = String(value);
  if (!stringValue || stringValue === 'N/A') return stringValue.padStart(length, ' ');
  
  // For numeric values, ensure proper formatting
  if (!isNaN(Number(stringValue))) {
    return parseFloat(stringValue).toFixed(3).padStart(length, ' ');
  }
  
  return stringValue.padStart(length, ' ');
}