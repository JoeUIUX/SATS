// src/services/reports/propulsionReport.ts
import { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, BorderStyle, WidthType, AlignmentType } from 'docx';
import { saveAs } from 'file-saver';
import jsPDF from 'jspdf';

/**
 * Generate both Word document and PDF reports for Propulsion checkout results
 * 
 * @param results The Propulsion test results
 * @returns A promise that resolves to the filename of the saved reports
 */
export async function generatePropulsionReport(results: any): Promise<string> {
  try {
    // Generate both Word and PDF reports
    const wordFilename = await generatePropulsionWordReport(results);
    const pdfFilename = await generatePropulsionPDFReport(results);
    
    return `${wordFilename} and ${pdfFilename}`;
  } catch (error) {
    console.error('‚ùå Error generating Propulsion reports:', error);
    throw new Error(`Failed to generate Propulsion reports: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a Word document report for Propulsion checkout results
 * 
 * @param results The Propulsion test results
 * @returns A promise that resolves to the filename of the saved report
 */
async function generatePropulsionWordReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `Propulsion_Checkout_${dateStr}_${timeStr}.docx`;
  
  console.log(`üìù Generating Propulsion Word report: ${filename}`);
  
  // Create the document
  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          text: "Propulsion Automated Self Check Out Test",
          heading: HeadingLevel.HEADING_1,
          spacing: { after: 200 }
        }),
        
        // Test metadata
        new Paragraph({
          text: `Test Version: 24.3.21`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Date: ${now.toLocaleDateString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Time: ${now.toLocaleTimeString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Generated by: SATS - Satellite Automated Testing System`,
          spacing: { after: 200 }
        }),
        
        // Test Summary
        new Paragraph({
          text: "Test Summary",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'PMA and PPU tests as configured'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`,
          spacing: { after: 100 }
        }),
        
        // Test configuration
        new Paragraph({
          text: `PMA Test: ${results.pma?.status === 'N.A.' ? 'DISABLED' : 'ENABLED'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `PPU Test: ${results.ppu?.status === 'N.A.' ? 'DISABLED' : 'ENABLED'}`,
          spacing: { after: 100 }
        }),
        
        // Separator
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        
        // ECU-1 CAN Check Summary
        new Paragraph({
          text: "* CAN Check Summary ECU-1:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        new Paragraph({
          text: "Voltage Current On Record : -",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 1 Voltage   : ${padString(results.ecu1?.voltage || 'N/A', 6)} V    ${results.ecu1?.status || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 1 Current   : ${padString(results.ecu1?.current || 'N/A', 6)} A`,
          spacing: { after: 100 }
        }),
        
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "Data Get Parameters : -",
          spacing: { after: 100 }
        }),
        
        // ECU-1 Propulsion Telemetry Parameters
        ...createPropulsionTmParagraphs(results.prop1Tm, "ECU-1"),
        
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "Voltage Current Off Record : -",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 1 Voltage   : ${padString(results.ecu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[1] || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 1 Current   : ${padString(results.ecu1OffCurrent || '0.000', 6)} A`,
          spacing: { after: 100 }
        }),
        
        // Add page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // ECU-2 CAN Check Summary
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        new Paragraph({
          text: "* CAN Check Summary ECU-2:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        new Paragraph({
          text: "Voltage Current On Record : -",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 2 Voltage   : ${padString(results.ecu2?.voltage || 'N/A', 6)} V    ${results.ecu2?.status || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 2 Current   : ${padString(results.ecu2?.current || 'N/A', 6)} A`,
          spacing: { after: 100 }
        }),
        
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "Data Get Parameters : -",
          spacing: { after: 100 }
        }),
        
        // ECU-2 Propulsion Telemetry Parameters
        ...createPropulsionTmParagraphs(results.prop2Tm, "ECU-2"),
        
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "Voltage Current Off Record : -",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 2 Voltage   : ${padString(results.ecu2OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[3] || 'N/A'}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `ECU 2 Current   : ${padString(results.ecu2OffCurrent || '0.000', 6)} A`,
          spacing: { after: 100 }
        }),
        
        // Add page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // PMA Check Summary
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        new Paragraph({
          text: "* PMA Check Summary :",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        ...createPmaInfoParagraphs(results),
        
        // Add page break
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // PPU Check Summary
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        new Paragraph({
          text: "* PPU Check Summary :",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        ...createPpuInfoParagraphs(results),
        
        // Add page break for Raw Parameters section
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        
        // Raw Parameters Section
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200 }
        }),
        new Paragraph({
          text: "* Raw Parameters Summary :",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        
        ...createRawParametersParagraphs(results),
        
        // Test Completion Summary
        new Paragraph({
          text: "",
          pageBreakBefore: true
        }),
        new Paragraph({
          text: "* Test Completion Summary:",
          heading: HeadingLevel.HEADING_2,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: results.error ? `Test completed with errors: ${results.error}` : "All tests completed successfully",
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: `Report generated: ${now.toLocaleString()}`,
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 200, before: 200 }
        }),
      ]
    }]
  });
  
  try {
    // Generate the document
    console.log('üîÑ Generating Propulsion Word document...');
    const buffer = await Packer.toBuffer(doc);
    
    // Save the file using file-saver (this will save to the user's default Downloads folder)
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
    saveAs(blob, filename);
    
    console.log(`‚úÖ Propulsion Word report saved successfully: ${filename}`);
    
    // Mark the report as generated
    if (results && typeof results === 'object') {
      results.reportGenerated = true;
    }
    
    return filename;
  } catch (error) {
    console.error('‚ùå Error generating Propulsion Word report:', error);
    throw new Error(`Failed to generate Propulsion Word report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Generate a PDF report for Propulsion checkout results
 * 
 * @param results The Propulsion test results
 * @returns A promise that resolves to the filename of the saved PDF report
 */
async function generatePropulsionPDFReport(results: any): Promise<string> {
  // Get current date and time for the report filename
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const filename = `Propulsion_Checkout_${dateStr}_${timeStr}.pdf`;
  
  console.log(`üìù Generating Propulsion PDF report: ${filename}`);
  
  try {
    // Create new PDF document
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    // Set up the document
    let yPosition = 20;
    const pageWidth = pdf.internal.pageSize.width;
    const pageHeight = pdf.internal.pageSize.height;
    const margin = 20;
    const contentWidth = pageWidth - (2 * margin);

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace: number = 20) => {
      if (yPosition + requiredSpace > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    // Title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Propulsion Automated Self Check Out Test Report', margin, yPosition);
    yPosition += 15;

    // Subtitle
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Generated by SATS - Satellite Automated Testing System', margin, yPosition);
    yPosition += 10;

    // Test metadata
    pdf.setFontSize(10);
    pdf.text(`Test Date: ${now.toLocaleDateString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Time: ${now.toLocaleTimeString()}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Version: 24.3.21`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Tested Options: ${results.testedOptions ? results.testedOptions.join(', ') : 'PMA and PPU tests as configured'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`Test Status: ${results.error ? 'FAILED' : 'COMPLETED'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`PMA Test: ${results.pma?.status === 'N.A.' ? 'DISABLED' : 'ENABLED'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`PPU Test: ${results.ppu?.status === 'N.A.' ? 'DISABLED' : 'ENABLED'}`, margin, yPosition);
    yPosition += 15;

    // Add a separator line
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // ECU-1 CAN Check Summary Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('CAN Check Summary ECU-1', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Voltage Current On Record:', margin, yPosition);
    yPosition += 8;
    pdf.text(`ECU 1 Voltage: ${padString(results.ecu1?.voltage || 'N/A', 6)} V    ${results.ecu1?.status || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`ECU 1 Current: ${padString(results.ecu1?.current || 'N/A', 6)} A`, margin, yPosition);
    yPosition += 12;

    // ECU-1 Data Get Parameters (key values only for PDF space constraints)
    if (results.prop1Tm) {
      pdf.text('Data Get Parameters (Key Values):', margin, yPosition);
      yPosition += 8;
      
      // Add key telemetry values
      const keyParams = [
        { key: 'ECU_Temp', label: 'ECU Temperature', unit: '¬∞C' },
        { key: 'Anode_PPU_1_Voltage', label: 'Anode PPU 1 Voltage', unit: 'V' },
        { key: 'Cathode_PPU_1_Voltage', label: 'Cathode PPU 1 Voltage', unit: 'V' },
        { key: 'Heater_Temp', label: 'Heater Temperature', unit: '¬∞C' },
        { key: 'HP_Tank_Pressure_1', label: 'HP Tank Pressure 1', unit: 'bar' },
        { key: 'Thruster_1_Temp', label: 'Thruster 1 Temp', unit: '¬∞C' },
        { key: 'Thruster_2_Temp', label: 'Thruster 2 Temp', unit: '¬∞C' }
      ];
      
      keyParams.forEach(param => {
        if (results.prop1Tm[param.key] !== undefined) {
          checkNewPage(8);
          pdf.text(`${param.label}: ${results.prop1Tm[param.key]} ${param.unit}`, margin, yPosition);
          yPosition += 6;
        }
      });
    }
    
    yPosition += 8;
    pdf.text('Voltage Current Off Record:', margin, yPosition);
    yPosition += 8;
    pdf.text(`ECU 1 Voltage: ${padString(results.ecu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[1] || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`ECU 1 Current: ${padString(results.ecu1OffCurrent || '0.000', 6)} A`, margin, yPosition);
    yPosition += 20;

    // ECU-2 CAN Check Summary Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('CAN Check Summary ECU-2', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Voltage Current On Record:', margin, yPosition);
    yPosition += 8;
    pdf.text(`ECU 2 Voltage: ${padString(results.ecu2?.voltage || 'N/A', 6)} V    ${results.ecu2?.status || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`ECU 2 Current: ${padString(results.ecu2?.current || 'N/A', 6)} A`, margin, yPosition);
    yPosition += 12;

    // ECU-2 Data Get Parameters (key values only)
    if (results.prop2Tm) {
      pdf.text('Data Get Parameters (Key Values):', margin, yPosition);
      yPosition += 8;
      
      const keyParams = [
        { key: 'ECU_Temp', label: 'ECU Temperature', unit: '¬∞C' },
        { key: 'Anode_PPU_2_Voltage', label: 'Anode PPU 2 Voltage', unit: 'V' },
        { key: 'Cathode_PPU_2_Voltage', label: 'Cathode PPU 2 Voltage', unit: 'V' },
        { key: 'Heater_Temp', label: 'Heater Temperature', unit: '¬∞C' },
        { key: 'HP_Tank_Pressure_2', label: 'HP Tank Pressure 2', unit: 'bar' }
      ];
      
      keyParams.forEach(param => {
        if (results.prop2Tm[param.key] !== undefined) {
          checkNewPage(8);
          pdf.text(`${param.label}: ${results.prop2Tm[param.key]} ${param.unit}`, margin, yPosition);
          yPosition += 6;
        }
      });
    }
    
    yPosition += 8;
    pdf.text('Voltage Current Off Record:', margin, yPosition);
    yPosition += 8;
    pdf.text(`ECU 2 Voltage: ${padString(results.ecu2OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[3] || 'N/A'}`, margin, yPosition);
    yPosition += 6;
    pdf.text(`ECU 2 Current: ${padString(results.ecu2OffCurrent || '0.000', 6)} A`, margin, yPosition);
    yPosition += 20;

    // PMA Check Summary Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('PMA Check Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    if (results.pma && results.pma.status !== 'N.A.') {
      pdf.text('Timing:', margin, yPosition);
      yPosition += 8;
      pdf.text('T0, Power On ECU        : 0 s', margin, yPosition);
      yPosition += 6;
      pdf.text(`T1, Init Payload        : T0 + ${padString(results.pma.initPayl, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T2, Data Get            : T1 + ${padString(results.pma.dataGet, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T3, Data Send           : T2 + ${padString(results.pma.dataSend, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text('T4, Repeated Data Get   : T3 +   1 s', margin, yPosition);
      yPosition += 6;
      pdf.text(`T5, Abort Mission       : T4 + ${padString(results.pma.duration, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T6, Power Off ECU       : T5 + ${padString(results.pma.ecuOff, 3)} s`, margin, yPosition);
      yPosition += 12;

      // Add test parameters
      if (results.ecu1TestVoltage) {
        pdf.text('Voltage Current On Record:', margin, yPosition);
        yPosition += 8;
        pdf.text(`ECU 1 Voltage: ${padString(results.ecu1TestVoltage, 6)} V    ${results.passFailStatus?.[4] || 'N/A'}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`ECU 1 Current: ${padString(results.ecu1TestCurrent || '0.000', 6)} A`, margin, yPosition);
        yPosition += 12;
      }

      // Add statistics if available
      if (results.propStat) {
        checkNewPage(30);
        pdf.text('Statistics:', margin, yPosition);
        yPosition += 8;
        pdf.text(`Command Count       : ${results.propStat.Cmd_Count || 'N/A'}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Acknowledge Count   : ${results.propStat.Ack_Count || 'N/A'}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Timeout Count       : ${results.propStat.Timeout_Count || 'N/A'}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Error Count         : ${results.propStat.Error_Count || 'N/A'}`, margin, yPosition);
        yPosition += 12;
      }
    } else {
      pdf.text('PMA test was not performed', margin, yPosition);
      yPosition += 12;
    }

    // PPU Check Summary Section
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('PPU Check Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    if (results.ppu && results.ppu.status !== 'N.A.') {
      pdf.text('Timing:', margin, yPosition);
      yPosition += 8;
      pdf.text('T0, Power On ECU        : 0 s', margin, yPosition);
      yPosition += 6;
      pdf.text(`T1, Init Payload        : T0 + ${padString(results.ppu.initPayl, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T2, Data Get            : T1 + ${padString(results.ppu.dataGet1, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T3, Power On PPU        : T2 + ${padString(results.ppu.ppuOn, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T4, Data Get            : T3 + ${padString(results.ppu.dataGet2, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T5, Data Send           : T4 + ${padString(results.ppu.dataSend, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text('T6, Repeated Data Get   : T5 +   1 s', margin, yPosition);
      yPosition += 6;
      pdf.text(`T7, Abort Mission       : T6 + ${padString(results.ppu.duration, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T8, Power Off PPU       : T7 + ${padString(results.ppu.ppuOff, 3)} s`, margin, yPosition);
      yPosition += 6;
      pdf.text(`T9, Power Off ECU       : T8 + ${padString(results.ppu.ecuOff, 3)} s`, margin, yPosition);
      yPosition += 12;

      // Add voltage current records
      checkNewPage(30);
      pdf.text('Voltage Current On Record:', margin, yPosition);
      yPosition += 8;
      pdf.text(`ECU 1 Voltage: ${padString(results.ecu1?.voltage || 'N/A', 6)} V    ${results.passFailStatus?.[6] || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`ECU 1 Current: ${padString(results.ecu1?.current || 'N/A', 6)} A`, margin, yPosition);
      yPosition += 6;
      pdf.text(`PPU 1 Voltage: ${padString(results.ppu1?.voltage || 'N/A', 6)} V    ${results.ppu1?.status || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`PPU 1 Current: ${padString(results.ppu1?.current || 'N/A', 6)} A`, margin, yPosition);
      yPosition += 12;

      // Add final voltage current records
      pdf.text('Voltage Current Off Record:', margin, yPosition);
      yPosition += 8;
      pdf.text(`ECU 1 Voltage: ${padString(results.ecu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[8] || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`ECU 1 Current: ${padString(results.ecu1OffCurrent || '0.000', 6)} A`, margin, yPosition);
      yPosition += 6;
      pdf.text(`PPU 1 Voltage: ${padString(results.ppu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[9] || 'N/A'}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`PPU 1 Current: ${padString(results.ppu1OffCurrent || '0.000', 6)} A`, margin, yPosition);
      yPosition += 12;
    } else {
      pdf.text('PPU test was not performed', margin, yPosition);
      yPosition += 12;
    }

    // Complete Raw Parameters Summary for PDF - SHOWS ALL PARAMETERS
    checkNewPage(50);
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Raw Parameters Summary', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(7); // Even smaller font for more parameters
    pdf.setFont('helvetica', 'normal');
    
    if (results.rawParameters) {
      const paramGroups = [
        { title: 'ECU Voltage/Current Parameters', filter: (key: string) => key.includes('ECU') && (key.includes('_V') || key.includes('_I')) },
        { title: 'PPU Voltage/Current Parameters', filter: (key: string) => key.includes('THRU') && (key.includes('_V') || key.includes('_I')) },
        { title: 'PMA Timing Parameters', filter: (key: string) => key.includes('PmaCheck') },
        { title: 'PPU Timing Parameters', filter: (key: string) => key.includes('PpuCheck') },
        { title: 'Propulsion Telecommand Parameters', filter: (key: string) => key.startsWith('OBC1_Prop_') && !key.includes('Check') && !key.includes('Count') && !key.includes('Error') },
{ title: 'Propulsion Telemetry ECU-1 Parameters', filter: (key: string) => key.startsWith('PROPULSION1_') },
        { title: 'Propulsion Telemetry ECU-2 Parameters', filter: (key: string) => key.startsWith('PROPULSION2_') },
        { title: 'Propulsion Statistics', filter: (key: string) => key.includes('Prop_') && (key.includes('Count') || key.includes('Error')) }
      ];
      
      paramGroups.forEach(group => {
        const groupParams = Object.entries(results.rawParameters).filter(([key]) => group.filter(key));
        
        if (groupParams.length > 0) {
          checkNewPage(15);
          pdf.setFont('helvetica', 'bold');
          pdf.text(group.title + ':', margin, yPosition);
          yPosition += 5;
          pdf.setFont('helvetica', 'normal');
          
          // FIXED: Show ALL parameters, not limited to 10
          groupParams.forEach(([key, value]) => {
            checkNewPage(3);
            const displayKey = key.length > 45 ? key.substring(0, 45) + '...' : key;
            pdf.text(`${displayKey}: ${String(value)}`, margin + 2, yPosition);
            yPosition += 3;
          });
          
          yPosition += 4;
        }
      });
      
      // Add miscellaneous parameters that don't fit in other categories
      const allGroupFilters = paramGroups.map(g => g.filter);
      const miscParams = Object.entries(results.rawParameters).filter(([key]) => 
        !allGroupFilters.some(filter => filter(key))
      );
      
      if (miscParams.length > 0) {
        checkNewPage(15);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Miscellaneous Parameters:', margin, yPosition);
        yPosition += 5;
        pdf.setFont('helvetica', 'normal');
        
        miscParams.forEach(([key, value]) => {
          checkNewPage(3);
          const displayKey = key.length > 45 ? key.substring(0, 45) + '...' : key;
          pdf.text(`${displayKey}: ${String(value)}`, margin + 2, yPosition);
          yPosition += 3;
        });
      }
    }

    // Add footer to all pages
    const totalPages = pdf.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
      pdf.text(`Generated: ${now.toLocaleString()}`, margin, pageHeight - 10);
    }

    // Save the PDF
    pdf.save(filename);

    console.log(`‚úÖ Propulsion PDF report saved successfully: ${filename}`);
    return filename;

  } catch (error) {
    console.error('‚ùå Error generating Propulsion PDF report:', error);
    throw new Error(`Failed to generate Propulsion PDF report: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// Helper function to create propulsion telemetry paragraphs with all parameters
function createPropulsionTmParagraphs(propTm: any, ecuLabel: string): Paragraph[] {
  if (!propTm) {
    return [
      new Paragraph({
        text: `No propulsion telemetry data available for ${ecuLabel}`,
        spacing: { after: 100 }
      })
    ];
  }
  
  const propTmParams = [
    { key: "ECU_Temp", label: "Temperature from Electronic Control Unit    :", unit: "deg C" },
    { key: "Anode_PPU_1_Set_Voltage", label: "Set Voltage Anode PPU 1                     :", unit: "V" },
    { key: "Anode_PPU_1_Voltage", label: "Voltage from Anode PPU 1                    :", unit: "V" },
    { key: "Anode_PPU_1_Current", label: "Current from Anode PPU 1                    :", unit: "mA" },
    { key: "Anode_PPU_1_Temp", label: "Temperature of Anode PPU 1                  :", unit: "deg C" },
    { key: "Anode_PPU_2_Set_Voltage", label: "Set Voltage Anode PPU 2                     :", unit: "V" },
    { key: "Anode_PPU_2_Voltage", label: "Voltage from Anode PPU 2                    :", unit: "V" },
    { key: "Anode_PPU_2_Current", label: "Current from Anode PPU 2                    :", unit: "mA" },
    { key: "Anode_PPU_2_Temp", label: "Temperature of Anode PPU 2                  :", unit: "deg C" },
    { key: "Cathode_PPU_1_Set_Voltage", label: "Set Voltage Cathode PPU 1                   :", unit: "V" },
    { key: "Cathode_PPU_1_Voltage", label: "Voltage from Cathode PPU 1                  :", unit: "V" },
    { key: "Cathode_PPU_1_Set_Current", label: "Set Current Cathode PPU 1                   :", unit: "mA" },
    { key: "Cathode_PPU_1_Current", label: "Current from Cathode PPU 1                  :", unit: "mA" },
    { key: "Cathode_PPU_1_Temp", label: "Temperature of Cathode PPU 1                :", unit: "deg C" },
    { key: "Cathode_PPU_2_Set_Voltage", label: "Set Voltage Cathode PPU 2                   :", unit: "V" },
    { key: "Cathode_PPU_2_Voltage", label: "Voltage from Cathode PPU 2                  :", unit: "V" },
    { key: "Cathode_PPU_2_Set_Current", label: "Set Current Cathode PPU 2                   :", unit: "mA" },
    { key: "Cathode_PPU_2_Current", label: "Current from Cathode PPU 2                  :", unit: "mA" },
    { key: "Cathode_PPU_2_Temp", label: "Temperature of Cathode PPU 2                :", unit: "deg C" },
    { key: "Heater_Temp", label: "Temperature of Heater                       :", unit: "deg C" },
    { key: "Heater_1_Current", label: "Current from Heater 1                       :", unit: "A" },
    { key: "Heater_1_Voltage", label: "Voltage from Heater 1                       :", unit: "V" },
    { key: "Heater_1_PWM", label: "PWM of Heater 1                             :", unit: "%" },
    { key: "Heater_2_PWM", label: "PWM of Heater 2                             :", unit: "%" },
    { key: "Heater_2_Current", label: "Current from Heater 2                       :", unit: "A" },
    { key: "Heater_2_Voltage", label: "Voltage from Heater 2                       :", unit: "V" },
    { key: "Heater_3_Current", label: "Current from Heater 3                       :", unit: "A" },
    { key: "Heater_3_Voltage", label: "Voltage from Heater 3                       :", unit: "V" },
    { key: "Heater_3_PWM", label: "PWM of Heater 3                             :", unit: "%" },
    { key: "Heater_4_PWM", label: "PWM of Heater 4                             :", unit: "%" },
    { key: "Heater_4_Current", label: "Current from Heater 4                       :", unit: "A" },
    { key: "Heater_4_Voltage", label: "Voltage from Heater 4                       :", unit: "V" },
    { key: "Thruster_1_Temp", label: "Temperature of Thruster 1                   :", unit: "deg C" },
    { key: "Thruster_2_Temp", label: "Temperature of Thruster 2                   :", unit: "deg C" },
    { key: "HP_Tank_Pressure_1", label: "Pressure from HP transducer 1               :", unit: "bar" },
    { key: "HP_Tank_Pressure_2", label: "Pressure from HP transducer 2               :", unit: "bar" },
    { key: "Regulated_Pressure_1", label: "Pressure from LP transducer 1               :", unit: "mbar" },
    { key: "Regulated_Pressure_2", label: "Pressure from LP transducer 2               :", unit: "mbar" },
    { key: "MFC_1_Pressure", label: "Pressure from LP transducer 3               :", unit: "mbar" },
    { key: "MFC_2_Pressure", label: "Pressure from LP transducer 4               :", unit: "mbar" },
    { key: "MFC_3_Pressure", label: "Pressure from LP transducer 5               :", unit: "mbar" },
    { key: "MFC_4_Pressure", label: "Pressure from LP transducer 6               :", unit: "mbar" },
    { key: "SPARE_1", label: "SPARE 1                                     :", unit: "" },
    { key: "Tank_Temperature_1", label: "Temperature 1 of Tank                       :", unit: "deg C" },
    { key: "Tank_Temperature_2", label: "Temperature 2 of Tank                       :", unit: "deg C" },
    { key: "MFC_1_Temperature", label: "Temperature of MFC 1                        :", unit: "deg C" },
    { key: "MFC_2_Temperature", label: "Temperature of MFC 2                        :", unit: "deg C" },
    { key: "MFC_3_Temperature", label: "Temperature of MFC 3                        :", unit: "deg C" },
    { key: "MFC_4_Temperature", label: "Temperature of MFC 4                        :", unit: "deg C" },
    { key: "Driver_Circuit_1_Temperature", label: "Temperature of Driver Circuit 1             :", unit: "deg C" },
    { key: "Driver_Circuit_2_Temperature", label: "Temperature of Driver Circuit 2             :", unit: "deg C" },
    { key: "PMA_Temperature", label: "Temperature of PMA                          :", unit: "deg C" },
    { key: "IEP_1_PWM", label: "IEP 1 Valve PWM                             :", unit: "%" },
    { key: "IEP_2_PWM", label: "IEP 2 Valve PWM                             :", unit: "%" },
    { key: "IEP_3_Freq", label: "Flow Control Frequency for IEP 3            :", unit: "dHz" },
    { key: "IEP_4_Freq", label: "Flow Control Frequency for IEP 4            :", unit: "dHz" },
    { key: "IEP_5_Freq", label: "Flow Control Frequency for IEP 5            :", unit: "dHz" },
    { key: "IEP_6_Freq", label: "Flow Control Frequency for IEP 6            :", unit: "dHz" },
    { key: "MFC_1_Flow", label: "MFC 1 Full Scale Flow                       :", unit: "0.01%" },
    { key: "MFC_2_Flow", label: "MFC 2 Full Scale Flow                       :", unit: "0.01%" },
    { key: "MFC_3_Flow", label: "MFC 3 Full Scale Flow                       :", unit: "0.01%" },
    { key: "MFC_4_Flow", label: "MFC 4 Full Scale Flow                       :", unit: "0.01%" },
    { key: "SPARE_2", label: "SPARE 2                                     :", unit: "" },
    { key: "MFC_2_Thruster_Selector", label: "Switch Valve 1                              :", unit: "" },
    { key: "MFC_4_Thruster_Selector", label: "Switch Valve 2                              :", unit: "" },
    { key: "MFC_1_Thruster_Selector", label: "Switch Valve 3                              :", unit: "" },
    { key: "MFC_3_Thruster_Selector", label: "Switch Valve 4                              :", unit: "" },
    { key: "Thruster_1_Cathode_Selector", label: "Switch Valve 5                              :", unit: "" },
    { key: "Thruster_2_Cathode_Selector", label: "Switch Valve 6                              :", unit: "" },
    { key: "Anode_PPU1_Aliena_Thruster_Selector", label: "Selector Switch 1                           :", unit: "" },
    { key: "Anode_PPU2_ST_PPU_Thruster_Selector", label: "Selector Switch 2                           :", unit: "" },
    { key: "Cathode_PPU_1_Aliena_Thruster_Selector", label: "Selector Switch 3                           :", unit: "" },
    { key: "Thruster_Unit_1_Cathode_Selector", label: "Selector Switch 4                           :", unit: "" },
    { key: "Cathode_PPU_2_ST_PPU_Thruster_Selector", label: "Selector Switch 5                           :", unit: "" },
    { key: "Thruster_Unit_2_Cathode_Selector", label: "Selector Switch 6                              :", unit: "" },
    { key: "Anode_PPU1_Aliena_Enable", label: "Enable Switch 1                             :", unit: "" },
    { key: "Cathode_PPU1_Aliena_Enable", label: "Enable Switch 2                             :", unit: "" },
    { key: "Test_Override", label: "Test Override                               :", unit: "" },
    { key: "Initialisation_mode", label: "Initialisation mode                         :", unit: "" },
    { key: "SPARE_3", label: "SPARE 3                                     :", unit: "" },
    { key: "SPARE_4", label: "SPARE 4                                     :", unit: "" },
    { key: "SPARE_5", label: "SPARE 5                                     :", unit: "" },
    { key: "Error_vector_1", label: "Error vector 1                              :", unit: "" },
    { key: "Error_Vector_2", label: "Error vector 2                              :", unit: "" },
    { key: "SPARE_6", label: "SPARE 6                                     :", unit: "" },
    { key: "SPARE_7", label: "SPARE 7                                     :", unit: "" }
  ];
  
  const paragraphs: Paragraph[] = [];
  
  for (const param of propTmParams) {
    if (propTm && propTm[param.key] !== undefined) {
      paragraphs.push(
        new Paragraph({
          text: `${param.label} ${padString(propTm[param.key], 4)} ${param.unit}`,
          spacing: { after: 50 }
        })
      );
    }
  }
  
  return paragraphs;
}

// Helper function to create PMA info paragraphs with complete parameter coverage
function createPmaInfoParagraphs(results: any): Paragraph[] {
  if (!results.pma || results.pma.status === 'N.A.') {
    return [new Paragraph({
      text: 'PMA test was not performed',
      spacing: { after: 100 }
    })];
  }
  
  const paragraphs = [
    new Paragraph({
      text: "Timing : -",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "T0, Power On ECU        : 0 s",
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T1, Init Payload        : T0 + ${padString(results.pma.initPayl, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T2, Data Get            : T1 + ${padString(results.pma.dataGet, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T3, Data Send           : T2 + ${padString(results.pma.dataSend, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: "T4, Repeated Data Get   : T3 +   1 s",
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T5, Abort Mission       : T4 + ${padString(results.pma.duration, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T6, Power Off ECU       : T5 + ${padString(results.pma.ecuOff, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "Data Send Parameter : -",
      spacing: { after: 100 }
    })
  ];
  
  // Add propulsion TC parameters if available
  if (results.propTc) {
    const propTcParams = [
      { key: "Anode_PPU_1_Set_V", label: "Set Voltage Anode PPU 1         :" },
      { key: "Anode_PPU_2_Set_V", label: "Set Voltage Anode PPU 2         :" },
      { key: "Cathode_PPU_1_Set_V", label: "Set Voltage Cathode PPU 1       :" },
      { key: "Cathode_PPU_1_Set_A", label: "Set Current Cathode PPU 1       :" },
      { key: "Cathode_PPU_2_Set_V", label: "Set Voltage Cathode PPU 2       :" },
      { key: "Cathode_PPU_2_Set_A", label: "Set Current Cathode PPU 2       :" },
      { key: "Heater_1_PWM", label: "PWM Setting for Heater 1        :" },
      { key: "Heater_2_PWM", label: "PWM Setting for Heater 2        :" },
      { key: "Heater_3_PWM", label: "PWM Setting for Heater 3        :" },
      { key: "Heater_4_PWM", label: "PWM Setting for Heater 4        :" },
      { key: "Anode_PPU_1_Set_A", label: "Set Current Anode PPU 1         :" },
      { key: "IEP_1_PWM", label: "IEP 1 Valve PWM                 :" },
      { key: "IEP_2_PWM", label: "IEP 2 Valve PWM                 :" },
      { key: "IEP_3_Freq", label: "Flow Control Frequency for IEP3 :" },
      { key: "IEP_4_Freq", label: "Flow Control Frequency for IEP4 :" },
      { key: "IEP_5_Freq", label: "Flow Control Frequency for IEP5 :" },
      { key: "IEP_6_Freq", label: "Flow Control Frequency for IEP6 :" },
      { key: "MFC_1_Flow", label: "MFC 1 Full Scale Flow           :" },
      { key: "MFC_2_Flow", label: "MFC 2 Full Scale Flow           :" },
      { key: "MFC_3_Flow", label: "MFC 3 Full Scale Flow           :" },
      { key: "MFC_4_Flow", label: "MFC 4 Full Scale Flow           :" },
      { key: "Test_Duration", label: "Test Duration                   :" },
      { key: "MFC_2_Thruster_Selector", label: "Switch Valve 1                  :" },
      { key: "MFC_4_Thruster_Selector", label: "Switch Valve 2                  :" },
      { key: "MFC_1_Thruster_Selector", label: "Switch Valve 3                  :" },
      { key: "MFC_3_Thruster_Selector", label: "Switch Valve 4                  :" },
      { key: "Thruster_1_Cathode_Selector", label: "Switch Valve 5                  :" },
      { key: "Thruster_2_Cathode_Selector", label: "Switch Valve 6                  :" },
      { key: "Anode_PPU1_Aliena_Thruster_Selector", label: "Selector Switch 1               :" },
      { key: "Anode_PPU2_ST_PPU_Thruster_Selector", label: "Selector Switch 2               :" },
      { key: "Cathode_PPU_1_Aliena_Thruster_Selector", label: "Selector Switch 3               :" },
      { key: "Thruster_Unit_1_Cathode_Selector", label: "Selector Switch 4               :" },
      { key: "Cathode_PPU_2_ST_PPU_Thruster_Selector", label: "Selector Switch 5               :" },
      { key: "Thruster_Unit_2_Cathode_Selector", label: "Selector Switch 6               :" },
      { key: "Anode_PPU1_Aliena_Enable", label: "Enable Switch 1                 :" },
      { key: "Cathode_PPU1_Aliena_Enable", label: "Enable Switch 2                 :" },
      { key: "Test_Override", label: "Test Override                   :" },
      { key: "Spare_3", label: "Spare 3                         :" },
      { key: "Spare_4", label: "Spare 4                         :" },
      { key: "Spare_5", label: "Spare 5                         :" }
    ];
    
    for (const param of propTcParams) {
      if (results.propTc[param.key] !== undefined) {
        paragraphs.push(
          new Paragraph({
            text: `${param.label} ${results.propTc[param.key]}`,
            spacing: { after: 50 }
          })
        );
      }
    }
  } else {
    paragraphs.push(
      new Paragraph({
        text: "Test parameters transmitted to propulsion system",
        spacing: { after: 100 }
      })
    );
  }
  
  paragraphs.push(
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    })
  );
  
  // Add voltage/current data during test if available
  if (results.ecu1TestVoltage) {
    paragraphs.push(
      new Paragraph({
        text: "Voltage Current On Record : -",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `ECU 1 Voltage   : ${padString(results.ecu1TestVoltage, 6)} V    ${results.passFailStatus?.[4] || 'N/A'}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `ECU 1 Current   : ${padString(results.ecu1TestCurrent || '0.000', 6)} A`,
        spacing: { after: 100 }
      })
    );
  }
  
  // Add telemetry data if available
  if (results.pmaTm) {
    paragraphs.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "Data Get Parameters : -",
        spacing: { after: 100 }
      }),
      ...createPropulsionTmParagraphs(results.pmaTm, "PMA")
    );
  }
  
  // Add statistics if available
  if (results.propStat) {
    paragraphs.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "Statistics : -",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Command Count       : ${results.propStat.Cmd_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Acknowledge Count   : ${results.propStat.Ack_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Timeout Count       : ${results.propStat.Timeout_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Error Count         : ${results.propStat.Error_Count || 'N/A'}`,
        spacing: { after: 50 }
      })
    );
  }
  
  // Add final voltage/current data if available
  if (results.ecu1FinalVoltage) {
    paragraphs.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "Voltage Current Off Record : -",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `ECU 1 Voltage   : ${padString(results.ecu1FinalVoltage, 6)} V    ${results.passFailStatus?.[5] || 'N/A'}`,
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `ECU 1 Current   : ${padString(results.ecu1FinalCurrent || '0.000', 6)} A`,
        spacing: { after: 100 }
      })
    );
  }
  
  return paragraphs;
}

// Helper function to create PPU info paragraphs with complete parameter coverage
function createPpuInfoParagraphs(results: any): Paragraph[] {
  if (!results.ppu || results.ppu.status === 'N.A.') {
    return [new Paragraph({
      text: 'PPU test was not performed',
      spacing: { after: 100 }
    })];
  }
  
  const paragraphs = [
    new Paragraph({
      text: "Timing : -",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "T0, Power On ECU        : 0 s",
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T1, Init Payload        : T0 + ${padString(results.ppu.initPayl, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T2, Data Get            : T1 + ${padString(results.ppu.dataGet1, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T3, Power On PPU        : T2 + ${padString(results.ppu.ppuOn, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T4, Data Get            : T3 + ${padString(results.ppu.dataGet2, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T5, Data Send           : T4 + ${padString(results.ppu.dataSend, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: "T6, Repeated Data Get   : T5 +   1 s",
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T7, Abort Mission       : T6 + ${padString(results.ppu.duration, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T8, Power Off PPU       : T7 + ${padString(results.ppu.ppuOff, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: `T9, Power Off ECU       : T8 + ${padString(results.ppu.ecuOff, 3)} s`,
      spacing: { after: 50 }
    }),
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "Data Send Parameter : -",
      spacing: { after: 100 }
    })
  ];
  
  // Add propulsion TC parameters if available (same as PMA)
  if (results.propTc) {
    const propTcParams = [
      { key: "Anode_PPU_1_Set_V", label: "Set Voltage Anode PPU 1         :" },
      { key: "Anode_PPU_2_Set_V", label: "Set Voltage Anode PPU 2         :" },
      { key: "Cathode_PPU_1_Set_V", label: "Set Voltage Cathode PPU 1       :" },
      { key: "Cathode_PPU_1_Set_A", label: "Set Current Cathode PPU 1       :" },
      { key: "Cathode_PPU_2_Set_V", label: "Set Voltage Cathode PPU 2       :" },
      { key: "Cathode_PPU_2_Set_A", label: "Set Current Cathode PPU 2       :" },
      { key: "Heater_1_PWM", label: "PWM Setting for Heater 1        :" },
{ key: "Heater_1_PWM", label: "PWM Setting for Heater 1        :" },
      { key: "Heater_2_PWM", label: "PWM Setting for Heater 2        :" },
      { key: "Heater_3_PWM", label: "PWM Setting for Heater 3        :" },
      { key: "Heater_4_PWM", label: "PWM Setting for Heater 4        :" },
      { key: "Anode_PPU_1_Set_A", label: "Set Current Anode PPU 1         :" },
      { key: "IEP_1_PWM", label: "IEP 1 Valve PWM                 :" },
      { key: "IEP_2_PWM", label: "IEP 2 Valve PWM                 :" },
      { key: "IEP_3_Freq", label: "Flow Control Frequency for IEP3 :" },
      { key: "IEP_4_Freq", label: "Flow Control Frequency for IEP4 :" },
      { key: "IEP_5_Freq", label: "Flow Control Frequency for IEP5 :" },
      { key: "IEP_6_Freq", label: "Flow Control Frequency for IEP6 :" },
      { key: "MFC_1_Flow", label: "MFC 1 Full Scale Flow           :" },
      { key: "MFC_2_Flow", label: "MFC 2 Full Scale Flow           :" },
      { key: "MFC_3_Flow", label: "MFC 3 Full Scale Flow           :" },
      { key: "MFC_4_Flow", label: "MFC 4 Full Scale Flow           :" },
      { key: "Test_Duration", label: "Test Duration                   :" },
      { key: "MFC_2_Thruster_Selector", label: "Switch Valve 1                  :" },
      { key: "MFC_4_Thruster_Selector", label: "Switch Valve 2                  :" },
      { key: "MFC_1_Thruster_Selector", label: "Switch Valve 3                  :" },
      { key: "MFC_3_Thruster_Selector", label: "Switch Valve 4                  :" },
      { key: "Thruster_1_Cathode_Selector", label: "Switch Valve 5                  :" },
      { key: "Thruster_2_Cathode_Selector", label: "Switch Valve 6                  :" },
      { key: "Anode_PPU1_Aliena_Thruster_Selector", label: "Selector Switch 1               :" },
      { key: "Anode_PPU2_ST_PPU_Thruster_Selector", label: "Selector Switch 2               :" },
      { key: "Cathode_PPU_1_Aliena_Thruster_Selector", label: "Selector Switch 3               :" },
      { key: "Thruster_Unit_1_Cathode_Selector", label: "Selector Switch 4               :" },
      { key: "Cathode_PPU_2_ST_PPU_Thruster_Selector", label: "Selector Switch 5               :" },
      { key: "Thruster_Unit_2_Cathode_Selector", label: "Selector Switch 6               :" },
      { key: "Anode_PPU1_Aliena_Enable", label: "Enable Switch 1                 :" },
      { key: "Cathode_PPU1_Aliena_Enable", label: "Enable Switch 2                 :" },
      { key: "Test_Override", label: "Test Override                   :" },
      { key: "Spare_3", label: "Spare 3                         :" },
      { key: "Spare_4", label: "Spare 4                         :" },
      { key: "Spare_5", label: "Spare 5                         :" }
    ];
    
    for (const param of propTcParams) {
      if (results.propTc[param.key] !== undefined) {
        paragraphs.push(
          new Paragraph({
            text: `${param.label} ${results.propTc[param.key]}`,
            spacing: { after: 50 }
          })
        );
      }
    }
  } else {
    paragraphs.push(
      new Paragraph({
        text: "Test parameters transmitted to propulsion system",
        spacing: { after: 100 }
      })
    );
  }
  
  paragraphs.push(
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 200, before: 200 }
    })
  );
  
  // Add ECU and PPU voltage/current data during test if available
  paragraphs.push(
    new Paragraph({
      text: "Voltage Current On Record : -",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `ECU 1 Voltage   : ${padString(results.ecu1?.voltage || 'N/A', 6)} V    ${results.passFailStatus?.[6] || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `ECU 1 Current   : ${padString(results.ecu1?.current || 'N/A', 6)} A`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `PPU 1 Voltage   : ${padString(results.ppu1?.voltage || 'N/A', 6)} V    ${results.ppu1?.status || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `PPU 1 Current   : ${padString(results.ppu1?.current || 'N/A', 6)} A`,
      spacing: { after: 100 }
    })
  );
  
  // Add telemetry data if available
  if (results.ppuTm) {
    paragraphs.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "Data Get Parameters : -",
        spacing: { after: 100 }
      }),
      ...createPropulsionTmParagraphs(results.ppuTm, "PPU")
    );
  }
  
  // Add statistics if available
  if (results.propStat) {
    paragraphs.push(
      new Paragraph({
        text: "--------------------------------------------------------------------",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: "Statistics : -",
        spacing: { after: 100 }
      }),
      new Paragraph({
        text: `Command Count       : ${results.propStat.Cmd_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Acknowledge Count   : ${results.propStat.Ack_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Timeout Count       : ${results.propStat.Timeout_Count || 'N/A'}`,
        spacing: { after: 50 }
      }),
      new Paragraph({
        text: `Error Count         : ${results.propStat.Error_Count || 'N/A'}`,
        spacing: { after: 50 }
      })
    );
  }
  
  // Add final voltage/current data if available
  paragraphs.push(
    new Paragraph({
      text: "--------------------------------------------------------------------",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: "Voltage Current Off Record : -",
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `ECU 1 Voltage   : ${padString(results.ecu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[8] || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `ECU 1 Current   : ${padString(results.ecu1OffCurrent || '0.000', 6)} A`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `PPU 1 Voltage   : ${padString(results.ppu1OffVoltage || '0.000', 6)} V    ${results.passFailStatus?.[9] || 'N/A'}`,
      spacing: { after: 100 }
    }),
    new Paragraph({
      text: `PPU 1 Current   : ${padString(results.ppu1OffCurrent || '0.000', 6)} A`,
      spacing: { after: 100 }
    })
  );
  
  return paragraphs;
}

// Define the parameter type
interface ParameterItem {
  key: string;
  value: unknown;
}

// Define the parameter group type
interface ParameterGroup {
  title: string;
  filter: (key: string) => boolean;
  params: ParameterItem[];
}

// New helper function to create Raw Parameters section
function createRawParametersParagraphs(results: any): Paragraph[] {
  if (!results.rawParameters) {
    return [new Paragraph({
      text: 'No raw parameters available',
      spacing: { after: 100 }
    })];
  }

  const paragraphs: Paragraph[] = [
    new Paragraph({
      text: "All raw parameters captured during the propulsion checkout test:",
      spacing: { after: 100 }
    })
  ];

  // Group parameters by category for better organization
  const parameterGroups: ParameterGroup[] = [
    {
      title: "PMA Timing Parameters",
      filter: (key: string) => key.includes("PmaCheck"),
      params: []
    },
    {
      title: "PPU Timing Parameters", 
      filter: (key: string) => key.includes("PpuCheck"),
      params: []
    },
    {
      title: "ECU Voltage/Current Parameters",
      filter: (key: string) => key.includes("ECU") && (key.includes("_V") || key.includes("_I")),
      params: []
    },
    {
      title: "PPU Voltage/Current Parameters",
      filter: (key: string) => key.includes("THRU") && (key.includes("_V") || key.includes("_I")),
      params: []
    },
    {
      title: "Propulsion Telecommand Parameters",
      filter: (key: string) => key.startsWith("OBC1_Prop_") && !key.includes("Check") && !key.includes("Count") && !key.includes("Error"),
      params: []
    },
    {
      title: "Propulsion Telemetry ECU-1 Parameters",
      filter: (key: string) => key.startsWith("PROPULSION1_"),
      params: []
    },
    {
      title: "Propulsion Telemetry ECU-2 Parameters", 
      filter: (key: string) => key.startsWith("PROPULSION2_"),
      params: []
    },
    {
      title: "Propulsion Statistics Parameters",
      filter: (key: string) => key.includes("Prop_") && (key.includes("Count") || key.includes("Error")),
      params: []
    }
  ];

  // Organize parameters into groups
  Object.entries(results.rawParameters).forEach(([key, value]) => {
    let assigned = false;
    for (const group of parameterGroups) {
      if (group.filter(key)) {
        group.params.push({ key, value });
        assigned = true;
        break;
      }
    }
    // If not assigned to any group, add to a miscellaneous group
    if (!assigned) {
      let miscGroup = parameterGroups.find(g => g.title === "Miscellaneous Parameters");
      if (!miscGroup) {
        miscGroup = {
          title: "Miscellaneous Parameters",
          filter: () => true,
          params: []
        };
        parameterGroups.push(miscGroup);
      }
      miscGroup.params.push({ key, value });
    }
  });

  // Add each group to paragraphs
  parameterGroups.forEach(group => {
    if (group.params.length > 0) {
      paragraphs.push(
        new Paragraph({
          text: "",
          spacing: { after: 100 }
        }),
        new Paragraph({
          children: [
            new TextRun({
              text: `${group.title}:`,
              bold: true,
              size: 24
            })
          ],
          spacing: { after: 100 }
        }),
        new Paragraph({
          text: "--------------------------------------------------------------------",
          spacing: { after: 50 }
        })
      );

      group.params.forEach(({ key, value }) => {
        // Ensure key is a string and pad it safely
        const keyStr = String(key);
        const paddedKey = keyStr + ' '.repeat(Math.max(0, 45 - keyStr.length));
        paragraphs.push(
          new Paragraph({
            text: `${paddedKey}: ${String(value)}`,
            spacing: { after: 25 }
          })
        );
      });
    }
  });

  return paragraphs;
}

/**
 * Utility function to pad a string to a specific length
 * 
 * @param value The string value to pad
 * @param length The desired length
 * @returns The padded string
 */
function padString(value: string | number, length: number): string {
  const strValue = String(value || '');
  if (!strValue) return ''.padStart(length, ' ');
  
  // If it's a number, format it with fixed precision
  if (!isNaN(Number(strValue))) {
    const num = parseFloat(strValue);
    return num.toFixed(3).padStart(length, ' ');
  }
  
  return strValue.padStart(length, ' ');
}